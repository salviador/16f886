

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed May 10 11:22:33 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	eeprom_data,global,class=EEDATA,space=3,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2
    53                           	psect	intentry,global,class=CODE,delta=2
    54                           	dabs	1,0x7E,2
    55  0000                     
    56                           ; Version 1.42
    57                           ; Generated 13/04/2017 GMT
    58                           ; 
    59                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC16F886 Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     	;# 
    91  0001                     	;# 
    92  0002                     	;# 
    93  0003                     	;# 
    94  0004                     	;# 
    95  0005                     	;# 
    96  0006                     	;# 
    97  0007                     	;# 
    98  0009                     	;# 
    99  000A                     	;# 
   100  000B                     	;# 
   101  000C                     	;# 
   102  000D                     	;# 
   103  000E                     	;# 
   104  000E                     	;# 
   105  000F                     	;# 
   106  0010                     	;# 
   107  0011                     	;# 
   108  0012                     	;# 
   109  0013                     	;# 
   110  0014                     	;# 
   111  0015                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001B                     	;# 
   119  001B                     	;# 
   120  001C                     	;# 
   121  001D                     	;# 
   122  001E                     	;# 
   123  001F                     	;# 
   124  0081                     	;# 
   125  0085                     	;# 
   126  0086                     	;# 
   127  0087                     	;# 
   128  0089                     	;# 
   129  008C                     	;# 
   130  008D                     	;# 
   131  008E                     	;# 
   132  008F                     	;# 
   133  0090                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0093                     	;# 
   137  0093                     	;# 
   138  0093                     	;# 
   139  0094                     	;# 
   140  0095                     	;# 
   141  0096                     	;# 
   142  0097                     	;# 
   143  0098                     	;# 
   144  0099                     	;# 
   145  009A                     	;# 
   146  009B                     	;# 
   147  009C                     	;# 
   148  009D                     	;# 
   149  009E                     	;# 
   150  009F                     	;# 
   151  0105                     	;# 
   152  0107                     	;# 
   153  0108                     	;# 
   154  0109                     	;# 
   155  010C                     	;# 
   156  010C                     	;# 
   157  010D                     	;# 
   158  010E                     	;# 
   159  010F                     	;# 
   160  0185                     	;# 
   161  0187                     	;# 
   162  0188                     	;# 
   163  0189                     	;# 
   164  018C                     	;# 
   165  018D                     	;# 
   166                           
   167                           	psect	eeprom_data
   168  0000  0000 0001 0002 0003 0004 0005 0006 0007 	db	0,1,2,3,4,5,6,7	;# 
   169  0000                     	;# 
   170  0001                     	;# 
   171  0002                     	;# 
   172  0003                     	;# 
   173  0004                     	;# 
   174  0005                     	;# 
   175  0006                     	;# 
   176  0007                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  000E                     	;# 
   184  000F                     	;# 
   185  0010                     	;# 
   186  0011                     	;# 
   187  0012                     	;# 
   188  0013                     	;# 
   189  0014                     	;# 
   190  0015                     	;# 
   191  0015                     	;# 
   192  0016                     	;# 
   193  0017                     	;# 
   194  0018                     	;# 
   195  0019                     	;# 
   196  001A                     	;# 
   197  001B                     	;# 
   198  001B                     	;# 
   199  001C                     	;# 
   200  001D                     	;# 
   201  001E                     	;# 
   202  001F                     	;# 
   203  0081                     	;# 
   204  0085                     	;# 
   205  0086                     	;# 
   206  0087                     	;# 
   207  0089                     	;# 
   208  008C                     	;# 
   209  008D                     	;# 
   210  008E                     	;# 
   211  008F                     	;# 
   212  0090                     	;# 
   213  0091                     	;# 
   214  0092                     	;# 
   215  0093                     	;# 
   216  0093                     	;# 
   217  0093                     	;# 
   218  0094                     	;# 
   219  0095                     	;# 
   220  0096                     	;# 
   221  0097                     	;# 
   222  0098                     	;# 
   223  0099                     	;# 
   224  009A                     	;# 
   225  009B                     	;# 
   226  009C                     	;# 
   227  009D                     	;# 
   228  009E                     	;# 
   229  009F                     	;# 
   230  0105                     	;# 
   231  0107                     	;# 
   232  0108                     	;# 
   233  0109                     	;# 
   234  010C                     	;# 
   235  010C                     	;# 
   236  010D                     	;# 
   237  010E                     	;# 
   238  010F                     	;# 
   239  0185                     	;# 
   240  0187                     	;# 
   241  0188                     	;# 
   242  0189                     	;# 
   243  018C                     	;# 
   244  018D                     	;# 
   245  0000                     	;# 
   246  0001                     	;# 
   247  0002                     	;# 
   248  0003                     	;# 
   249  0004                     	;# 
   250  0005                     	;# 
   251  0006                     	;# 
   252  0007                     	;# 
   253  0009                     	;# 
   254  000A                     	;# 
   255  000B                     	;# 
   256  000C                     	;# 
   257  000D                     	;# 
   258  000E                     	;# 
   259  000E                     	;# 
   260  000F                     	;# 
   261  0010                     	;# 
   262  0011                     	;# 
   263  0012                     	;# 
   264  0013                     	;# 
   265  0014                     	;# 
   266  0015                     	;# 
   267  0015                     	;# 
   268  0016                     	;# 
   269  0017                     	;# 
   270  0018                     	;# 
   271  0019                     	;# 
   272  001A                     	;# 
   273  001B                     	;# 
   274  001B                     	;# 
   275  001C                     	;# 
   276  001D                     	;# 
   277  001E                     	;# 
   278  001F                     	;# 
   279  0081                     	;# 
   280  0085                     	;# 
   281  0086                     	;# 
   282  0087                     	;# 
   283  0089                     	;# 
   284  008C                     	;# 
   285  008D                     	;# 
   286  008E                     	;# 
   287  008F                     	;# 
   288  0090                     	;# 
   289  0091                     	;# 
   290  0092                     	;# 
   291  0093                     	;# 
   292  0093                     	;# 
   293  0093                     	;# 
   294  0094                     	;# 
   295  0095                     	;# 
   296  0096                     	;# 
   297  0097                     	;# 
   298  0098                     	;# 
   299  0099                     	;# 
   300  009A                     	;# 
   301  009B                     	;# 
   302  009C                     	;# 
   303  009D                     	;# 
   304  009E                     	;# 
   305  009F                     	;# 
   306  0105                     	;# 
   307  0107                     	;# 
   308  0108                     	;# 
   309  0109                     	;# 
   310  010C                     	;# 
   311  010C                     	;# 
   312  010D                     	;# 
   313  010E                     	;# 
   314  010F                     	;# 
   315  0185                     	;# 
   316  0187                     	;# 
   317  0188                     	;# 
   318  0189                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  0000                     	;# 
   322  0001                     	;# 
   323  0002                     	;# 
   324  0003                     	;# 
   325  0004                     	;# 
   326  0005                     	;# 
   327  0006                     	;# 
   328  0007                     	;# 
   329  0009                     	;# 
   330  000A                     	;# 
   331  000B                     	;# 
   332  000C                     	;# 
   333  000D                     	;# 
   334  000E                     	;# 
   335  000E                     	;# 
   336  000F                     	;# 
   337  0010                     	;# 
   338  0011                     	;# 
   339  0012                     	;# 
   340  0013                     	;# 
   341  0014                     	;# 
   342  0015                     	;# 
   343  0015                     	;# 
   344  0016                     	;# 
   345  0017                     	;# 
   346  0018                     	;# 
   347  0019                     	;# 
   348  001A                     	;# 
   349  001B                     	;# 
   350  001B                     	;# 
   351  001C                     	;# 
   352  001D                     	;# 
   353  001E                     	;# 
   354  001F                     	;# 
   355  0081                     	;# 
   356  0085                     	;# 
   357  0086                     	;# 
   358  0087                     	;# 
   359  0089                     	;# 
   360  008C                     	;# 
   361  008D                     	;# 
   362  008E                     	;# 
   363  008F                     	;# 
   364  0090                     	;# 
   365  0091                     	;# 
   366  0092                     	;# 
   367  0093                     	;# 
   368  0093                     	;# 
   369  0093                     	;# 
   370  0094                     	;# 
   371  0095                     	;# 
   372  0096                     	;# 
   373  0097                     	;# 
   374  0098                     	;# 
   375  0099                     	;# 
   376  009A                     	;# 
   377  009B                     	;# 
   378  009C                     	;# 
   379  009D                     	;# 
   380  009E                     	;# 
   381  009F                     	;# 
   382  0105                     	;# 
   383  0107                     	;# 
   384  0108                     	;# 
   385  0109                     	;# 
   386  010C                     	;# 
   387  010C                     	;# 
   388  010D                     	;# 
   389  010E                     	;# 
   390  010F                     	;# 
   391  0185                     	;# 
   392  0187                     	;# 
   393  0188                     	;# 
   394  0189                     	;# 
   395  018C                     	;# 
   396  018D                     	;# 
   397  0000                     	;# 
   398  0001                     	;# 
   399  0002                     	;# 
   400  0003                     	;# 
   401  0004                     	;# 
   402  0005                     	;# 
   403  0006                     	;# 
   404  0007                     	;# 
   405  0009                     	;# 
   406  000A                     	;# 
   407  000B                     	;# 
   408  000C                     	;# 
   409  000D                     	;# 
   410  000E                     	;# 
   411  000E                     	;# 
   412  000F                     	;# 
   413  0010                     	;# 
   414  0011                     	;# 
   415  0012                     	;# 
   416  0013                     	;# 
   417  0014                     	;# 
   418  0015                     	;# 
   419  0015                     	;# 
   420  0016                     	;# 
   421  0017                     	;# 
   422  0018                     	;# 
   423  0019                     	;# 
   424  001A                     	;# 
   425  001B                     	;# 
   426  001B                     	;# 
   427  001C                     	;# 
   428  001D                     	;# 
   429  001E                     	;# 
   430  001F                     	;# 
   431  0081                     	;# 
   432  0085                     	;# 
   433  0086                     	;# 
   434  0087                     	;# 
   435  0089                     	;# 
   436  008C                     	;# 
   437  008D                     	;# 
   438  008E                     	;# 
   439  008F                     	;# 
   440  0090                     	;# 
   441  0091                     	;# 
   442  0092                     	;# 
   443  0093                     	;# 
   444  0093                     	;# 
   445  0093                     	;# 
   446  0094                     	;# 
   447  0095                     	;# 
   448  0096                     	;# 
   449  0097                     	;# 
   450  0098                     	;# 
   451  0099                     	;# 
   452  009A                     	;# 
   453  009B                     	;# 
   454  009C                     	;# 
   455  009D                     	;# 
   456  009E                     	;# 
   457  009F                     	;# 
   458  0105                     	;# 
   459  0107                     	;# 
   460  0108                     	;# 
   461  0109                     	;# 
   462  010C                     	;# 
   463  010C                     	;# 
   464  010D                     	;# 
   465  010E                     	;# 
   466  010F                     	;# 
   467  0185                     	;# 
   468  0187                     	;# 
   469  0188                     	;# 
   470  0189                     	;# 
   471  018C                     	;# 
   472  018D                     	;# 
   473  0000                     	;# 
   474  0001                     	;# 
   475  0002                     	;# 
   476  0003                     	;# 
   477  0004                     	;# 
   478  0005                     	;# 
   479  0006                     	;# 
   480  0007                     	;# 
   481  0009                     	;# 
   482  000A                     	;# 
   483  000B                     	;# 
   484  000C                     	;# 
   485  000D                     	;# 
   486  000E                     	;# 
   487  000E                     	;# 
   488  000F                     	;# 
   489  0010                     	;# 
   490  0011                     	;# 
   491  0012                     	;# 
   492  0013                     	;# 
   493  0014                     	;# 
   494  0015                     	;# 
   495  0015                     	;# 
   496  0016                     	;# 
   497  0017                     	;# 
   498  0018                     	;# 
   499  0019                     	;# 
   500  001A                     	;# 
   501  001B                     	;# 
   502  001B                     	;# 
   503  001C                     	;# 
   504  001D                     	;# 
   505  001E                     	;# 
   506  001F                     	;# 
   507  0081                     	;# 
   508  0085                     	;# 
   509  0086                     	;# 
   510  0087                     	;# 
   511  0089                     	;# 
   512  008C                     	;# 
   513  008D                     	;# 
   514  008E                     	;# 
   515  008F                     	;# 
   516  0090                     	;# 
   517  0091                     	;# 
   518  0092                     	;# 
   519  0093                     	;# 
   520  0093                     	;# 
   521  0093                     	;# 
   522  0094                     	;# 
   523  0095                     	;# 
   524  0096                     	;# 
   525  0097                     	;# 
   526  0098                     	;# 
   527  0099                     	;# 
   528  009A                     	;# 
   529  009B                     	;# 
   530  009C                     	;# 
   531  009D                     	;# 
   532  009E                     	;# 
   533  009F                     	;# 
   534  0105                     	;# 
   535  0107                     	;# 
   536  0108                     	;# 
   537  0109                     	;# 
   538  010C                     	;# 
   539  010C                     	;# 
   540  010D                     	;# 
   541  010E                     	;# 
   542  010F                     	;# 
   543  0185                     	;# 
   544  0187                     	;# 
   545  0188                     	;# 
   546  0189                     	;# 
   547  018C                     	;# 
   548  018D                     	;# 
   549  0000                     	;# 
   550  0001                     	;# 
   551  0002                     	;# 
   552  0003                     	;# 
   553  0004                     	;# 
   554  0005                     	;# 
   555  0006                     	;# 
   556  0007                     	;# 
   557  0009                     	;# 
   558  000A                     	;# 
   559  000B                     	;# 
   560  000C                     	;# 
   561  000D                     	;# 
   562  000E                     	;# 
   563  000E                     	;# 
   564  000F                     	;# 
   565  0010                     	;# 
   566  0011                     	;# 
   567  0012                     	;# 
   568  0013                     	;# 
   569  0014                     	;# 
   570  0015                     	;# 
   571  0015                     	;# 
   572  0016                     	;# 
   573  0017                     	;# 
   574  0018                     	;# 
   575  0019                     	;# 
   576  001A                     	;# 
   577  001B                     	;# 
   578  001B                     	;# 
   579  001C                     	;# 
   580  001D                     	;# 
   581  001E                     	;# 
   582  001F                     	;# 
   583  0081                     	;# 
   584  0085                     	;# 
   585  0086                     	;# 
   586  0087                     	;# 
   587  0089                     	;# 
   588  008C                     	;# 
   589  008D                     	;# 
   590  008E                     	;# 
   591  008F                     	;# 
   592  0090                     	;# 
   593  0091                     	;# 
   594  0092                     	;# 
   595  0093                     	;# 
   596  0093                     	;# 
   597  0093                     	;# 
   598  0094                     	;# 
   599  0095                     	;# 
   600  0096                     	;# 
   601  0097                     	;# 
   602  0098                     	;# 
   603  0099                     	;# 
   604  009A                     	;# 
   605  009B                     	;# 
   606  009C                     	;# 
   607  009D                     	;# 
   608  009E                     	;# 
   609  009F                     	;# 
   610  0105                     	;# 
   611  0107                     	;# 
   612  0108                     	;# 
   613  0109                     	;# 
   614  010C                     	;# 
   615  010C                     	;# 
   616  010D                     	;# 
   617  010E                     	;# 
   618  010F                     	;# 
   619  0185                     	;# 
   620  0187                     	;# 
   621  0188                     	;# 
   622  0189                     	;# 
   623  018C                     	;# 
   624  018D                     	;# 
   625                           
   626                           	psect	idataBANK0
   627  08A8                     __pidataBANK0:	
   628                           
   629                           ;initializer for _outputs
   630  08A8  34DD               	retlw	low (_output_P1| 0)
   631  08A9  34D6               	retlw	low (_output_P2| 0)
   632  08AA  34CF               	retlw	low (_output_P3| 0)
   633  08AB  34C8               	retlw	low (_output_P4| 0)
   634                           
   635                           	psect	idataBANK1
   636  08A4                     __pidataBANK1:	
   637                           
   638                           ;initializer for _pulsanti
   639  08A4  34D0               	retlw	low (_P1_ROSSO| (0+256))
   640  08A5  34BD               	retlw	low (_P2_BLU| (0+256))
   641  08A6  34AA               	retlw	low (_P3_BLU| (0+256))
   642  08A7  3497               	retlw	low (_P4_GIALLO| (0+256))
   643  0007                     _PORTCbits	set	7
   644  0006                     _PORTBbits	set	6
   645  001E                     _ADRESH	set	30
   646  001F                     _ADCON0bits	set	31
   647  0005                     _PORTAbits	set	5
   648  000C                     _PIR1bits	set	12
   649  000B                     _INTCONbits	set	11
   650  0001                     _TMR0	set	1
   651  0007                     _PORTC	set	7
   652  0005                     _PORTA	set	5
   653  0006                     _PORTB	set	6
   654  005F                     _GIE	set	95
   655  0018                     _CARRY	set	24
   656  0087                     _TRISCbits	set	135
   657  008C                     _PIE1bits	set	140
   658  0085                     _TRISAbits	set	133
   659  0086                     _TRISBbits	set	134
   660  0095                     _WPUBbits	set	149
   661  0081                     _OPTION_REGbits	set	129
   662  008F                     _OSCCONbits	set	143
   663  010C                     _EEDATA	set	268
   664  010D                     _EEADR	set	269
   665  018D                     _EECON2	set	397
   666  018C                     _EECON1	set	396
   667  0188                     _ANSELbits	set	392
   668  0189                     _ANSELH	set	393
   669  0188                     _ANSEL	set	392
   670  0C62                     _WREN	set	3170
   671  0C60                     _RD	set	3168
   672  0C61                     _WR	set	3169
   673                           
   674                           ; #config settings
   675  0000                     
   676                           	psect	cinit
   677  0015                     start_initialization:	
   678  0015                     __initialization:	
   679                           
   680                           ; Initialize objects allocated to BANK1
   681  0015  1683               	bsf	3,5	;RP0=1, select bank1
   682  0016  1303               	bcf	3,6	;RP1=0, select bank1
   683  0017  120A  158A  20A4  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   684  001C  00E4               	movwf	__pdataBANK1& (0+127)
   685  001D  120A  158A  20A5  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   686  0022  00E5               	movwf	(__pdataBANK1+1)& (0+127)
   687  0023  120A  158A  20A6  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   688  0028  00E6               	movwf	(__pdataBANK1+2)& (0+127)
   689  0029  120A  158A  20A7  120A  118A  	fcall	__pidataBANK1+3	;fetch initializer
   690  002E  00E7               	movwf	(__pdataBANK1+3)& (0+127)
   691                           
   692                           ; Initialize objects allocated to BANK0
   693  002F  1283               	bcf	3,5	;RP0=0, select bank0
   694  0030  1303               	bcf	3,6	;RP1=0, select bank0
   695  0031  120A  158A  20A8  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   696  0036  00D2               	movwf	__pdataBANK0& (0+127)
   697  0037  120A  158A  20A9  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   698  003C  00D3               	movwf	(__pdataBANK0+1)& (0+127)
   699  003D  120A  158A  20AA  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   700  0042  00D4               	movwf	(__pdataBANK0+2)& (0+127)
   701  0043  120A  158A  20AB  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   702  0048  00D5               	movwf	(__pdataBANK0+3)& (0+127)
   703                           
   704                           ; Clear objects allocated to BANK3
   705  0049  1783               	bsf	3,7	;select IRP bank2
   706  004A  3090               	movlw	low __pbssBANK3
   707  004B  0084               	movwf	4
   708  004C  30E3               	movlw	low (__pbssBANK3+83)
   709  004D  120A  158A  20C9  120A  118A  	fcall	clear_ram0
   710                           
   711                           ; Clear objects allocated to BANK1
   712  0052  1383               	bcf	3,7	;select IRP bank0
   713  0053  30A0               	movlw	low __pbssBANK1
   714  0054  0084               	movwf	4
   715  0055  30E4               	movlw	low (__pbssBANK1+68)
   716  0056  120A  158A  20C9   	fcall	clear_ram0
   717                           
   718                           ; Clear objects allocated to BANK0
   719  0059  01D6               	clrf	__pbssBANK0& (0+127)
   720  005A  01D7               	clrf	(__pbssBANK0+1)& (0+127)
   721  005B  01D8               	clrf	(__pbssBANK0+2)& (0+127)
   722                           
   723                           ; Clear objects allocated to COMMON
   724  005C  01F6               	clrf	__pbssCOMMON& (0+127)
   725  005D  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   726  005E  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   727  005F  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   728  0060                     end_of_initialization:	
   729                           ;End of C runtime variable initialization code
   730                           
   731  0060                     __end_of__initialization:	
   732  0060  0183               	clrf	3
   733  0061  120A  118A  2864   	ljmp	_main	;jump to C main() function
   734                           
   735                           	psect	bssCOMMON
   736  0076                     __pbssCOMMON:	
   737  0076                     _timer0_millis:	
   738  0076                     	ds	4
   739                           
   740                           	psect	bssBANK0
   741  0056                     __pbssBANK0:	
   742  0056                     _conv16to8:	
   743  0056                     	ds	2
   744  0058                     _eepvar:	
   745  0058                     	ds	1
   746                           
   747                           	psect	dataBANK0
   748  0052                     __pdataBANK0:	
   749  0052                     _outputs:	
   750  0052                     	ds	4
   751                           
   752                           	psect	bssBANK1
   753  00A0                     __pbssBANK1:	
   754  00A0                     _app:	
   755  00A0                     	ds	24
   756  00B8                     _soft_pwm:	
   757  00B8                     	ds	16
   758  00C8                     _output_P4:	
   759  00C8                     	ds	7
   760  00CF                     _output_P3:	
   761  00CF                     	ds	7
   762  00D6                     _output_P2:	
   763  00D6                     	ds	7
   764  00DD                     _output_P1:	
   765  00DD                     	ds	7
   766                           
   767                           	psect	dataBANK1
   768  00E4                     __pdataBANK1:	
   769  00E4                     _pulsanti:	
   770  00E4                     	ds	4
   771                           
   772                           	psect	bssBANK3
   773  0190                     __pbssBANK3:	
   774  0190                     _POWER_ONLED:	
   775  0190                     	ds	7
   776  0197                     _P4_GIALLO:	
   777  0197                     	ds	19
   778  01AA                     _P3_BLU:	
   779  01AA                     	ds	19
   780  01BD                     _P2_BLU:	
   781  01BD                     	ds	19
   782  01D0                     _P1_ROSSO:	
   783  01D0                     	ds	19
   784                           
   785                           	psect	clrtext
   786  08C9                     clear_ram0:	
   787                           ;	Called with FSR containing the base address, and
   788                           ;	W with the last address+1
   789                           
   790  08C9  0064               	clrwdt	;clear the watchdog before getting into this loop
   791  08CA                     clrloop0:	
   792  08CA  0180               	clrf	0	;clear RAM location pointed to by FSR
   793  08CB  0A84               	incf	4,f	;increment pointer
   794  08CC  0604               	xorwf	4,w	;XOR with final address
   795  08CD  1903               	btfsc	3,2	;have we reached the end yet?
   796  08CE  3400               	retlw	0	;all done for this memory range, return
   797  08CF  0604               	xorwf	4,w	;XOR again to restore value
   798  08D0  28CA               	goto	clrloop0	;do the next byte
   799                           
   800                           	psect	cstackCOMMON
   801  0070                     __pcstackCOMMON:	
   802  0070                     ?_switch_init:	
   803  0070                     ?_buzzer_init:	
   804                           ; 1 bytes @ 0x0
   805                           
   806  0070                     ?_out_init:	
   807                           ; 1 bytes @ 0x0
   808                           
   809  0070                     ?_read_modalita_SW4:	
   810                           ; 1 bytes @ 0x0
   811                           
   812  0070                     ?_ADC_notte_init:	
   813                           ; 1 bytes @ 0x0
   814                           
   815  0070                     ?_ON_LED:	
   816                           ; 1 bytes @ 0x0
   817                           
   818  0070                     ?_buzzer_Start:	
   819                           ; 1 bytes @ 0x0
   820                           
   821  0070                     ?_save_modalita_SW4:	
   822                           ; 1 bytes @ 0x0
   823                           
   824  0070                     ?_buzzer_Stop:	
   825                           ; 1 bytes @ 0x0
   826                           
   827  0070                     ?_ADC_IS_DONE:	
   828                           ; 1 bytes @ 0x0
   829                           
   830  0070                     ?_ADC_VALUE:	
   831                           ; 1 bytes @ 0x0
   832                           
   833  0070                     ?_ADC_START:	
   834                           ; 1 bytes @ 0x0
   835                           
   836  0070                     ?_eeprom_Load:	
   837                           ; 1 bytes @ 0x0
   838                           
   839  0070                     ?_eeprom_Save:	
   840                           ; 1 bytes @ 0x0
   841                           
   842  0070                     ?_eeprom_read:	
   843                           ; 1 bytes @ 0x0
   844                           
   845  0070                     ?_main:	
   846                           ; 1 bytes @ 0x0
   847                           
   848  0070                     ?_isr:	
   849                           ; 1 bytes @ 0x0
   850                           
   851  0070                     ??_isr:	
   852                           ; 1 bytes @ 0x0
   853                           
   854                           
   855                           ; 1 bytes @ 0x0
   856  0070                     	ds	4
   857  0074                     ??_switch_init:	
   858  0074                     ??_buzzer_init:	
   859                           ; 1 bytes @ 0x4
   860                           
   861  0074                     ??_ADC_notte_init:	
   862                           ; 1 bytes @ 0x4
   863                           
   864  0074                     ??_pulsanti_alldebounce_task:	
   865                           ; 1 bytes @ 0x4
   866                           
   867  0074                     ??_buzzer_Start:	
   868                           ; 1 bytes @ 0x4
   869                           
   870  0074                     ??_millis:	
   871                           ; 1 bytes @ 0x4
   872                           
   873  0074                     ??_buzzer_Stop:	
   874                           ; 1 bytes @ 0x4
   875                           
   876  0074                     ??_ADC_IS_DONE:	
   877                           ; 1 bytes @ 0x4
   878                           
   879  0074                     ??_ADC_VALUE:	
   880                           ; 1 bytes @ 0x4
   881                           
   882  0074                     ??_ADC_START:	
   883                           ; 1 bytes @ 0x4
   884                           
   885  0074                     ??_eeprom_read:	
   886                           ; 1 bytes @ 0x4
   887                           
   888  0074                     ?_eeprom_write:	
   889                           ; 1 bytes @ 0x4
   890                           
   891  0074                     ??___awdiv:	
   892                           ; 1 bytes @ 0x4
   893                           
   894  0074                     ??___lwdiv:	
   895                           ; 1 bytes @ 0x4
   896                           
   897  0074                     ??___lwtoft:	
   898                           ; 1 bytes @ 0x4
   899                           
   900  0074                     out_toggle@pinmask:	
   901                           ; 1 bytes @ 0x4
   902                           
   903  0074                     out_SW1_SW2__ON@pinmask:	
   904                           ; 1 bytes @ 0x4
   905                           
   906  0074                     out_mod1_SW4__ON@pinmask:	
   907                           ; 1 bytes @ 0x4
   908                           
   909  0074                     out_mod1_SW4__OFF@pinmask:	
   910                           ; 1 bytes @ 0x4
   911                           
   912  0074                     softPWM_task@pinmask:	
   913                           ; 1 bytes @ 0x4
   914                           
   915  0074                     eeprom_write@value:	
   916                           ; 1 bytes @ 0x4
   917                           
   918                           
   919                           ; 1 bytes @ 0x4
   920  0074                     	ds	1
   921  0075                     ??_eeprom_write:	
   922  0075                     ADC_VALUE@adcva:	
   923                           ; 1 bytes @ 0x5
   924                           
   925  0075                     out_toggle@p:	
   926                           ; 1 bytes @ 0x5
   927                           
   928  0075                     out_SW1_SW2__ON@o1:	
   929                           ; 1 bytes @ 0x5
   930                           
   931  0075                     out_mod1_SW4__ON@v:	
   932                           ; 1 bytes @ 0x5
   933                           
   934  0075                     out_mod1_SW4__OFF@v:	
   935                           ; 1 bytes @ 0x5
   936                           
   937  0075                     softPWM_task@spwm:	
   938                           ; 1 bytes @ 0x5
   939                           
   940  0075                     eeprom_read@addr:	
   941                           ; 1 bytes @ 0x5
   942                           
   943  0075                     ___awtoft@sign:	
   944                           ; 1 bytes @ 0x5
   945                           
   946                           
   947                           ; 1 bytes @ 0x5
   948  0075                     	ds	1
   949  0076                     ??_read_modalita_SW4:	
   950  0076                     ?_out_mod1_SW4__ON:	
   951                           ; 1 bytes @ 0x6
   952                           
   953  0076                     ?_out_toggle:	
   954                           ; 1 bytes @ 0x6
   955                           
   956  0076                     ??_save_modalita_SW4:	
   957                           ; 1 bytes @ 0x6
   958                           
   959  0076                     ?_out_mod1_SW4__OFF:	
   960                           ; 1 bytes @ 0x6
   961                           
   962  0076                     ?_softPWM_task:	
   963                           ; 1 bytes @ 0x6
   964                           
   965  0076                     ?_pulsante_debounce:	
   966                           ; 1 bytes @ 0x6
   967                           
   968  0076                     ??_softPWM_init:	
   969                           ; 1 bytes @ 0x6
   970                           
   971  0076                     ?_pulsante_INIT_debounce:	
   972                           ; 1 bytes @ 0x6
   973                           
   974                           
   975                           	psect	cstackBANK0
   976  0020                     __pcstackBANK0:	
   977                           ; 1 bytes @ 0x6
   978                           
   979  0020                     ?_out_SW1_SW2__ON:	
   980  0020                     ??_out_toggle:	
   981                           ; 1 bytes @ 0x0
   982                           
   983  0020                     ??_out_mod1_SW4__OFF:	
   984                           ; 1 bytes @ 0x0
   985                           
   986  0020                     ??_eeprom_Load:	
   987                           ; 1 bytes @ 0x0
   988                           
   989  0020                     ??_pulsante_INIT_debounce:	
   990                           ; 1 bytes @ 0x0
   991                           
   992  0020                     ?___awdiv:	
   993                           ; 1 bytes @ 0x0
   994                           
   995  0020                     ?___lwdiv:	
   996                           ; 2 bytes @ 0x0
   997                           
   998  0020                     ?___ftpack:	
   999                           ; 2 bytes @ 0x0
  1000                           
  1001  0020                     ?_millis:	
  1002                           ; 3 bytes @ 0x0
  1003                           
  1004  0020                     ?___fttol:	
  1005                           ; 4 bytes @ 0x0
  1006                           
  1007  0020                     out_SW1_SW2__ON@o2:	
  1008                           ; 4 bytes @ 0x0
  1009                           
  1010  0020                     eeprom_write@addr:	
  1011                           ; 1 bytes @ 0x0
  1012                           
  1013  0020                     ___awdiv@divisor:	
  1014                           ; 1 bytes @ 0x0
  1015                           
  1016  0020                     ___lwdiv@divisor:	
  1017                           ; 2 bytes @ 0x0
  1018                           
  1019  0020                     ___ftpack@arg:	
  1020                           ; 2 bytes @ 0x0
  1021                           
  1022  0020                     ___fttol@f1:	
  1023                           ; 3 bytes @ 0x0
  1024                           
  1025                           
  1026                           ; 3 bytes @ 0x0
  1027  0020                     	ds	1
  1028  0021                     ??_out_SW1_SW2__ON:	
  1029  0021                     ??_eeprom_Save:	
  1030                           ; 1 bytes @ 0x1
  1031                           
  1032  0021                     eeprom_Load@checksum:	
  1033                           ; 1 bytes @ 0x1
  1034                           
  1035                           
  1036                           ; 2 bytes @ 0x1
  1037  0021                     	ds	1
  1038  0022                     eeprom_Save@checksum:	
  1039  0022                     ___awdiv@dividend:	
  1040                           ; 2 bytes @ 0x2
  1041                           
  1042  0022                     ___lwdiv@dividend:	
  1043                           ; 2 bytes @ 0x2
  1044                           
  1045                           
  1046                           ; 2 bytes @ 0x2
  1047  0022                     	ds	1
  1048  0023                     pulsante_INIT_debounce@pinmask:	
  1049  0023                     eeprom_Load@data:	
  1050                           ; 1 bytes @ 0x3
  1051                           
  1052  0023                     ___ftpack@exp:	
  1053                           ; 1 bytes @ 0x3
  1054                           
  1055                           
  1056                           ; 1 bytes @ 0x3
  1057  0023                     	ds	1
  1058  0024                     ??___fttol:	
  1059  0024                     pulsante_INIT_debounce@value:	
  1060                           ; 1 bytes @ 0x4
  1061                           
  1062  0024                     eeprom_Save@data:	
  1063                           ; 1 bytes @ 0x4
  1064                           
  1065  0024                     ___awdiv@counter:	
  1066                           ; 1 bytes @ 0x4
  1067                           
  1068  0024                     ___ftpack@sign:	
  1069                           ; 1 bytes @ 0x4
  1070                           
  1071  0024                     ___lwdiv@counter:	
  1072                           ; 1 bytes @ 0x4
  1073                           
  1074  0024                     eeprom_Load@i:	
  1075                           ; 1 bytes @ 0x4
  1076                           
  1077  0024                     millis@m:	
  1078                           ; 2 bytes @ 0x4
  1079                           
  1080                           
  1081                           ; 4 bytes @ 0x4
  1082  0024                     	ds	1
  1083  0025                     ??___ftpack:	
  1084  0025                     pulsante_INIT_debounce@p:	
  1085                           ; 1 bytes @ 0x5
  1086                           
  1087  0025                     ___awdiv@sign:	
  1088                           ; 1 bytes @ 0x5
  1089                           
  1090  0025                     eeprom_Save@i:	
  1091                           ; 1 bytes @ 0x5
  1092                           
  1093  0025                     ___lwdiv@quotient:	
  1094                           ; 2 bytes @ 0x5
  1095                           
  1096                           
  1097                           ; 2 bytes @ 0x5
  1098  0025                     	ds	1
  1099  0026                     ___awdiv@quotient:	
  1100                           
  1101                           ; 2 bytes @ 0x6
  1102  0026                     	ds	1
  1103  0027                     save_modalita_SW4@modalita:	
  1104                           
  1105                           ; 1 bytes @ 0x7
  1106  0027                     	ds	1
  1107  0028                     ??_out_mod1_SW4__ON:	
  1108  0028                     ??_softPWM_task:	
  1109                           ; 1 bytes @ 0x8
  1110                           
  1111  0028                     ??_pulsante_debounce:	
  1112                           ; 1 bytes @ 0x8
  1113                           
  1114  0028                     ?___awtoft:	
  1115                           ; 1 bytes @ 0x8
  1116                           
  1117  0028                     ?___lwtoft:	
  1118                           ; 3 bytes @ 0x8
  1119                           
  1120  0028                     ___fttol@sign1:	
  1121                           ; 3 bytes @ 0x8
  1122                           
  1123  0028                     ___awtoft@c:	
  1124                           ; 1 bytes @ 0x8
  1125                           
  1126  0028                     ___lwtoft@c:	
  1127                           ; 2 bytes @ 0x8
  1128                           
  1129                           
  1130                           ; 2 bytes @ 0x8
  1131  0028                     	ds	1
  1132  0029                     ___fttol@lval:	
  1133                           
  1134                           ; 4 bytes @ 0x9
  1135  0029                     	ds	2
  1136  002B                     ??___awtoft:	
  1137  002B                     ?___ftmul:	
  1138                           ; 1 bytes @ 0xB
  1139                           
  1140  002B                     ___ftmul@f1:	
  1141                           ; 3 bytes @ 0xB
  1142                           
  1143                           
  1144                           ; 3 bytes @ 0xB
  1145  002B                     	ds	1
  1146  002C                     pulsante_debounce@pinmask:	
  1147                           
  1148                           ; 1 bytes @ 0xC
  1149  002C                     	ds	1
  1150  002D                     pulsante_debounce@value:	
  1151  002D                     ___fttol@exp1:	
  1152                           ; 1 bytes @ 0xD
  1153                           
  1154                           
  1155                           ; 1 bytes @ 0xD
  1156  002D                     	ds	1
  1157  002E                     pulsante_debounce@p:	
  1158  002E                     ___ftmul@f2:	
  1159                           ; 1 bytes @ 0xE
  1160                           
  1161                           
  1162                           ; 3 bytes @ 0xE
  1163  002E                     	ds	1
  1164  002F                     ?_pulsanti_alldebounce_task:	
  1165  002F                     pulsanti_alldebounce_task@size:	
  1166                           ; 1 bytes @ 0xF
  1167                           
  1168                           
  1169                           ; 1 bytes @ 0xF
  1170  002F                     	ds	1
  1171  0030                     pulsanti_alldebounce_task@switchs:	
  1172                           
  1173                           ; 1 bytes @ 0x10
  1174  0030                     	ds	1
  1175  0031                     ??___ftmul:	
  1176  0031                     pulsanti_alldebounce_task@i:	
  1177                           ; 1 bytes @ 0x11
  1178                           
  1179                           
  1180                           ; 1 bytes @ 0x11
  1181  0031                     	ds	4
  1182  0035                     ___ftmul@exp:	
  1183                           
  1184                           ; 1 bytes @ 0x15
  1185  0035                     	ds	1
  1186  0036                     ___ftmul@f3_as_product:	
  1187                           
  1188                           ; 3 bytes @ 0x16
  1189  0036                     	ds	3
  1190  0039                     ___ftmul@cntr:	
  1191                           
  1192                           ; 1 bytes @ 0x19
  1193  0039                     	ds	1
  1194  003A                     ___ftmul@sign:	
  1195                           
  1196                           ; 1 bytes @ 0x1A
  1197  003A                     	ds	1
  1198  003B                     ?_softPWM_Set:	
  1199  003B                     softPWM_Set@perc:	
  1200                           ; 1 bytes @ 0x1B
  1201                           
  1202                           
  1203                           ; 1 bytes @ 0x1B
  1204  003B                     	ds	1
  1205  003C                     ??_softPWM_Set:	
  1206                           
  1207                           ; 1 bytes @ 0x1C
  1208  003C                     	ds	6
  1209  0042                     softPWM_Set@p:	
  1210                           
  1211                           ; 3 bytes @ 0x22
  1212  0042                     	ds	3
  1213  0045                     softPWM_Set@t:	
  1214                           
  1215                           ; 3 bytes @ 0x25
  1216  0045                     	ds	3
  1217  0048                     softPWM_Set@spwm:	
  1218                           
  1219                           ; 1 bytes @ 0x28
  1220  0048                     	ds	1
  1221  0049                     ??_ON_LED:	
  1222  0049                     ?_softPWM_init:	
  1223                           ; 1 bytes @ 0x29
  1224                           
  1225  0049                     softPWM_init@freq:	
  1226                           ; 1 bytes @ 0x29
  1227                           
  1228                           
  1229                           ; 2 bytes @ 0x29
  1230  0049                     	ds	1
  1231  004A                     ON_LED@state:	
  1232                           
  1233                           ; 1 bytes @ 0x2A
  1234  004A                     	ds	1
  1235  004B                     softPWM_init@spwm:	
  1236                           
  1237                           ; 1 bytes @ 0x2B
  1238  004B                     	ds	1
  1239  004C                     ??_out_init:	
  1240                           
  1241                           ; 1 bytes @ 0x2C
  1242  004C                     	ds	1
  1243  004D                     ??_main:	
  1244                           
  1245                           ; 1 bytes @ 0x2D
  1246  004D                     	ds	4
  1247  0051                     main@i:	
  1248                           
  1249                           ; 1 bytes @ 0x31
  1250  0051                     	ds	1
  1251                           
  1252                           	psect	maintext
  1253  0064                     __pmaintext:	
  1254 ;;
  1255 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1256 ;;
  1257 ;; *************** function _main *****************
  1258 ;; Defined at:
  1259 ;;		line 61 in file "main.c"
  1260 ;; Parameters:    Size  Location     Type
  1261 ;;		None
  1262 ;; Auto vars:     Size  Location     Type
  1263 ;;  i               1   49[BANK0 ] unsigned char 
  1264 ;;  temp            1    0        unsigned char 
  1265 ;; Return value:  Size  Location     Type
  1266 ;;                  1    wreg      void 
  1267 ;; Registers used:
  1268 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1269 ;; Tracked objects:
  1270 ;;		On entry : B00/0
  1271 ;;		On exit  : 0/0
  1272 ;;		Unchanged: 0/0
  1273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1274 ;;      Params:         0       0       0       0       0
  1275 ;;      Locals:         0       1       0       0       0
  1276 ;;      Temps:          0       4       0       0       0
  1277 ;;      Totals:         0       5       0       0       0
  1278 ;;Total ram usage:        5 bytes
  1279 ;; Hardware stack levels required when called:    6
  1280 ;; This function calls:
  1281 ;;		_ADC_IS_DONE
  1282 ;;		_ADC_START
  1283 ;;		_ADC_VALUE
  1284 ;;		_ADC_notte_init
  1285 ;;		_ON_LED
  1286 ;;		_buzzer_Start
  1287 ;;		_buzzer_Stop
  1288 ;;		_buzzer_init
  1289 ;;		_millis
  1290 ;;		_out_SW1_SW2__ON
  1291 ;;		_out_init
  1292 ;;		_out_mod1_SW4__OFF
  1293 ;;		_out_mod1_SW4__ON
  1294 ;;		_out_toggle
  1295 ;;		_pulsanti_alldebounce_task
  1296 ;;		_read_modalita_SW4
  1297 ;;		_save_modalita_SW4
  1298 ;;		_softPWM_Set
  1299 ;;		_softPWM_task
  1300 ;;		_switch_init
  1301 ;; This function is called by:
  1302 ;;		Startup code after reset
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306                           
  1307                           ;psect for function _main
  1308  0064                     _main:	
  1309                           
  1310                           ;main.c: 62: uint8_t i, temp;
  1311                           ;main.c: 65: OSCCONbits.IRCF = 7;
  1312                           
  1313                           ;incstack = 0
  1314                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1315  0064  3070               	movlw	112
  1316  0065  1683               	bsf	3,5	;RP0=1, select bank1
  1317  0066  1303               	bcf	3,6	;RP1=0, select bank1
  1318  0067  048F               	iorwf	15,f	;volatile
  1319                           
  1320                           ;main.c: 68: OPTION_REGbits.T0CS = 0;
  1321  0068  1281               	bcf	1,5	;volatile
  1322                           
  1323                           ;main.c: 69: OPTION_REGbits.PSA = 0;
  1324  0069  1181               	bcf	1,3	;volatile
  1325                           
  1326                           ;main.c: 70: OPTION_REGbits.PS = 2;
  1327  006A  0801               	movf	1,w	;volatile
  1328  006B  39F8               	andlw	-8
  1329  006C  3802               	iorlw	2
  1330  006D  0081               	movwf	1	;volatile
  1331                           
  1332                           ;main.c: 71: TMR0 = 0;
  1333  006E  1283               	bcf	3,5	;RP0=0, select bank0
  1334  006F  1303               	bcf	3,6	;RP1=0, select bank0
  1335  0070  0181               	clrf	1	;volatile
  1336                           
  1337                           ;main.c: 73: INTCONbits.GIE = 1;
  1338  0071  178B               	bsf	11,7	;volatile
  1339                           
  1340                           ;main.c: 74: INTCONbits.PEIE = 1;
  1341  0072  170B               	bsf	11,6	;volatile
  1342                           
  1343                           ;main.c: 75: INTCONbits.T0IE = 1;
  1344  0073  168B               	bsf	11,5	;volatile
  1345                           
  1346                           ;main.c: 76: INTCONbits.T0IF = 0;
  1347  0074  110B               	bcf	11,2	;volatile
  1348                           
  1349                           ;main.c: 78: ANSEL = 0x00;
  1350  0075  1683               	bsf	3,5	;RP0=1, select bank3
  1351  0076  1703               	bsf	3,6	;RP1=1, select bank3
  1352  0077  0188               	clrf	8	;volatile
  1353                           
  1354                           ;main.c: 79: ANSELH = 0x00;
  1355  0078  0189               	clrf	9	;volatile
  1356                           
  1357                           ;main.c: 80: ANSELbits.ANS1 = 1;
  1358  0079  1488               	bsf	8,1	;volatile
  1359                           
  1360                           ;main.c: 83: switch_init();
  1361  007A  120A  158A  23A6  120A  118A  	fcall	_switch_init
  1362                           
  1363                           ;main.c: 84: buzzer_init();
  1364  007F  120A  158A  20BA  120A  118A  	fcall	_buzzer_init
  1365                           
  1366                           ;main.c: 85: out_init();
  1367  0084  120A  158A  2688  120A  118A  	fcall	_out_init
  1368                           
  1369                           ;main.c: 86: read_modalita_SW4();
  1370  0089  120A  118A  27F4  120A  118A  	fcall	_read_modalita_SW4
  1371                           
  1372                           ;main.c: 87: ADC_notte_init();
  1373  008E  120A  158A  20F9  120A  118A  	fcall	_ADC_notte_init
  1374                           
  1375                           ;main.c: 89: __nop();
  1376  0093  0000               	nop
  1377  0094                     l2965:	
  1378                           ;main.c: 91: while(1){
  1379                           
  1380                           
  1381                           ;main.c: 92: pulsanti_alldebounce_task(&pulsanti, 4);
  1382  0094  3004               	movlw	4
  1383  0095  1283               	bcf	3,5	;RP0=0, select bank0
  1384  0096  1303               	bcf	3,6	;RP1=0, select bank0
  1385  0097  00CD               	movwf	??_main
  1386  0098  084D               	movf	??_main,w
  1387  0099  00AF               	movwf	pulsanti_alldebounce_task@size
  1388  009A  30E4               	movlw	(low (_pulsanti| 0))& (0+255)
  1389  009B  120A  158A  2128  120A  118A  	fcall	_pulsanti_alldebounce_task
  1390                           
  1391                           ;main.c: 93: __nop();
  1392  00A0  0000               	nop
  1393                           
  1394                           ;main.c: 95: for(i=0;i<4;i++){
  1395  00A1  1283               	bcf	3,5	;RP0=0, select bank0
  1396  00A2  1303               	bcf	3,6	;RP1=0, select bank0
  1397  00A3  01D1               	clrf	main@i
  1398  00A4  3004               	movlw	4
  1399  00A5  0251               	subwf	main@i,w
  1400  00A6  1803               	btfsc	3,0
  1401  00A7  2916               	goto	l89
  1402  00A8                     l2975:	
  1403                           
  1404                           ;main.c: 96: if(pulsanti[i]->changeState){
  1405  00A8  0851               	movf	main@i,w
  1406  00A9  3EE4               	addlw	(low (_pulsanti| 0))& (0+255)
  1407  00AA  0084               	movwf	4
  1408  00AB  1383               	bcf	3,7	;select IRP bank1
  1409  00AC  0800               	movf	0,w
  1410  00AD  3E09               	addlw	9
  1411  00AE  0084               	movwf	4
  1412  00AF  1783               	bsf	3,7	;select IRP bank2
  1413  00B0  0800               	movf	0,w
  1414  00B1  1903               	btfsc	3,2
  1415  00B2  290E               	goto	l90
  1416                           
  1417                           ;main.c: 97: if(pulsanti[i]->State == 0){
  1418  00B3  0851               	movf	main@i,w
  1419  00B4  3EE4               	addlw	(low (_pulsanti| 0))& (0+255)
  1420  00B5  0084               	movwf	4
  1421  00B6  1383               	bcf	3,7	;select IRP bank1
  1422  00B7  0800               	movf	0,w
  1423  00B8  3E0A               	addlw	10
  1424  00B9  0084               	movwf	4
  1425  00BA  1783               	bsf	3,7	;select IRP bank2
  1426  00BB  0800               	movf	0,w
  1427  00BC  1D03               	btfss	3,2
  1428  00BD  2903               	goto	l2997
  1429                           
  1430                           ;main.c: 99: ON_LED(1);
  1431  00BE  3001               	movlw	1
  1432  00BF  120A  158A  2231  120A  118A  	fcall	_ON_LED
  1433                           
  1434                           ;main.c: 100: if((i==0)&&(outputs[i]->state == 0)){
  1435  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  1436  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  1437  00C6  0851               	movf	main@i,w
  1438  00C7  1D03               	btfss	3,2
  1439  00C8  28DE               	goto	l2987
  1440  00C9  0851               	movf	main@i,w
  1441  00CA  3E52               	addlw	(low (_outputs| 0))& (0+255)
  1442  00CB  0084               	movwf	4
  1443  00CC  1383               	bcf	3,7	;select IRP bank0
  1444  00CD  0800               	movf	0,w
  1445  00CE  3E06               	addlw	6
  1446  00CF  0084               	movwf	4
  1447  00D0  0800               	movf	0,w
  1448  00D1  1D03               	btfss	3,2
  1449  00D2  28DE               	goto	l2987
  1450                           
  1451                           ;main.c: 102: out_SW1_SW2__ON(outputs[0],outputs[1]);
  1452  00D3  0853               	movf	low ((_outputs| 0+1)),w
  1453  00D4  00CD               	movwf	??_main
  1454  00D5  084D               	movf	??_main,w
  1455  00D6  00A0               	movwf	out_SW1_SW2__ON@o2
  1456  00D7  0852               	movf	_outputs,w
  1457  00D8  120A  118A  26B6  120A  118A  	fcall	_out_SW1_SW2__ON
  1458                           
  1459                           ;main.c: 103: }else if((i==3)&&(eepvar.P4_state == 1)){
  1460  00DD  28FE               	goto	l2995
  1461  00DE                     l2987:	
  1462  00DE  3003               	movlw	3
  1463  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  1464  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  1465  00E1  0651               	xorwf	main@i,w
  1466  00E2  1D03               	btfss	3,2
  1467  00E3  28F2               	goto	l2993
  1468  00E4  0358               	decf	_eepvar,w
  1469  00E5  1D03               	btfss	3,2
  1470  00E6  28F2               	goto	l2993
  1471                           
  1472                           ;main.c: 105: out_mod1_SW4__ON(outputs[i]);
  1473  00E7  0851               	movf	main@i,w
  1474  00E8  3E52               	addlw	(low (_outputs| 0))& (0+255)
  1475  00E9  0084               	movwf	4
  1476  00EA  1383               	bcf	3,7	;select IRP bank0
  1477  00EB  0800               	movf	0,w
  1478  00EC  120A  158A  24DD  120A  118A  	fcall	_out_mod1_SW4__ON
  1479                           
  1480                           ;main.c: 106: }else{
  1481  00F1  28FE               	goto	l2995
  1482  00F2                     l2993:	
  1483                           
  1484                           ;main.c: 107: out_toggle(outputs[i]);
  1485  00F2  1283               	bcf	3,5	;RP0=0, select bank0
  1486  00F3  1303               	bcf	3,6	;RP1=0, select bank0
  1487  00F4  0851               	movf	main@i,w
  1488  00F5  3E52               	addlw	(low (_outputs| 0))& (0+255)
  1489  00F6  0084               	movwf	4
  1490  00F7  1383               	bcf	3,7	;select IRP bank0
  1491  00F8  0800               	movf	0,w
  1492  00F9  120A  158A  273A  120A  118A  	fcall	_out_toggle
  1493  00FE                     l2995:	
  1494                           
  1495                           ;main.c: 108: }
  1496                           ;main.c: 109: buzzer_Start();
  1497  00FE  120A  158A  215E  120A  118A  	fcall	_buzzer_Start
  1498  0103                     l2997:	
  1499                           
  1500                           ;main.c: 110: }
  1501                           ;main.c: 111: pulsanti[i]->changeState = 0;
  1502  0103  1283               	bcf	3,5	;RP0=0, select bank0
  1503  0104  1303               	bcf	3,6	;RP1=0, select bank0
  1504  0105  0851               	movf	main@i,w
  1505  0106  3EE4               	addlw	(low (_pulsanti| 0))& (0+255)
  1506  0107  0084               	movwf	4
  1507  0108  1383               	bcf	3,7	;select IRP bank1
  1508  0109  0800               	movf	0,w
  1509  010A  3E09               	addlw	9
  1510  010B  0084               	movwf	4
  1511  010C  1783               	bsf	3,7	;select IRP bank2
  1512  010D  0180               	clrf	0
  1513  010E                     l90:	
  1514  010E  3001               	movlw	1
  1515  010F  00CD               	movwf	??_main
  1516  0110  084D               	movf	??_main,w
  1517  0111  07D1               	addwf	main@i,f
  1518  0112  3004               	movlw	4
  1519  0113  0251               	subwf	main@i,w
  1520  0114  1C03               	skipc
  1521  0115  28A8               	goto	l2975
  1522  0116                     l89:	
  1523                           
  1524                           ;main.c: 112: }
  1525                           ;main.c: 113: }
  1526                           ;main.c: 114: __nop();
  1527  0116  0000               	nop
  1528                           
  1529                           ;main.c: 116: if((P4_GIALLO.State == 0) && ((millis()- P4_GIALLO.time_OFFstate)>=5000) )
      +                          {
  1530  0117  1683               	bsf	3,5	;RP0=1, select bank3
  1531  0118  1703               	bsf	3,6	;RP1=1, select bank3
  1532  0119  0821               	movf	(_P4_GIALLO^(0+384)+10),w
  1533  011A  1D03               	btfss	3,2
  1534  011B  2978               	goto	l3015
  1535  011C  0926               	comf	(_P4_GIALLO^(0+384)+15),w
  1536  011D  1283               	bcf	3,5	;RP0=0, select bank0
  1537  011E  1303               	bcf	3,6	;RP1=0, select bank0
  1538  011F  00CD               	movwf	??_main
  1539  0120  1683               	bsf	3,5	;RP0=1, select bank3
  1540  0121  1703               	bsf	3,6	;RP1=1, select bank3
  1541  0122  0927               	comf	((_P4_GIALLO+1)^(0+384)+15),w
  1542  0123  1283               	bcf	3,5	;RP0=0, select bank0
  1543  0124  1303               	bcf	3,6	;RP1=0, select bank0
  1544  0125  00CE               	movwf	??_main+1
  1545  0126  1683               	bsf	3,5	;RP0=1, select bank3
  1546  0127  1703               	bsf	3,6	;RP1=1, select bank3
  1547  0128  0928               	comf	((_P4_GIALLO+2)^(0+384)+15),w
  1548  0129  1283               	bcf	3,5	;RP0=0, select bank0
  1549  012A  1303               	bcf	3,6	;RP1=0, select bank0
  1550  012B  00CF               	movwf	??_main+2
  1551  012C  1683               	bsf	3,5	;RP0=1, select bank3
  1552  012D  1703               	bsf	3,6	;RP1=1, select bank3
  1553  012E  0929               	comf	((_P4_GIALLO+3)^(0+384)+15),w
  1554  012F  1283               	bcf	3,5	;RP0=0, select bank0
  1555  0130  1303               	bcf	3,6	;RP1=0, select bank0
  1556  0131  00D0               	movwf	??_main+3
  1557  0132  0ACD               	incf	??_main,f
  1558  0133  1903               	skipnz
  1559  0134  0ACE               	incf	??_main+1,f
  1560  0135  1903               	skipnz
  1561  0136  0ACF               	incf	??_main+2,f
  1562  0137  1903               	skipnz
  1563  0138  0AD0               	incf	??_main+3,f
  1564  0139  120A  158A  20E4  120A  118A  	fcall	_millis
  1565  013E  1283               	bcf	3,5	;RP0=0, select bank0
  1566  013F  1303               	bcf	3,6	;RP1=0, select bank0
  1567  0140  0820               	movf	?_millis,w
  1568  0141  07CD               	addwf	??_main,f
  1569  0142  0821               	movf	?_millis+1,w
  1570  0143  1803               	skipnc
  1571  0144  0F21               	incfsz	?_millis+1,w
  1572  0145  2947               	goto	u3850
  1573  0146  2948               	goto	u3851
  1574  0147                     u3850:	
  1575  0147  07CE               	addwf	??_main+1,f
  1576  0148                     u3851:	
  1577  0148  0822               	movf	?_millis+2,w
  1578  0149  1803               	skipnc
  1579  014A  0F22               	incfsz	?_millis+2,w
  1580  014B  294D               	goto	u3852
  1581  014C  294E               	goto	u3853
  1582  014D                     u3852:	
  1583  014D  07CF               	addwf	??_main+2,f
  1584  014E                     u3853:	
  1585  014E  0823               	movf	?_millis+3,w
  1586  014F  1803               	skipnc
  1587  0150  0A23               	incf	?_millis+3,w
  1588  0151  07D0               	addwf	??_main+3,f
  1589  0152  0850               	movf	??_main+3,w
  1590  0153  1D03               	btfss	3,2
  1591  0154  2962               	goto	l3005
  1592  0155  084F               	movf	??_main+2,w
  1593  0156  1D03               	btfss	3,2
  1594  0157  2962               	goto	l3005
  1595  0158  3013               	movlw	19
  1596  0159  024E               	subwf	??_main+1,w
  1597  015A  1D03               	skipz
  1598  015B  2960               	goto	u3863
  1599  015C  3088               	movlw	136
  1600  015D  024D               	subwf	??_main,w
  1601  015E  1D03               	skipz
  1602  015F  2960               	goto	u3863
  1603  0160                     u3863:	
  1604  0160  1C03               	btfss	3,0
  1605  0161  2978               	goto	l3015
  1606  0162                     l3005:	
  1607                           
  1608                           ;main.c: 118: buzzer_Start();
  1609  0162  120A  158A  215E  120A  118A  	fcall	_buzzer_Start
  1610                           
  1611                           ;main.c: 119: if(eepvar.P4_state == 0){
  1612  0167  1283               	bcf	3,5	;RP0=0, select bank0
  1613  0168  1303               	bcf	3,6	;RP1=0, select bank0
  1614  0169  0858               	movf	_eepvar,w
  1615  016A  1D03               	btfss	3,2
  1616  016B  296E               	goto	l3011
  1617                           
  1618                           ;main.c: 120: save_modalita_SW4(1);
  1619  016C  3001               	movlw	1
  1620  016D  296F               	goto	L2
  1621  016E                     l3011:	
  1622                           ;main.c: 121: }else{
  1623                           
  1624                           
  1625                           ;main.c: 122: save_modalita_SW4(0);
  1626  016E  3000               	movlw	0
  1627  016F                     L2:	
  1628  016F  120A  158A  20D1  120A  118A  	fcall	_save_modalita_SW4
  1629                           
  1630                           ;main.c: 123: }
  1631                           ;main.c: 124: P4_GIALLO.State = 1;
  1632  0174  1683               	bsf	3,5	;RP0=1, select bank3
  1633  0175  1703               	bsf	3,6	;RP1=1, select bank3
  1634  0176  01A1               	clrf	(_P4_GIALLO^(0+384)+10)
  1635  0177  0AA1               	incf	(_P4_GIALLO^(0+384)+10),f
  1636  0178                     l3015:	
  1637                           
  1638                           ;main.c: 125: }
  1639                           ;main.c: 126: __nop();
  1640  0178  0000               	nop
  1641                           
  1642                           ;main.c: 128: if(app.buzzer_state){
  1643  0179  1683               	bsf	3,5	;RP0=1, select bank1
  1644  017A  1303               	bcf	3,6	;RP1=0, select bank1
  1645  017B  0820               	movf	_app^(0+128),w
  1646  017C  1903               	btfsc	3,2
  1647  017D  29C8               	goto	l3023
  1648                           
  1649                           ;main.c: 129: if((millis()-app.buzzer_starttime)>=50){
  1650  017E  0921               	comf	(_app^(0+128)+1),w
  1651  017F  1283               	bcf	3,5	;RP0=0, select bank0
  1652  0180  1303               	bcf	3,6	;RP1=0, select bank0
  1653  0181  00CD               	movwf	??_main
  1654  0182  1683               	bsf	3,5	;RP0=1, select bank1
  1655  0183  1303               	bcf	3,6	;RP1=0, select bank1
  1656  0184  0922               	comf	((_app+1)^(0+128)+1),w
  1657  0185  1283               	bcf	3,5	;RP0=0, select bank0
  1658  0186  1303               	bcf	3,6	;RP1=0, select bank0
  1659  0187  00CE               	movwf	??_main+1
  1660  0188  1683               	bsf	3,5	;RP0=1, select bank1
  1661  0189  1303               	bcf	3,6	;RP1=0, select bank1
  1662  018A  0923               	comf	((_app+2)^(0+128)+1),w
  1663  018B  1283               	bcf	3,5	;RP0=0, select bank0
  1664  018C  1303               	bcf	3,6	;RP1=0, select bank0
  1665  018D  00CF               	movwf	??_main+2
  1666  018E  1683               	bsf	3,5	;RP0=1, select bank1
  1667  018F  1303               	bcf	3,6	;RP1=0, select bank1
  1668  0190  0924               	comf	((_app+3)^(0+128)+1),w
  1669  0191  1283               	bcf	3,5	;RP0=0, select bank0
  1670  0192  1303               	bcf	3,6	;RP1=0, select bank0
  1671  0193  00D0               	movwf	??_main+3
  1672  0194  0ACD               	incf	??_main,f
  1673  0195  1903               	skipnz
  1674  0196  0ACE               	incf	??_main+1,f
  1675  0197  1903               	skipnz
  1676  0198  0ACF               	incf	??_main+2,f
  1677  0199  1903               	skipnz
  1678  019A  0AD0               	incf	??_main+3,f
  1679  019B  120A  158A  20E4  120A  118A  	fcall	_millis
  1680  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  1681  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  1682  01A2  0820               	movf	?_millis,w
  1683  01A3  07CD               	addwf	??_main,f
  1684  01A4  0821               	movf	?_millis+1,w
  1685  01A5  1803               	skipnc
  1686  01A6  0F21               	incfsz	?_millis+1,w
  1687  01A7  29A9               	goto	u3890
  1688  01A8  29AA               	goto	u3891
  1689  01A9                     u3890:	
  1690  01A9  07CE               	addwf	??_main+1,f
  1691  01AA                     u3891:	
  1692  01AA  0822               	movf	?_millis+2,w
  1693  01AB  1803               	skipnc
  1694  01AC  0F22               	incfsz	?_millis+2,w
  1695  01AD  29AF               	goto	u3892
  1696  01AE  29B0               	goto	u3893
  1697  01AF                     u3892:	
  1698  01AF  07CF               	addwf	??_main+2,f
  1699  01B0                     u3893:	
  1700  01B0  0823               	movf	?_millis+3,w
  1701  01B1  1803               	skipnc
  1702  01B2  0A23               	incf	?_millis+3,w
  1703  01B3  07D0               	addwf	??_main+3,f
  1704  01B4  0850               	movf	??_main+3,w
  1705  01B5  1D03               	btfss	3,2
  1706  01B6  29C3               	goto	l3021
  1707  01B7  084F               	movf	??_main+2,w
  1708  01B8  1D03               	btfss	3,2
  1709  01B9  29C3               	goto	l3021
  1710  01BA  084E               	movf	??_main+1,w
  1711  01BB  1D03               	btfss	3,2
  1712  01BC  29C3               	goto	l3021
  1713  01BD  3032               	movlw	50
  1714  01BE  024D               	subwf	??_main,w
  1715  01BF  1D03               	skipz
  1716  01C0  29C1               	goto	u3903
  1717  01C1                     u3903:	
  1718  01C1  1C03               	btfss	3,0
  1719  01C2  29C8               	goto	l3023
  1720  01C3                     l3021:	
  1721                           
  1722                           ;main.c: 130: buzzer_Stop();
  1723  01C3  120A  158A  20B3  120A  118A  	fcall	_buzzer_Stop
  1724  01C8                     l3023:	
  1725                           
  1726                           ;main.c: 131: }
  1727                           ;main.c: 132: }
  1728                           ;main.c: 133: __nop();
  1729  01C8  0000               	nop
  1730                           
  1731                           ;main.c: 135: if(app.onLed_state){
  1732  01C9  1683               	bsf	3,5	;RP0=1, select bank1
  1733  01CA  1303               	bcf	3,6	;RP1=0, select bank1
  1734  01CB  0825               	movf	(_app^(0+128)+5),w
  1735  01CC  1903               	btfsc	3,2
  1736  01CD  2A1A               	goto	l3031
  1737                           
  1738                           ;main.c: 136: if((millis()-app.onLed_starttime)>=5000){
  1739  01CE  0926               	comf	(_app^(0+128)+6),w
  1740  01CF  1283               	bcf	3,5	;RP0=0, select bank0
  1741  01D0  1303               	bcf	3,6	;RP1=0, select bank0
  1742  01D1  00CD               	movwf	??_main
  1743  01D2  1683               	bsf	3,5	;RP0=1, select bank1
  1744  01D3  1303               	bcf	3,6	;RP1=0, select bank1
  1745  01D4  0927               	comf	((_app+1)^(0+128)+6),w
  1746  01D5  1283               	bcf	3,5	;RP0=0, select bank0
  1747  01D6  1303               	bcf	3,6	;RP1=0, select bank0
  1748  01D7  00CE               	movwf	??_main+1
  1749  01D8  1683               	bsf	3,5	;RP0=1, select bank1
  1750  01D9  1303               	bcf	3,6	;RP1=0, select bank1
  1751  01DA  0928               	comf	((_app+2)^(0+128)+6),w
  1752  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  1753  01DC  1303               	bcf	3,6	;RP1=0, select bank0
  1754  01DD  00CF               	movwf	??_main+2
  1755  01DE  1683               	bsf	3,5	;RP0=1, select bank1
  1756  01DF  1303               	bcf	3,6	;RP1=0, select bank1
  1757  01E0  0929               	comf	((_app+3)^(0+128)+6),w
  1758  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  1759  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  1760  01E3  00D0               	movwf	??_main+3
  1761  01E4  0ACD               	incf	??_main,f
  1762  01E5  1903               	skipnz
  1763  01E6  0ACE               	incf	??_main+1,f
  1764  01E7  1903               	skipnz
  1765  01E8  0ACF               	incf	??_main+2,f
  1766  01E9  1903               	skipnz
  1767  01EA  0AD0               	incf	??_main+3,f
  1768  01EB  120A  158A  20E4  120A  118A  	fcall	_millis
  1769  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  1770  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  1771  01F2  0820               	movf	?_millis,w
  1772  01F3  07CD               	addwf	??_main,f
  1773  01F4  0821               	movf	?_millis+1,w
  1774  01F5  1803               	skipnc
  1775  01F6  0F21               	incfsz	?_millis+1,w
  1776  01F7  29F9               	goto	u3920
  1777  01F8  29FA               	goto	u3921
  1778  01F9                     u3920:	
  1779  01F9  07CE               	addwf	??_main+1,f
  1780  01FA                     u3921:	
  1781  01FA  0822               	movf	?_millis+2,w
  1782  01FB  1803               	skipnc
  1783  01FC  0F22               	incfsz	?_millis+2,w
  1784  01FD  29FF               	goto	u3922
  1785  01FE  2A00               	goto	u3923
  1786  01FF                     u3922:	
  1787  01FF  07CF               	addwf	??_main+2,f
  1788  0200                     u3923:	
  1789  0200  0823               	movf	?_millis+3,w
  1790  0201  1803               	skipnc
  1791  0202  0A23               	incf	?_millis+3,w
  1792  0203  07D0               	addwf	??_main+3,f
  1793  0204  0850               	movf	??_main+3,w
  1794  0205  1D03               	btfss	3,2
  1795  0206  2A14               	goto	l3029
  1796  0207  084F               	movf	??_main+2,w
  1797  0208  1D03               	btfss	3,2
  1798  0209  2A14               	goto	l3029
  1799  020A  3013               	movlw	19
  1800  020B  024E               	subwf	??_main+1,w
  1801  020C  1D03               	skipz
  1802  020D  2A12               	goto	u3933
  1803  020E  3088               	movlw	136
  1804  020F  024D               	subwf	??_main,w
  1805  0210  1D03               	skipz
  1806  0211  2A12               	goto	u3933
  1807  0212                     u3933:	
  1808  0212  1C03               	btfss	3,0
  1809  0213  2A1A               	goto	l3031
  1810  0214                     l3029:	
  1811                           
  1812                           ;main.c: 137: ON_LED(0);
  1813  0214  3000               	movlw	0
  1814  0215  120A  158A  2231  120A  118A  	fcall	_ON_LED
  1815  021A                     l3031:	
  1816                           
  1817                           ;main.c: 138: }
  1818                           ;main.c: 139: }
  1819                           ;main.c: 140: __nop();
  1820  021A  0000               	nop
  1821                           
  1822                           ;main.c: 142: if((outputs[3]->state)&&(eepvar.P4_state == 1)&&((millis()-app.SW4_mod1_st
      +                          arttime)>=1000)){
  1823  021B  1283               	bcf	3,5	;RP0=0, select bank0
  1824  021C  1303               	bcf	3,6	;RP1=0, select bank0
  1825  021D  0855               	movf	low ((_outputs| 0+3)),w
  1826  021E  3E06               	addlw	6
  1827  021F  0084               	movwf	4
  1828  0220  1383               	bcf	3,7	;select IRP bank0
  1829  0221  0800               	movf	0,w
  1830  0222  1903               	btfsc	3,2
  1831  0223  2A75               	goto	l3041
  1832  0224  0358               	decf	_eepvar,w
  1833  0225  1D03               	btfss	3,2
  1834  0226  2A75               	goto	l3041
  1835  0227  1683               	bsf	3,5	;RP0=1, select bank1
  1836  0228  1303               	bcf	3,6	;RP1=0, select bank1
  1837  0229  092A               	comf	(_app^(0+128)+10),w
  1838  022A  1283               	bcf	3,5	;RP0=0, select bank0
  1839  022B  1303               	bcf	3,6	;RP1=0, select bank0
  1840  022C  00CD               	movwf	??_main
  1841  022D  1683               	bsf	3,5	;RP0=1, select bank1
  1842  022E  1303               	bcf	3,6	;RP1=0, select bank1
  1843  022F  092B               	comf	((_app+1)^(0+128)+10),w
  1844  0230  1283               	bcf	3,5	;RP0=0, select bank0
  1845  0231  1303               	bcf	3,6	;RP1=0, select bank0
  1846  0232  00CE               	movwf	??_main+1
  1847  0233  1683               	bsf	3,5	;RP0=1, select bank1
  1848  0234  1303               	bcf	3,6	;RP1=0, select bank1
  1849  0235  092C               	comf	((_app+2)^(0+128)+10),w
  1850  0236  1283               	bcf	3,5	;RP0=0, select bank0
  1851  0237  1303               	bcf	3,6	;RP1=0, select bank0
  1852  0238  00CF               	movwf	??_main+2
  1853  0239  1683               	bsf	3,5	;RP0=1, select bank1
  1854  023A  1303               	bcf	3,6	;RP1=0, select bank1
  1855  023B  092D               	comf	((_app+3)^(0+128)+10),w
  1856  023C  1283               	bcf	3,5	;RP0=0, select bank0
  1857  023D  1303               	bcf	3,6	;RP1=0, select bank0
  1858  023E  00D0               	movwf	??_main+3
  1859  023F  0ACD               	incf	??_main,f
  1860  0240  1903               	skipnz
  1861  0241  0ACE               	incf	??_main+1,f
  1862  0242  1903               	skipnz
  1863  0243  0ACF               	incf	??_main+2,f
  1864  0244  1903               	skipnz
  1865  0245  0AD0               	incf	??_main+3,f
  1866  0246  120A  158A  20E4  120A  118A  	fcall	_millis
  1867  024B  1283               	bcf	3,5	;RP0=0, select bank0
  1868  024C  1303               	bcf	3,6	;RP1=0, select bank0
  1869  024D  0820               	movf	?_millis,w
  1870  024E  07CD               	addwf	??_main,f
  1871  024F  0821               	movf	?_millis+1,w
  1872  0250  1803               	skipnc
  1873  0251  0F21               	incfsz	?_millis+1,w
  1874  0252  2A54               	goto	u3960
  1875  0253  2A55               	goto	u3961
  1876  0254                     u3960:	
  1877  0254  07CE               	addwf	??_main+1,f
  1878  0255                     u3961:	
  1879  0255  0822               	movf	?_millis+2,w
  1880  0256  1803               	skipnc
  1881  0257  0F22               	incfsz	?_millis+2,w
  1882  0258  2A5A               	goto	u3962
  1883  0259  2A5B               	goto	u3963
  1884  025A                     u3962:	
  1885  025A  07CF               	addwf	??_main+2,f
  1886  025B                     u3963:	
  1887  025B  0823               	movf	?_millis+3,w
  1888  025C  1803               	skipnc
  1889  025D  0A23               	incf	?_millis+3,w
  1890  025E  07D0               	addwf	??_main+3,f
  1891  025F  0850               	movf	??_main+3,w
  1892  0260  1D03               	btfss	3,2
  1893  0261  2A6F               	goto	l3039
  1894  0262  084F               	movf	??_main+2,w
  1895  0263  1D03               	btfss	3,2
  1896  0264  2A6F               	goto	l3039
  1897  0265  3003               	movlw	3
  1898  0266  024E               	subwf	??_main+1,w
  1899  0267  1D03               	skipz
  1900  0268  2A6D               	goto	u3973
  1901  0269  30E8               	movlw	232
  1902  026A  024D               	subwf	??_main,w
  1903  026B  1D03               	skipz
  1904  026C  2A6D               	goto	u3973
  1905  026D                     u3973:	
  1906  026D  1C03               	btfss	3,0
  1907  026E  2A75               	goto	l3041
  1908  026F                     l3039:	
  1909                           
  1910                           ;main.c: 143: out_mod1_SW4__OFF(outputs[3]);
  1911  026F  0855               	movf	low ((_outputs| 0+3)),w
  1912  0270  120A  158A  2404  120A  118A  	fcall	_out_mod1_SW4__OFF
  1913  0275                     l3041:	
  1914                           
  1915                           ;main.c: 144: }
  1916                           ;main.c: 145: __nop();
  1917  0275  0000               	nop
  1918                           
  1919                           ;main.c: 147: if(ADC_IS_DONE()){
  1920  0276  120A  158A  20A0  120A  118A  	fcall	_ADC_IS_DONE
  1921  027B  3A00               	xorlw	0
  1922  027C  1903               	skipnz
  1923  027D  2B3A               	goto	l3081
  1924                           
  1925                           ;main.c: 148: if(ADC_VALUE()<= 35){
  1926  027E  120A  158A  20C1  120A  118A  	fcall	_ADC_VALUE
  1927  0283  1283               	bcf	3,5	;RP0=0, select bank0
  1928  0284  1303               	bcf	3,6	;RP1=0, select bank0
  1929  0285  00CD               	movwf	??_main
  1930  0286  3024               	movlw	36
  1931  0287  024D               	subwf	??_main,w
  1932  0288  1803               	skipnc
  1933  0289  2A8C               	goto	l3049
  1934                           
  1935                           ;main.c: 149: app.tpwm=10;
  1936  028A  300A               	movlw	10
  1937  028B  2A8E               	goto	L1
  1938  028C                     l3049:	
  1939                           ;main.c: 150: }else{
  1940                           
  1941                           
  1942                           ;main.c: 151: app.tpwm=100;
  1943  028C  3064               	movlw	100
  1944  028D  1283               	bcf	3,5	;RP0=0, select bank0
  1945  028E                     L1:	
  1946  028E  00CD               	movwf	??_main
  1947  028F  084D               	movf	??_main,w
  1948  0290  1683               	bsf	3,5	;RP0=1, select bank1
  1949  0291  1303               	bcf	3,6	;RP1=0, select bank1
  1950  0292  00AF               	movwf	(_app^(0+128)+15)
  1951                           
  1952                           ;main.c: 152: }
  1953                           ;main.c: 153: if(app.tpwm != app.pwmlast){
  1954  0293  082F               	movf	(_app^(0+128)+15),w
  1955  0294  0630               	xorwf	(_app^(0+128)+16),w
  1956  0295  1903               	skipnz
  1957  0296  2A99               	goto	l3053
  1958                           
  1959                           ;main.c: 154: app.crepuscolare_changet = 1;
  1960  0297  01B6               	clrf	(_app^(0+128)+22)
  1961  0298  0AB6               	incf	(_app^(0+128)+22),f
  1962  0299                     l3053:	
  1963                           
  1964                           ;main.c: 155: }
  1965                           ;main.c: 156: if(app.crepuscolare_changet){
  1966  0299  0836               	movf	(_app^(0+128)+22),w
  1967  029A  1D03               	btfss	3,2
  1968  029B  2B2B               	goto	l3077
  1969  029C  2B35               	goto	l3079
  1970  029D                     l3057:	
  1971                           ;main.c: 158: case 0:
  1972                           
  1973                           ;main.c: 157: switch(app.pwmstatemachine){
  1974                           
  1975                           
  1976                           ;main.c: 159: app.time_isteresi_crepuscolare = millis();
  1977  029D  120A  158A  20E4  120A  118A  	fcall	_millis
  1978  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  1979  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  1980  02A4  0823               	movf	?_millis+3,w
  1981  02A5  1683               	bsf	3,5	;RP0=1, select bank1
  1982  02A6  1303               	bcf	3,6	;RP1=0, select bank1
  1983  02A7  00B5               	movwf	((_app+3)^(0+128)+18)
  1984  02A8  1283               	bcf	3,5	;RP0=0, select bank0
  1985  02A9  1303               	bcf	3,6	;RP1=0, select bank0
  1986  02AA  0822               	movf	?_millis+2,w
  1987  02AB  1683               	bsf	3,5	;RP0=1, select bank1
  1988  02AC  1303               	bcf	3,6	;RP1=0, select bank1
  1989  02AD  00B4               	movwf	((_app+2)^(0+128)+18)
  1990  02AE  1283               	bcf	3,5	;RP0=0, select bank0
  1991  02AF  1303               	bcf	3,6	;RP1=0, select bank0
  1992  02B0  0821               	movf	?_millis+1,w
  1993  02B1  1683               	bsf	3,5	;RP0=1, select bank1
  1994  02B2  1303               	bcf	3,6	;RP1=0, select bank1
  1995  02B3  00B3               	movwf	((_app+1)^(0+128)+18)
  1996  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  1997  02B5  1303               	bcf	3,6	;RP1=0, select bank0
  1998  02B6  0820               	movf	?_millis,w
  1999  02B7  1683               	bsf	3,5	;RP0=1, select bank1
  2000  02B8  1303               	bcf	3,6	;RP1=0, select bank1
  2001  02B9  00B2               	movwf	(_app^(0+128)+18)
  2002                           
  2003                           ;main.c: 160: app.pwmstatemachine = 1;
  2004  02BA  01B1               	clrf	(_app^(0+128)+17)
  2005  02BB  0AB1               	incf	(_app^(0+128)+17),f
  2006                           
  2007                           ;main.c: 161: break;
  2008  02BC  2B35               	goto	l3079
  2009  02BD                     l3061:	
  2010                           ;main.c: 162: case 1:
  2011                           
  2012                           
  2013                           ;main.c: 163: if((millis()-app.time_isteresi_crepuscolare)>=3000){
  2014  02BD  0932               	comf	(_app^(0+128)+18),w
  2015  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  2016  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  2017  02C0  00CD               	movwf	??_main
  2018  02C1  1683               	bsf	3,5	;RP0=1, select bank1
  2019  02C2  1303               	bcf	3,6	;RP1=0, select bank1
  2020  02C3  0933               	comf	((_app+1)^(0+128)+18),w
  2021  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  2022  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  2023  02C6  00CE               	movwf	??_main+1
  2024  02C7  1683               	bsf	3,5	;RP0=1, select bank1
  2025  02C8  1303               	bcf	3,6	;RP1=0, select bank1
  2026  02C9  0934               	comf	((_app+2)^(0+128)+18),w
  2027  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  2028  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  2029  02CC  00CF               	movwf	??_main+2
  2030  02CD  1683               	bsf	3,5	;RP0=1, select bank1
  2031  02CE  1303               	bcf	3,6	;RP1=0, select bank1
  2032  02CF  0935               	comf	((_app+3)^(0+128)+18),w
  2033  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  2034  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  2035  02D2  00D0               	movwf	??_main+3
  2036  02D3  0ACD               	incf	??_main,f
  2037  02D4  1903               	skipnz
  2038  02D5  0ACE               	incf	??_main+1,f
  2039  02D6  1903               	skipnz
  2040  02D7  0ACF               	incf	??_main+2,f
  2041  02D8  1903               	skipnz
  2042  02D9  0AD0               	incf	??_main+3,f
  2043  02DA  120A  158A  20E4  120A  118A  	fcall	_millis
  2044  02DF  1283               	bcf	3,5	;RP0=0, select bank0
  2045  02E0  1303               	bcf	3,6	;RP1=0, select bank0
  2046  02E1  0820               	movf	?_millis,w
  2047  02E2  07CD               	addwf	??_main,f
  2048  02E3  0821               	movf	?_millis+1,w
  2049  02E4  1803               	skipnc
  2050  02E5  0F21               	incfsz	?_millis+1,w
  2051  02E6  2AE8               	goto	u4020
  2052  02E7  2AE9               	goto	u4021
  2053  02E8                     u4020:	
  2054  02E8  07CE               	addwf	??_main+1,f
  2055  02E9                     u4021:	
  2056  02E9  0822               	movf	?_millis+2,w
  2057  02EA  1803               	skipnc
  2058  02EB  0F22               	incfsz	?_millis+2,w
  2059  02EC  2AEE               	goto	u4022
  2060  02ED  2AEF               	goto	u4023
  2061  02EE                     u4022:	
  2062  02EE  07CF               	addwf	??_main+2,f
  2063  02EF                     u4023:	
  2064  02EF  0823               	movf	?_millis+3,w
  2065  02F0  1803               	skipnc
  2066  02F1  0A23               	incf	?_millis+3,w
  2067  02F2  07D0               	addwf	??_main+3,f
  2068  02F3  0850               	movf	??_main+3,w
  2069  02F4  1D03               	btfss	3,2
  2070  02F5  2B03               	goto	l3063
  2071  02F6  084F               	movf	??_main+2,w
  2072  02F7  1D03               	btfss	3,2
  2073  02F8  2B03               	goto	l3063
  2074  02F9  300B               	movlw	11
  2075  02FA  024E               	subwf	??_main+1,w
  2076  02FB  1D03               	skipz
  2077  02FC  2B01               	goto	u4033
  2078  02FD  30B8               	movlw	184
  2079  02FE  024D               	subwf	??_main,w
  2080  02FF  1D03               	skipz
  2081  0300  2B01               	goto	u4033
  2082  0301                     u4033:	
  2083  0301  1C03               	btfss	3,0
  2084  0302  2B35               	goto	l3079
  2085  0303                     l3063:	
  2086                           
  2087                           ;main.c: 164: if(app.tpwm != app.pwmlast){
  2088  0303  1683               	bsf	3,5	;RP0=1, select bank1
  2089  0304  1303               	bcf	3,6	;RP1=0, select bank1
  2090  0305  082F               	movf	(_app^(0+128)+15),w
  2091  0306  0630               	xorwf	(_app^(0+128)+16),w
  2092  0307  1903               	skipnz
  2093  0308  2B35               	goto	l3079
  2094                           
  2095                           ;main.c: 165: app.pwmlast = app.tpwm;
  2096  0309  082F               	movf	(_app^(0+128)+15),w
  2097  030A  1283               	bcf	3,5	;RP0=0, select bank0
  2098  030B  1303               	bcf	3,6	;RP1=0, select bank0
  2099  030C  00CD               	movwf	??_main
  2100  030D  084D               	movf	??_main,w
  2101  030E  1683               	bsf	3,5	;RP0=1, select bank1
  2102  030F  1303               	bcf	3,6	;RP1=0, select bank1
  2103  0310  00B0               	movwf	(_app^(0+128)+16)
  2104                           
  2105                           ;main.c: 166: app.pwmstatemachine = 0;
  2106  0311  01B1               	clrf	(_app^(0+128)+17)
  2107                           
  2108                           ;main.c: 167: app.crepuscolare_changet = 0;
  2109  0312  01B6               	clrf	(_app^(0+128)+22)
  2110                           
  2111                           ;main.c: 169: app.pwm = app.tpwm;
  2112  0313  082F               	movf	(_app^(0+128)+15),w
  2113  0314  1283               	bcf	3,5	;RP0=0, select bank0
  2114  0315  1303               	bcf	3,6	;RP1=0, select bank0
  2115  0316  00CD               	movwf	??_main
  2116  0317  084D               	movf	??_main,w
  2117  0318  1683               	bsf	3,5	;RP0=1, select bank1
  2118  0319  1303               	bcf	3,6	;RP1=0, select bank1
  2119  031A  00AE               	movwf	(_app^(0+128)+14)
  2120                           
  2121                           ;main.c: 170: if(app.onLed_state){
  2122  031B  0825               	movf	(_app^(0+128)+5),w
  2123  031C  1903               	btfsc	3,2
  2124  031D  2B35               	goto	l3079
  2125                           
  2126                           ;main.c: 171: softPWM_Set(&soft_pwm, app.pwm);
  2127  031E  082E               	movf	(_app^(0+128)+14),w
  2128  031F  1283               	bcf	3,5	;RP0=0, select bank0
  2129  0320  1303               	bcf	3,6	;RP1=0, select bank0
  2130  0321  00CD               	movwf	??_main
  2131  0322  084D               	movf	??_main,w
  2132  0323  00BB               	movwf	softPWM_Set@perc
  2133  0324  30B8               	movlw	(low (_soft_pwm| 0))& (0+255)
  2134  0325  120A  158A  25F0  120A  118A  	fcall	_softPWM_Set
  2135                           
  2136                           ;main.c: 176: }
  2137                           
  2138                           ;main.c: 172: }
  2139                           ;main.c: 173: }
  2140                           ;main.c: 174: }
  2141                           ;main.c: 175: break;
  2142  032A  2B35               	goto	l3079
  2143  032B                     l3077:	
  2144  032B  1683               	bsf	3,5	;RP0=1, select bank1
  2145  032C  1303               	bcf	3,6	;RP1=0, select bank1
  2146  032D  0831               	movf	(_app^(0+128)+17),w
  2147                           
  2148                           ; Switch size 1, requested type "space"
  2149                           ; Number of cases is 2, Range of values is 0 to 1
  2150                           ; switch strategies available:
  2151                           ; Name         Instructions Cycles
  2152                           ; simple_byte            7     4 (average)
  2153                           ; direct_byte           14     8 (fixed)
  2154                           ; jumptable            260     6 (fixed)
  2155                           ;	Chosen strategy is simple_byte
  2156  032E  3A00               	xorlw	0	; case 0
  2157  032F  1903               	skipnz
  2158  0330  2A9D               	goto	l3057
  2159  0331  3A01               	xorlw	1	; case 1
  2160  0332  1903               	skipnz
  2161  0333  2ABD               	goto	l3061
  2162  0334  2B35               	goto	l3079
  2163  0335                     l3079:	
  2164                           
  2165                           ;main.c: 177: }
  2166                           ;main.c: 178: ADC_START();
  2167  0335  120A  158A  20AC  120A  118A  	fcall	_ADC_START
  2168  033A                     l3081:	
  2169                           
  2170                           ;main.c: 179: }
  2171                           ;main.c: 181: __nop();
  2172  033A  0000               	nop
  2173                           
  2174                           ;main.c: 183: softPWM_task(&soft_pwm);
  2175  033B  30B8               	movlw	(low (_soft_pwm| 0))& (0+255)
  2176  033C  120A  118A  2342  120A  118A  	fcall	_softPWM_task
  2177  0341  2894               	goto	l2965
  2178  0342                     __end_of_main:	
  2179                           
  2180                           	psect	text1
  2181  0BA6                     __ptext1:	
  2182 ;; *************** function _switch_init *****************
  2183 ;; Defined at:
  2184 ;;		line 31 in file "application.c"
  2185 ;; Parameters:    Size  Location     Type
  2186 ;;		None
  2187 ;; Auto vars:     Size  Location     Type
  2188 ;;		None
  2189 ;; Return value:  Size  Location     Type
  2190 ;;                  1    wreg      void 
  2191 ;; Registers used:
  2192 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2193 ;; Tracked objects:
  2194 ;;		On entry : 0/0
  2195 ;;		On exit  : 0/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2198 ;;      Params:         0       0       0       0       0
  2199 ;;      Locals:         0       0       0       0       0
  2200 ;;      Temps:          2       0       0       0       0
  2201 ;;      Totals:         2       0       0       0       0
  2202 ;;Total ram usage:        2 bytes
  2203 ;; Hardware stack levels used:    1
  2204 ;; Hardware stack levels required when called:    2
  2205 ;; This function calls:
  2206 ;;		_pulsante_INIT_debounce
  2207 ;; This function is called by:
  2208 ;;		_main
  2209 ;; This function uses a non-reentrant model
  2210 ;;
  2211                           
  2212                           
  2213                           ;psect for function _switch_init
  2214  0BA6                     _switch_init:	
  2215                           
  2216                           ;application.c: 32: WPUBbits.WPUB7 = 0;
  2217                           
  2218                           ;incstack = 0
  2219                           ; Regs used in _switch_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2220  0BA6  1683               	bsf	3,5	;RP0=1, select bank1
  2221  0BA7  1303               	bcf	3,6	;RP1=0, select bank1
  2222  0BA8  1395               	bcf	21,7	;volatile
  2223                           
  2224                           ;application.c: 33: WPUBbits.WPUB6 = 0;
  2225  0BA9  1315               	bcf	21,6	;volatile
  2226                           
  2227                           ;application.c: 34: P1_ROSSO.port = &PORTB;
  2228  0BAA  3000               	movlw	0
  2229  0BAB  1683               	bsf	3,5	;RP0=1, select bank3
  2230  0BAC  1703               	bsf	3,6	;RP1=1, select bank3
  2231  0BAD  00D1               	movwf	(_P1_ROSSO+1)^(0+384)
  2232  0BAE  3006               	movlw	6
  2233  0BAF  00D0               	movwf	_P1_ROSSO^(0+384)
  2234                           
  2235                           ;application.c: 35: P1_ROSSO.pin = 0;
  2236  0BB0  01D2               	clrf	(_P1_ROSSO^(0+384)+2)
  2237                           
  2238                           ;application.c: 36: TRISBbits.TRISB0 = 1;
  2239  0BB1  1683               	bsf	3,5	;RP0=1, select bank1
  2240  0BB2  1303               	bcf	3,6	;RP1=0, select bank1
  2241  0BB3  1406               	bsf	6,0	;volatile
  2242                           
  2243                           ;application.c: 37: WPUBbits.WPUB0 = 1;
  2244  0BB4  1415               	bsf	21,0	;volatile
  2245                           
  2246                           ;application.c: 38: P2_BLU.port = &PORTB;
  2247  0BB5  3000               	movlw	0
  2248  0BB6  1683               	bsf	3,5	;RP0=1, select bank3
  2249  0BB7  1703               	bsf	3,6	;RP1=1, select bank3
  2250  0BB8  00BE               	movwf	(_P2_BLU+1)^(0+384)
  2251  0BB9  3006               	movlw	6
  2252  0BBA  00BD               	movwf	_P2_BLU^(0+384)
  2253                           
  2254                           ;application.c: 39: P2_BLU.pin = 1;
  2255  0BBB  01BF               	clrf	(_P2_BLU^(0+384)+2)
  2256  0BBC  0ABF               	incf	(_P2_BLU^(0+384)+2),f
  2257                           
  2258                           ;application.c: 40: TRISBbits.TRISB1 = 1;
  2259  0BBD  1683               	bsf	3,5	;RP0=1, select bank1
  2260  0BBE  1303               	bcf	3,6	;RP1=0, select bank1
  2261  0BBF  1486               	bsf	6,1	;volatile
  2262                           
  2263                           ;application.c: 41: WPUBbits.WPUB1 = 1;
  2264  0BC0  1495               	bsf	21,1	;volatile
  2265                           
  2266                           ;application.c: 42: P3_BLU.port = &PORTB;
  2267  0BC1  3000               	movlw	0
  2268  0BC2  1683               	bsf	3,5	;RP0=1, select bank3
  2269  0BC3  1703               	bsf	3,6	;RP1=1, select bank3
  2270  0BC4  00AB               	movwf	(_P3_BLU+1)^(0+384)
  2271  0BC5  3006               	movlw	6
  2272  0BC6  00AA               	movwf	_P3_BLU^(0+384)
  2273                           
  2274                           ;application.c: 43: P3_BLU.pin = 2;
  2275  0BC7  3002               	movlw	2
  2276  0BC8  00F4               	movwf	??_switch_init
  2277  0BC9  0874               	movf	??_switch_init,w
  2278  0BCA  00AC               	movwf	(_P3_BLU^(0+384)+2)
  2279                           
  2280                           ;application.c: 44: TRISBbits.TRISB2 = 1;
  2281  0BCB  1683               	bsf	3,5	;RP0=1, select bank1
  2282  0BCC  1303               	bcf	3,6	;RP1=0, select bank1
  2283  0BCD  1506               	bsf	6,2	;volatile
  2284                           
  2285                           ;application.c: 45: WPUBbits.WPUB2 = 1;
  2286  0BCE  1515               	bsf	21,2	;volatile
  2287                           
  2288                           ;application.c: 46: P4_GIALLO.port = &PORTB;
  2289  0BCF  3000               	movlw	0
  2290  0BD0  1683               	bsf	3,5	;RP0=1, select bank3
  2291  0BD1  1703               	bsf	3,6	;RP1=1, select bank3
  2292  0BD2  0098               	movwf	(_P4_GIALLO+1)^(0+384)
  2293  0BD3  3006               	movlw	6
  2294  0BD4  0097               	movwf	_P4_GIALLO^(0+384)
  2295                           
  2296                           ;application.c: 47: P4_GIALLO.pin = 3;
  2297  0BD5  3003               	movlw	3
  2298  0BD6  00F4               	movwf	??_switch_init
  2299  0BD7  0874               	movf	??_switch_init,w
  2300  0BD8  0099               	movwf	(_P4_GIALLO^(0+384)+2)
  2301                           
  2302                           ;application.c: 48: TRISBbits.TRISB3 = 1;
  2303  0BD9  1683               	bsf	3,5	;RP0=1, select bank1
  2304  0BDA  1303               	bcf	3,6	;RP1=0, select bank1
  2305  0BDB  1586               	bsf	6,3	;volatile
  2306                           
  2307                           ;application.c: 49: WPUBbits.WPUB3 = 1;
  2308  0BDC  1595               	bsf	21,3	;volatile
  2309                           
  2310                           ;application.c: 50: OPTION_REGbits.nRBPU = 0;
  2311  0BDD  1381               	bcf	1,7	;volatile
  2312                           
  2313                           ;application.c: 51: _delay((unsigned long)((5)*(8000000/4000.0)));
  2314  0BDE  300D               	movlw	13
  2315  0BDF  00F5               	movwf	??_switch_init+1
  2316  0BE0  30FB               	movlw	251
  2317  0BE1  00F4               	movwf	??_switch_init
  2318  0BE2                     u4067:	
  2319  0BE2  0BF4               	decfsz	??_switch_init,f
  2320  0BE3  2BE2               	goto	u4067
  2321  0BE4  0BF5               	decfsz	??_switch_init+1,f
  2322  0BE5  2BE2               	goto	u4067
  2323  0BE6  2BE7               	nop2
  2324                           
  2325                           ;application.c: 52: pulsante_INIT_debounce(&P1_ROSSO);
  2326  0BE7  30D0               	movlw	(low (_P1_ROSSO| (0+256)))& (0+255)
  2327  0BE8  120A  158A  22AB  120A  158A  	fcall	_pulsante_INIT_debounce
  2328                           
  2329                           ;application.c: 53: pulsante_INIT_debounce(&P2_BLU);
  2330  0BED  30BD               	movlw	(low (_P2_BLU| (0+256)))& (0+255)
  2331  0BEE  120A  158A  22AB  120A  158A  	fcall	_pulsante_INIT_debounce
  2332                           
  2333                           ;application.c: 54: pulsante_INIT_debounce(&P3_BLU);
  2334  0BF3  30AA               	movlw	(low (_P3_BLU| (0+256)))& (0+255)
  2335  0BF4  120A  158A  22AB  120A  158A  	fcall	_pulsante_INIT_debounce
  2336                           
  2337                           ;application.c: 55: pulsante_INIT_debounce(&P4_GIALLO);
  2338  0BF9  3097               	movlw	(low (_P4_GIALLO| (0+256)))& (0+255)
  2339  0BFA  120A  158A  22AB   	fcall	_pulsante_INIT_debounce
  2340                           
  2341                           ;application.c: 57: app.pwm = 100;
  2342  0BFD  3064               	movlw	100
  2343  0BFE  00F4               	movwf	??_switch_init
  2344  0BFF  0874               	movf	??_switch_init,w
  2345  0C00  1683               	bsf	3,5	;RP0=1, select bank1
  2346  0C01  1303               	bcf	3,6	;RP1=0, select bank1
  2347  0C02  00AE               	movwf	(_app^(0+128)+14)
  2348  0C03  0008               	return
  2349  0C04                     __end_of_switch_init:	
  2350                           
  2351                           	psect	text2
  2352  0AAB                     __ptext2:	
  2353 ;; *************** function _pulsante_INIT_debounce *****************
  2354 ;; Defined at:
  2355 ;;		line 4 in file "switch.c"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;  p               1    wreg     PTR struct SWITCH
  2358 ;;		 -> P4_GIALLO(19), P3_BLU(19), P2_BLU(19), P1_ROSSO(19), 
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;  p               1    5[BANK0 ] PTR struct SWITCH
  2361 ;;		 -> P4_GIALLO(19), P3_BLU(19), P2_BLU(19), P1_ROSSO(19), 
  2362 ;;  value           1    4[BANK0 ] unsigned char 
  2363 ;;  pinmask         1    3[BANK0 ] unsigned char 
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  1    wreg      void 
  2366 ;; Registers used:
  2367 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2373 ;;      Params:         0       0       0       0       0
  2374 ;;      Locals:         0       3       0       0       0
  2375 ;;      Temps:          0       3       0       0       0
  2376 ;;      Totals:         0       6       0       0       0
  2377 ;;Total ram usage:        6 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; Hardware stack levels required when called:    1
  2380 ;; This function calls:
  2381 ;;		Nothing
  2382 ;; This function is called by:
  2383 ;;		_switch_init
  2384 ;; This function uses a non-reentrant model
  2385 ;;
  2386                           
  2387                           
  2388                           ;psect for function _pulsante_INIT_debounce
  2389  0AAB                     _pulsante_INIT_debounce:	
  2390                           
  2391                           ;incstack = 0
  2392                           ; Regs used in _pulsante_INIT_debounce: [wreg-fsr0h+status,2+status,0]
  2393                           ;pulsante_INIT_debounce@p stored from wreg
  2394  0AAB  1283               	bcf	3,5	;RP0=0, select bank0
  2395  0AAC  1303               	bcf	3,6	;RP1=0, select bank0
  2396  0AAD  00A5               	movwf	pulsante_INIT_debounce@p
  2397                           
  2398                           ;switch.c: 6: uint8_t value, pinmask;
  2399                           ;switch.c: 7: pinmask = (1<<p->pin);
  2400  0AAE  3001               	movlw	1
  2401  0AAF  00A0               	movwf	??_pulsante_INIT_debounce
  2402  0AB0  0825               	movf	pulsante_INIT_debounce@p,w
  2403  0AB1  3E02               	addlw	2
  2404  0AB2  0084               	movwf	4
  2405  0AB3  1783               	bsf	3,7	;select IRP bank2
  2406  0AB4  0A00               	incf	0,w
  2407  0AB5  2AB8               	goto	u3294
  2408  0AB6                     u3295:	
  2409  0AB6  1003               	clrc
  2410  0AB7  0DA0               	rlf	??_pulsante_INIT_debounce,f
  2411  0AB8                     u3294:	
  2412  0AB8  3EFF               	addlw	-1
  2413  0AB9  1D03               	skipz
  2414  0ABA  2AB6               	goto	u3295
  2415  0ABB  0820               	movf	??_pulsante_INIT_debounce,w
  2416  0ABC  00A1               	movwf	??_pulsante_INIT_debounce+1
  2417  0ABD  0821               	movf	??_pulsante_INIT_debounce+1,w
  2418  0ABE  00A3               	movwf	pulsante_INIT_debounce@pinmask
  2419                           
  2420                           ;switch.c: 8: value = *p->port & pinmask;
  2421  0ABF  0825               	movf	pulsante_INIT_debounce@p,w
  2422  0AC0  0084               	movwf	4
  2423  0AC1  0800               	movf	0,w
  2424  0AC2  00A0               	movwf	??_pulsante_INIT_debounce
  2425  0AC3  0A84               	incf	4,f
  2426  0AC4  0800               	movf	0,w
  2427  0AC5  00A1               	movwf	??_pulsante_INIT_debounce+1
  2428  0AC6  0820               	movf	??_pulsante_INIT_debounce,w
  2429  0AC7  0084               	movwf	4
  2430  0AC8  1783               	bsf	3,7
  2431  0AC9  1C21               	btfss	??_pulsante_INIT_debounce+1,0
  2432  0ACA  1383               	bcf	3,7
  2433  0ACB  0800               	movf	0,w
  2434  0ACC  0523               	andwf	pulsante_INIT_debounce@pinmask,w
  2435  0ACD  00A2               	movwf	??_pulsante_INIT_debounce+2
  2436  0ACE  0822               	movf	??_pulsante_INIT_debounce+2,w
  2437  0ACF  00A4               	movwf	pulsante_INIT_debounce@value
  2438                           
  2439                           ;switch.c: 10: p->state_debounce = 0;
  2440  0AD0  0825               	movf	pulsante_INIT_debounce@p,w
  2441  0AD1  3E03               	addlw	3
  2442  0AD2  0084               	movwf	4
  2443  0AD3  1783               	bsf	3,7	;select IRP bank2
  2444  0AD4  0180               	clrf	0
  2445                           
  2446                           ;switch.c: 11: p->laststato = value;
  2447  0AD5  0824               	movf	pulsante_INIT_debounce@value,w
  2448  0AD6  00A0               	movwf	??_pulsante_INIT_debounce
  2449  0AD7  0825               	movf	pulsante_INIT_debounce@p,w
  2450  0AD8  3E08               	addlw	8
  2451  0AD9  0084               	movwf	4
  2452  0ADA  0820               	movf	??_pulsante_INIT_debounce,w
  2453  0ADB  0080               	movwf	0
  2454                           
  2455                           ;switch.c: 12: p->timewaitdebounce = 0;
  2456  0ADC  3004               	movlw	4
  2457  0ADD  0725               	addwf	pulsante_INIT_debounce@p,w
  2458  0ADE  00A0               	movwf	??_pulsante_INIT_debounce
  2459  0ADF  0820               	movf	??_pulsante_INIT_debounce,w
  2460  0AE0  0084               	movwf	4
  2461  0AE1  0180               	clrf	0
  2462  0AE2  0A84               	incf	4,f
  2463  0AE3  0180               	clrf	0
  2464  0AE4  0A84               	incf	4,f
  2465  0AE5  0180               	clrf	0
  2466  0AE6  0A84               	incf	4,f
  2467  0AE7  0180               	clrf	0
  2468                           
  2469                           ;switch.c: 13: p->changeState = 0;
  2470  0AE8  0825               	movf	pulsante_INIT_debounce@p,w
  2471  0AE9  3E09               	addlw	9
  2472  0AEA  0084               	movwf	4
  2473  0AEB  0180               	clrf	0
  2474                           
  2475                           ;switch.c: 14: if(value){
  2476  0AEC  0824               	movf	pulsante_INIT_debounce@value,w
  2477  0AED  1903               	btfsc	3,2
  2478  0AEE  2AF5               	goto	l2605
  2479                           
  2480                           ;switch.c: 15: p->State = 1;
  2481  0AEF  0825               	movf	pulsante_INIT_debounce@p,w
  2482  0AF0  3E0A               	addlw	10
  2483  0AF1  0084               	movwf	4
  2484  0AF2  0180               	clrf	0
  2485  0AF3  0A80               	incf	0,f
  2486                           
  2487                           ;switch.c: 16: }else{
  2488  0AF4  0008               	return
  2489  0AF5                     l2605:	
  2490                           
  2491                           ;switch.c: 17: p->State = 0;
  2492  0AF5  0825               	movf	pulsante_INIT_debounce@p,w
  2493  0AF6  3E0A               	addlw	10
  2494  0AF7  0084               	movwf	4
  2495  0AF8  0180               	clrf	0
  2496  0AF9  0008               	return
  2497  0AFA                     __end_of_pulsante_INIT_debounce:	
  2498                           
  2499                           	psect	text3
  2500  0342                     __ptext3:	
  2501 ;; *************** function _softPWM_task *****************
  2502 ;; Defined at:
  2503 ;;		line 29 in file "softPWM.c"
  2504 ;; Parameters:    Size  Location     Type
  2505 ;;  spwm            1    wreg     PTR struct SOFT_PWM
  2506 ;;		 -> soft_pwm(16), 
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;  spwm            1    5[COMMON] PTR struct SOFT_PWM
  2509 ;;		 -> soft_pwm(16), 
  2510 ;;  pinmask         1    4[COMMON] unsigned char 
  2511 ;; Return value:  Size  Location     Type
  2512 ;;                  1    wreg      void 
  2513 ;; Registers used:
  2514 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : 0/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2520 ;;      Params:         0       0       0       0       0
  2521 ;;      Locals:         2       0       0       0       0
  2522 ;;      Temps:          0      10       0       0       0
  2523 ;;      Totals:         2      10       0       0       0
  2524 ;;Total ram usage:       12 bytes
  2525 ;; Hardware stack levels used:    1
  2526 ;; Hardware stack levels required when called:    2
  2527 ;; This function calls:
  2528 ;;		_millis
  2529 ;; This function is called by:
  2530 ;;		_main
  2531 ;; This function uses a non-reentrant model
  2532 ;;
  2533                           
  2534                           
  2535                           ;psect for function _softPWM_task
  2536  0342                     _softPWM_task:	
  2537                           
  2538                           ;incstack = 0
  2539                           ; Regs used in _softPWM_task: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2540                           ;softPWM_task@spwm stored from wreg
  2541  0342  00F5               	movwf	softPWM_task@spwm
  2542                           
  2543                           ;softPWM.c: 31: uint8_t pinmask;
  2544                           ;softPWM.c: 33: if((spwm->needchange)&&(spwm->percent_Pwm==0)){
  2545  0343  0875               	movf	softPWM_task@spwm,w
  2546  0344  3E0E               	addlw	14
  2547  0345  0084               	movwf	4
  2548  0346  1383               	bcf	3,7	;select IRP bank0
  2549  0347  0800               	movf	0,w
  2550  0348  1903               	btfsc	3,2
  2551  0349  2B87               	goto	l2903
  2552  034A  0875               	movf	softPWM_task@spwm,w
  2553  034B  3E09               	addlw	9
  2554  034C  0084               	movwf	4
  2555  034D  0800               	movf	0,w
  2556  034E  1D03               	btfss	3,2
  2557  034F  2B87               	goto	l2903
  2558                           
  2559                           ;softPWM.c: 35: pinmask = ~(1<<spwm->pin);
  2560  0350  3001               	movlw	1
  2561  0351  1283               	bcf	3,5	;RP0=0, select bank0
  2562  0352  1303               	bcf	3,6	;RP1=0, select bank0
  2563  0353  00A8               	movwf	??_softPWM_task
  2564  0354  0875               	movf	softPWM_task@spwm,w
  2565  0355  3E02               	addlw	2
  2566  0356  0084               	movwf	4
  2567  0357  0A00               	incf	0,w
  2568  0358  2B5B               	goto	u3654
  2569  0359                     u3655:	
  2570  0359  1003               	clrc
  2571  035A  0DA8               	rlf	??_softPWM_task,f
  2572  035B                     u3654:	
  2573  035B  3EFF               	addlw	-1
  2574  035C  1D03               	skipz
  2575  035D  2B59               	goto	u3655
  2576  035E  0828               	movf	??_softPWM_task,w
  2577  035F  3AFF               	xorlw	255
  2578  0360  00A9               	movwf	??_softPWM_task+1
  2579  0361  0829               	movf	??_softPWM_task+1,w
  2580  0362  00F4               	movwf	softPWM_task@pinmask
  2581                           
  2582                           ;softPWM.c: 36: *spwm->port = *spwm->port & pinmask;
  2583  0363  0875               	movf	softPWM_task@spwm,w
  2584  0364  0084               	movwf	4
  2585  0365  0800               	movf	0,w
  2586  0366  00A8               	movwf	??_softPWM_task
  2587  0367  0A84               	incf	4,f
  2588  0368  0800               	movf	0,w
  2589  0369  00A9               	movwf	??_softPWM_task+1
  2590  036A  0828               	movf	??_softPWM_task,w
  2591  036B  0084               	movwf	4
  2592  036C  1783               	bsf	3,7
  2593  036D  1C29               	btfss	??_softPWM_task+1,0
  2594  036E  1383               	bcf	3,7
  2595  036F  0800               	movf	0,w
  2596  0370  0574               	andwf	softPWM_task@pinmask,w
  2597  0371  00AA               	movwf	??_softPWM_task+2
  2598  0372  0875               	movf	softPWM_task@spwm,w
  2599  0373  0084               	movwf	4
  2600  0374  1383               	bcf	3,7	;select IRP bank0
  2601  0375  0800               	movf	0,w
  2602  0376  00AB               	movwf	??_softPWM_task+3
  2603  0377  0A84               	incf	4,f
  2604  0378  0800               	movf	0,w
  2605  0379  00AC               	movwf	??_softPWM_task+4
  2606  037A  082B               	movf	??_softPWM_task+3,w
  2607  037B  0084               	movwf	4
  2608  037C  1783               	bsf	3,7
  2609  037D  1C2C               	btfss	??_softPWM_task+4,0
  2610  037E  1383               	bcf	3,7
  2611  037F  082A               	movf	??_softPWM_task+2,w
  2612  0380  0080               	movwf	0
  2613                           
  2614                           ;softPWM.c: 37: spwm->needchange=0;
  2615  0381  0875               	movf	softPWM_task@spwm,w
  2616  0382  3E0E               	addlw	14
  2617  0383  0084               	movwf	4
  2618  0384  1383               	bcf	3,7	;select IRP bank0
  2619  0385  0180               	clrf	0
  2620                           
  2621                           ;softPWM.c: 38: }else if((spwm->needchange)&&(spwm->percent_Pwm==100)){
  2622  0386  0008               	return
  2623  0387                     l2903:	
  2624  0387  0875               	movf	softPWM_task@spwm,w
  2625  0388  3E0E               	addlw	14
  2626  0389  0084               	movwf	4
  2627  038A  0800               	movf	0,w
  2628  038B  1903               	btfsc	3,2
  2629  038C  2BCA               	goto	l2909
  2630  038D  0875               	movf	softPWM_task@spwm,w
  2631  038E  3E09               	addlw	9
  2632  038F  0084               	movwf	4
  2633  0390  3064               	movlw	100
  2634  0391  0600               	xorwf	0,w
  2635  0392  1D03               	btfss	3,2
  2636  0393  2BCA               	goto	l2909
  2637                           
  2638                           ;softPWM.c: 40: pinmask = (1<<spwm->pin);
  2639  0394  3001               	movlw	1
  2640  0395  1283               	bcf	3,5	;RP0=0, select bank0
  2641  0396  1303               	bcf	3,6	;RP1=0, select bank0
  2642  0397  00A8               	movwf	??_softPWM_task
  2643  0398  0875               	movf	softPWM_task@spwm,w
  2644  0399  3E02               	addlw	2
  2645  039A  0084               	movwf	4
  2646  039B  0A00               	incf	0,w
  2647  039C  2B9F               	goto	u3684
  2648  039D                     u3685:	
  2649  039D  1003               	clrc
  2650  039E  0DA8               	rlf	??_softPWM_task,f
  2651  039F                     u3684:	
  2652  039F  3EFF               	addlw	-1
  2653  03A0  1D03               	skipz
  2654  03A1  2B9D               	goto	u3685
  2655  03A2  0828               	movf	??_softPWM_task,w
  2656  03A3  00A9               	movwf	??_softPWM_task+1
  2657  03A4  0829               	movf	??_softPWM_task+1,w
  2658  03A5  00F4               	movwf	softPWM_task@pinmask
  2659                           
  2660                           ;softPWM.c: 41: *spwm->port = *spwm->port | pinmask;
  2661  03A6  0875               	movf	softPWM_task@spwm,w
  2662  03A7  0084               	movwf	4
  2663  03A8  0800               	movf	0,w
  2664  03A9  00A8               	movwf	??_softPWM_task
  2665  03AA  0A84               	incf	4,f
  2666  03AB  0800               	movf	0,w
  2667  03AC  00A9               	movwf	??_softPWM_task+1
  2668  03AD  0828               	movf	??_softPWM_task,w
  2669  03AE  0084               	movwf	4
  2670  03AF  1783               	bsf	3,7
  2671  03B0  1C29               	btfss	??_softPWM_task+1,0
  2672  03B1  1383               	bcf	3,7
  2673  03B2  0800               	movf	0,w
  2674  03B3  0474               	iorwf	softPWM_task@pinmask,w
  2675  03B4  00AA               	movwf	??_softPWM_task+2
  2676  03B5  0875               	movf	softPWM_task@spwm,w
  2677  03B6  0084               	movwf	4
  2678  03B7  1383               	bcf	3,7	;select IRP bank0
  2679  03B8  0800               	movf	0,w
  2680  03B9  00AB               	movwf	??_softPWM_task+3
  2681  03BA  0A84               	incf	4,f
  2682  03BB  0800               	movf	0,w
  2683  03BC  00AC               	movwf	??_softPWM_task+4
  2684  03BD  082B               	movf	??_softPWM_task+3,w
  2685  03BE  0084               	movwf	4
  2686  03BF  1783               	bsf	3,7
  2687  03C0  1C2C               	btfss	??_softPWM_task+4,0
  2688  03C1  1383               	bcf	3,7
  2689  03C2  082A               	movf	??_softPWM_task+2,w
  2690  03C3  0080               	movwf	0
  2691                           
  2692                           ;softPWM.c: 42: spwm->needchange=0;
  2693  03C4  0875               	movf	softPWM_task@spwm,w
  2694  03C5  3E0E               	addlw	14
  2695  03C6  0084               	movwf	4
  2696  03C7  1383               	bcf	3,7	;select IRP bank0
  2697  03C8  0180               	clrf	0
  2698                           
  2699                           ;softPWM.c: 43: }else{
  2700  03C9  0008               	return
  2701  03CA                     l2909:	
  2702                           
  2703                           ;softPWM.c: 45: if(spwm->statepwm){
  2704  03CA  0875               	movf	softPWM_task@spwm,w
  2705  03CB  3E0F               	addlw	15
  2706  03CC  0084               	movwf	4
  2707  03CD  0800               	movf	0,w
  2708  03CE  1903               	btfsc	3,2
  2709  03CF  2C6D               	goto	l2921
  2710                           
  2711                           ;softPWM.c: 47: if((millis()-spwm->mstime) >= spwm->ms_time_ON){
  2712  03D0  0875               	movf	softPWM_task@spwm,w
  2713  03D1  3E05               	addlw	5
  2714  03D2  0084               	movwf	4
  2715  03D3  0800               	movf	0,w
  2716  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  2717  03D5  1303               	bcf	3,6	;RP1=0, select bank0
  2718  03D6  00A8               	movwf	??_softPWM_task
  2719  03D7  0A84               	incf	4,f
  2720  03D8  0800               	movf	0,w
  2721  03D9  00A9               	movwf	??_softPWM_task+1
  2722  03DA  0828               	movf	??_softPWM_task,w
  2723  03DB  00AA               	movwf	??_softPWM_task+2
  2724  03DC  0829               	movf	??_softPWM_task+1,w
  2725  03DD  00AB               	movwf	??_softPWM_task+3
  2726  03DE  01AC               	clrf	??_softPWM_task+4
  2727  03DF  01AD               	clrf	??_softPWM_task+5
  2728  03E0  0875               	movf	softPWM_task@spwm,w
  2729  03E1  3E0A               	addlw	10
  2730  03E2  0084               	movwf	4
  2731  03E3  0800               	movf	0,w
  2732  03E4  00AE               	movwf	??_softPWM_task+6
  2733  03E5  0A84               	incf	4,f
  2734  03E6  0800               	movf	0,w
  2735  03E7  00AF               	movwf	??_softPWM_task+7
  2736  03E8  0A84               	incf	4,f
  2737  03E9  0800               	movf	0,w
  2738  03EA  00B0               	movwf	??_softPWM_task+8
  2739  03EB  0A84               	incf	4,f
  2740  03EC  0800               	movf	0,w
  2741  03ED  00B1               	movwf	??_softPWM_task+9
  2742  03EE  09AE               	comf	??_softPWM_task+6,f
  2743  03EF  09AF               	comf	??_softPWM_task+7,f
  2744  03F0  09B0               	comf	??_softPWM_task+8,f
  2745  03F1  09B1               	comf	??_softPWM_task+9,f
  2746  03F2  0AAE               	incf	??_softPWM_task+6,f
  2747  03F3  1903               	skipnz
  2748  03F4  0AAF               	incf	??_softPWM_task+7,f
  2749  03F5  1903               	skipnz
  2750  03F6  0AB0               	incf	??_softPWM_task+8,f
  2751  03F7  1903               	skipnz
  2752  03F8  0AB1               	incf	??_softPWM_task+9,f
  2753  03F9  120A  158A  20E4  120A  118A  	fcall	_millis
  2754  03FE  1283               	bcf	3,5	;RP0=0, select bank0
  2755  03FF  1303               	bcf	3,6	;RP1=0, select bank0
  2756  0400  0820               	movf	?_millis,w
  2757  0401  07AE               	addwf	??_softPWM_task+6,f
  2758  0402  0821               	movf	?_millis+1,w
  2759  0403  1803               	skipnc
  2760  0404  0F21               	incfsz	?_millis+1,w
  2761  0405  2C07               	goto	u3700
  2762  0406  2C08               	goto	u3701
  2763  0407                     u3700:	
  2764  0407  07AF               	addwf	??_softPWM_task+7,f
  2765  0408                     u3701:	
  2766  0408  0822               	movf	?_millis+2,w
  2767  0409  1803               	skipnc
  2768  040A  0F22               	incfsz	?_millis+2,w
  2769  040B  2C0D               	goto	u3702
  2770  040C  2C0E               	goto	u3703
  2771  040D                     u3702:	
  2772  040D  07B0               	addwf	??_softPWM_task+8,f
  2773  040E                     u3703:	
  2774  040E  0823               	movf	?_millis+3,w
  2775  040F  1803               	skipnc
  2776  0410  0A23               	incf	?_millis+3,w
  2777  0411  07B1               	addwf	??_softPWM_task+9,f
  2778  0412  082D               	movf	??_softPWM_task+5,w
  2779  0413  0231               	subwf	??_softPWM_task+9,w
  2780  0414  1D03               	skipz
  2781  0415  2C20               	goto	u3715
  2782  0416  082C               	movf	??_softPWM_task+4,w
  2783  0417  0230               	subwf	??_softPWM_task+8,w
  2784  0418  1D03               	skipz
  2785  0419  2C20               	goto	u3715
  2786  041A  082B               	movf	??_softPWM_task+3,w
  2787  041B  022F               	subwf	??_softPWM_task+7,w
  2788  041C  1D03               	skipz
  2789  041D  2C20               	goto	u3715
  2790  041E  082A               	movf	??_softPWM_task+2,w
  2791  041F  022E               	subwf	??_softPWM_task+6,w
  2792  0420                     u3715:	
  2793  0420  1C03               	skipc
  2794  0421  0008               	return
  2795                           
  2796                           ;softPWM.c: 48: spwm->mstime = millis();
  2797  0422  120A  158A  20E4  120A  118A  	fcall	_millis
  2798  0427  0875               	movf	softPWM_task@spwm,w
  2799  0428  3E0A               	addlw	10
  2800  0429  0084               	movwf	4
  2801  042A  1283               	bcf	3,5	;RP0=0, select bank0
  2802  042B  1303               	bcf	3,6	;RP1=0, select bank0
  2803  042C  0820               	movf	?_millis,w
  2804  042D  1383               	bcf	3,7	;select IRP bank0
  2805  042E  0080               	movwf	0
  2806  042F  0A84               	incf	4,f
  2807  0430  0821               	movf	?_millis+1,w
  2808  0431  0080               	movwf	0
  2809  0432  0A84               	incf	4,f
  2810  0433  0822               	movf	?_millis+2,w
  2811  0434  0080               	movwf	0
  2812  0435  0A84               	incf	4,f
  2813  0436  0823               	movf	?_millis+3,w
  2814  0437  0080               	movwf	0
  2815                           
  2816                           ;softPWM.c: 51: pinmask = ~(1<<spwm->pin);
  2817  0438  3001               	movlw	1
  2818  0439  00A8               	movwf	??_softPWM_task
  2819  043A  0875               	movf	softPWM_task@spwm,w
  2820  043B  3E02               	addlw	2
  2821  043C  0084               	movwf	4
  2822  043D  0A00               	incf	0,w
  2823  043E  2C41               	goto	u3724
  2824  043F                     u3725:	
  2825  043F  1003               	clrc
  2826  0440  0DA8               	rlf	??_softPWM_task,f
  2827  0441                     u3724:	
  2828  0441  3EFF               	addlw	-1
  2829  0442  1D03               	skipz
  2830  0443  2C3F               	goto	u3725
  2831  0444  0828               	movf	??_softPWM_task,w
  2832  0445  3AFF               	xorlw	255
  2833  0446  00A9               	movwf	??_softPWM_task+1
  2834  0447  0829               	movf	??_softPWM_task+1,w
  2835  0448  00F4               	movwf	softPWM_task@pinmask
  2836                           
  2837                           ;softPWM.c: 52: *spwm->port = *spwm->port & pinmask;
  2838  0449  0875               	movf	softPWM_task@spwm,w
  2839  044A  0084               	movwf	4
  2840  044B  0800               	movf	0,w
  2841  044C  00A8               	movwf	??_softPWM_task
  2842  044D  0A84               	incf	4,f
  2843  044E  0800               	movf	0,w
  2844  044F  00A9               	movwf	??_softPWM_task+1
  2845  0450  0828               	movf	??_softPWM_task,w
  2846  0451  0084               	movwf	4
  2847  0452  1783               	bsf	3,7
  2848  0453  1C29               	btfss	??_softPWM_task+1,0
  2849  0454  1383               	bcf	3,7
  2850  0455  0800               	movf	0,w
  2851  0456  0574               	andwf	softPWM_task@pinmask,w
  2852  0457  00AA               	movwf	??_softPWM_task+2
  2853  0458  0875               	movf	softPWM_task@spwm,w
  2854  0459  0084               	movwf	4
  2855  045A  1383               	bcf	3,7	;select IRP bank0
  2856  045B  0800               	movf	0,w
  2857  045C  00AB               	movwf	??_softPWM_task+3
  2858  045D  0A84               	incf	4,f
  2859  045E  0800               	movf	0,w
  2860  045F  00AC               	movwf	??_softPWM_task+4
  2861  0460  082B               	movf	??_softPWM_task+3,w
  2862  0461  0084               	movwf	4
  2863  0462  1783               	bsf	3,7
  2864  0463  1C2C               	btfss	??_softPWM_task+4,0
  2865  0464  1383               	bcf	3,7
  2866  0465  082A               	movf	??_softPWM_task+2,w
  2867  0466  0080               	movwf	0
  2868                           
  2869                           ;softPWM.c: 53: spwm->statepwm = 0;
  2870  0467  0875               	movf	softPWM_task@spwm,w
  2871  0468  3E0F               	addlw	15
  2872  0469  0084               	movwf	4
  2873  046A  1383               	bcf	3,7	;select IRP bank0
  2874  046B  0180               	clrf	0
  2875                           
  2876                           ;softPWM.c: 54: }
  2877                           ;softPWM.c: 55: }else{
  2878  046C  0008               	return
  2879  046D                     l2921:	
  2880                           
  2881                           ;softPWM.c: 57: if((millis()-spwm->mstime) >= spwm->ms_time_OFF){
  2882  046D  0875               	movf	softPWM_task@spwm,w
  2883  046E  3E07               	addlw	7
  2884  046F  0084               	movwf	4
  2885  0470  0800               	movf	0,w
  2886  0471  1283               	bcf	3,5	;RP0=0, select bank0
  2887  0472  1303               	bcf	3,6	;RP1=0, select bank0
  2888  0473  00A8               	movwf	??_softPWM_task
  2889  0474  0A84               	incf	4,f
  2890  0475  0800               	movf	0,w
  2891  0476  00A9               	movwf	??_softPWM_task+1
  2892  0477  0828               	movf	??_softPWM_task,w
  2893  0478  00AA               	movwf	??_softPWM_task+2
  2894  0479  0829               	movf	??_softPWM_task+1,w
  2895  047A  00AB               	movwf	??_softPWM_task+3
  2896  047B  01AC               	clrf	??_softPWM_task+4
  2897  047C  01AD               	clrf	??_softPWM_task+5
  2898  047D  0875               	movf	softPWM_task@spwm,w
  2899  047E  3E0A               	addlw	10
  2900  047F  0084               	movwf	4
  2901  0480  0800               	movf	0,w
  2902  0481  00AE               	movwf	??_softPWM_task+6
  2903  0482  0A84               	incf	4,f
  2904  0483  0800               	movf	0,w
  2905  0484  00AF               	movwf	??_softPWM_task+7
  2906  0485  0A84               	incf	4,f
  2907  0486  0800               	movf	0,w
  2908  0487  00B0               	movwf	??_softPWM_task+8
  2909  0488  0A84               	incf	4,f
  2910  0489  0800               	movf	0,w
  2911  048A  00B1               	movwf	??_softPWM_task+9
  2912  048B  09AE               	comf	??_softPWM_task+6,f
  2913  048C  09AF               	comf	??_softPWM_task+7,f
  2914  048D  09B0               	comf	??_softPWM_task+8,f
  2915  048E  09B1               	comf	??_softPWM_task+9,f
  2916  048F  0AAE               	incf	??_softPWM_task+6,f
  2917  0490  1903               	skipnz
  2918  0491  0AAF               	incf	??_softPWM_task+7,f
  2919  0492  1903               	skipnz
  2920  0493  0AB0               	incf	??_softPWM_task+8,f
  2921  0494  1903               	skipnz
  2922  0495  0AB1               	incf	??_softPWM_task+9,f
  2923  0496  120A  158A  20E4  120A  118A  	fcall	_millis
  2924  049B  1283               	bcf	3,5	;RP0=0, select bank0
  2925  049C  1303               	bcf	3,6	;RP1=0, select bank0
  2926  049D  0820               	movf	?_millis,w
  2927  049E  07AE               	addwf	??_softPWM_task+6,f
  2928  049F  0821               	movf	?_millis+1,w
  2929  04A0  1803               	skipnc
  2930  04A1  0F21               	incfsz	?_millis+1,w
  2931  04A2  2CA4               	goto	u3730
  2932  04A3  2CA5               	goto	u3731
  2933  04A4                     u3730:	
  2934  04A4  07AF               	addwf	??_softPWM_task+7,f
  2935  04A5                     u3731:	
  2936  04A5  0822               	movf	?_millis+2,w
  2937  04A6  1803               	skipnc
  2938  04A7  0F22               	incfsz	?_millis+2,w
  2939  04A8  2CAA               	goto	u3732
  2940  04A9  2CAB               	goto	u3733
  2941  04AA                     u3732:	
  2942  04AA  07B0               	addwf	??_softPWM_task+8,f
  2943  04AB                     u3733:	
  2944  04AB  0823               	movf	?_millis+3,w
  2945  04AC  1803               	skipnc
  2946  04AD  0A23               	incf	?_millis+3,w
  2947  04AE  07B1               	addwf	??_softPWM_task+9,f
  2948  04AF  082D               	movf	??_softPWM_task+5,w
  2949  04B0  0231               	subwf	??_softPWM_task+9,w
  2950  04B1  1D03               	skipz
  2951  04B2  2CBD               	goto	u3745
  2952  04B3  082C               	movf	??_softPWM_task+4,w
  2953  04B4  0230               	subwf	??_softPWM_task+8,w
  2954  04B5  1D03               	skipz
  2955  04B6  2CBD               	goto	u3745
  2956  04B7  082B               	movf	??_softPWM_task+3,w
  2957  04B8  022F               	subwf	??_softPWM_task+7,w
  2958  04B9  1D03               	skipz
  2959  04BA  2CBD               	goto	u3745
  2960  04BB  082A               	movf	??_softPWM_task+2,w
  2961  04BC  022E               	subwf	??_softPWM_task+6,w
  2962  04BD                     u3745:	
  2963  04BD  1C03               	skipc
  2964  04BE  0008               	return
  2965                           
  2966                           ;softPWM.c: 58: spwm->mstime = millis();
  2967  04BF  120A  158A  20E4  120A  118A  	fcall	_millis
  2968  04C4  0875               	movf	softPWM_task@spwm,w
  2969  04C5  3E0A               	addlw	10
  2970  04C6  0084               	movwf	4
  2971  04C7  1283               	bcf	3,5	;RP0=0, select bank0
  2972  04C8  1303               	bcf	3,6	;RP1=0, select bank0
  2973  04C9  0820               	movf	?_millis,w
  2974  04CA  1383               	bcf	3,7	;select IRP bank0
  2975  04CB  0080               	movwf	0
  2976  04CC  0A84               	incf	4,f
  2977  04CD  0821               	movf	?_millis+1,w
  2978  04CE  0080               	movwf	0
  2979  04CF  0A84               	incf	4,f
  2980  04D0  0822               	movf	?_millis+2,w
  2981  04D1  0080               	movwf	0
  2982  04D2  0A84               	incf	4,f
  2983  04D3  0823               	movf	?_millis+3,w
  2984  04D4  0080               	movwf	0
  2985                           
  2986                           ;softPWM.c: 61: pinmask = (1<<spwm->pin);
  2987  04D5  3001               	movlw	1
  2988  04D6  00A8               	movwf	??_softPWM_task
  2989  04D7  0875               	movf	softPWM_task@spwm,w
  2990  04D8  3E02               	addlw	2
  2991  04D9  0084               	movwf	4
  2992  04DA  0A00               	incf	0,w
  2993  04DB  2CDE               	goto	u3754
  2994  04DC                     u3755:	
  2995  04DC  1003               	clrc
  2996  04DD  0DA8               	rlf	??_softPWM_task,f
  2997  04DE                     u3754:	
  2998  04DE  3EFF               	addlw	-1
  2999  04DF  1D03               	skipz
  3000  04E0  2CDC               	goto	u3755
  3001  04E1  0828               	movf	??_softPWM_task,w
  3002  04E2  00A9               	movwf	??_softPWM_task+1
  3003  04E3  0829               	movf	??_softPWM_task+1,w
  3004  04E4  00F4               	movwf	softPWM_task@pinmask
  3005                           
  3006                           ;softPWM.c: 62: *spwm->port = *spwm->port | pinmask;
  3007  04E5  0875               	movf	softPWM_task@spwm,w
  3008  04E6  0084               	movwf	4
  3009  04E7  0800               	movf	0,w
  3010  04E8  00A8               	movwf	??_softPWM_task
  3011  04E9  0A84               	incf	4,f
  3012  04EA  0800               	movf	0,w
  3013  04EB  00A9               	movwf	??_softPWM_task+1
  3014  04EC  0828               	movf	??_softPWM_task,w
  3015  04ED  0084               	movwf	4
  3016  04EE  1783               	bsf	3,7
  3017  04EF  1C29               	btfss	??_softPWM_task+1,0
  3018  04F0  1383               	bcf	3,7
  3019  04F1  0800               	movf	0,w
  3020  04F2  0474               	iorwf	softPWM_task@pinmask,w
  3021  04F3  00AA               	movwf	??_softPWM_task+2
  3022  04F4  0875               	movf	softPWM_task@spwm,w
  3023  04F5  0084               	movwf	4
  3024  04F6  1383               	bcf	3,7	;select IRP bank0
  3025  04F7  0800               	movf	0,w
  3026  04F8  00AB               	movwf	??_softPWM_task+3
  3027  04F9  0A84               	incf	4,f
  3028  04FA  0800               	movf	0,w
  3029  04FB  00AC               	movwf	??_softPWM_task+4
  3030  04FC  082B               	movf	??_softPWM_task+3,w
  3031  04FD  0084               	movwf	4
  3032  04FE  1783               	bsf	3,7
  3033  04FF  1C2C               	btfss	??_softPWM_task+4,0
  3034  0500  1383               	bcf	3,7
  3035  0501  082A               	movf	??_softPWM_task+2,w
  3036  0502  0080               	movwf	0
  3037                           
  3038                           ;softPWM.c: 63: spwm->statepwm = 1;
  3039  0503  0875               	movf	softPWM_task@spwm,w
  3040  0504  3E0F               	addlw	15
  3041  0505  0084               	movwf	4
  3042  0506  1383               	bcf	3,7	;select IRP bank0
  3043  0507  0180               	clrf	0
  3044  0508  0A80               	incf	0,f
  3045  0509  0008               	return
  3046  050A                     __end_of_softPWM_task:	
  3047                           
  3048                           	psect	text4
  3049  08D1                     __ptext4:	
  3050 ;; *************** function _save_modalita_SW4 *****************
  3051 ;; Defined at:
  3052 ;;		line 257 in file "application.c"
  3053 ;; Parameters:    Size  Location     Type
  3054 ;;  modalita        1    wreg     unsigned char 
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;  modalita        1    7[BANK0 ] unsigned char 
  3057 ;; Return value:  Size  Location     Type
  3058 ;;                  1    wreg      void 
  3059 ;; Registers used:
  3060 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/0
  3063 ;;		On exit  : 0/0
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3066 ;;      Params:         0       0       0       0       0
  3067 ;;      Locals:         0       1       0       0       0
  3068 ;;      Temps:          0       0       0       0       0
  3069 ;;      Totals:         0       1       0       0       0
  3070 ;;Total ram usage:        1 bytes
  3071 ;; Hardware stack levels used:    1
  3072 ;; Hardware stack levels required when called:    3
  3073 ;; This function calls:
  3074 ;;		_eeprom_Save
  3075 ;; This function is called by:
  3076 ;;		_main
  3077 ;; This function uses a non-reentrant model
  3078 ;;
  3079                           
  3080                           
  3081                           ;psect for function _save_modalita_SW4
  3082  08D1                     _save_modalita_SW4:	
  3083                           
  3084                           ;incstack = 0
  3085                           ; Regs used in _save_modalita_SW4: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3086                           ;save_modalita_SW4@modalita stored from wreg
  3087  08D1  1283               	bcf	3,5	;RP0=0, select bank0
  3088  08D2  1303               	bcf	3,6	;RP1=0, select bank0
  3089  08D3  00A7               	movwf	save_modalita_SW4@modalita
  3090                           
  3091                           ;application.c: 258: if(modalita){
  3092  08D4  0827               	movf	save_modalita_SW4@modalita,w
  3093  08D5  1903               	btfsc	3,2
  3094  08D6  28DD               	goto	l2875
  3095                           
  3096                           ;application.c: 259: eepvar.P4_state = 1;
  3097  08D7  01D8               	clrf	_eepvar
  3098  08D8  0AD8               	incf	_eepvar,f
  3099                           
  3100                           ;application.c: 260: eeprom_Save();
  3101  08D9  120A  158A  22FA   	fcall	_eeprom_Save
  3102                           
  3103                           ;application.c: 261: }else{
  3104  08DC  0008               	return
  3105  08DD                     l2875:	
  3106                           
  3107                           ;application.c: 262: eepvar.P4_state = 0;
  3108  08DD  1283               	bcf	3,5	;RP0=0, select bank0
  3109  08DE  1303               	bcf	3,6	;RP1=0, select bank0
  3110  08DF  01D8               	clrf	_eepvar
  3111                           
  3112                           ;application.c: 263: eeprom_Save();
  3113  08E0  120A  158A  22FA   	fcall	_eeprom_Save
  3114  08E3  0008               	return
  3115  08E4                     __end_of_save_modalita_SW4:	
  3116                           
  3117                           	psect	text5
  3118  0AFA                     __ptext5:	
  3119 ;; *************** function _eeprom_Save *****************
  3120 ;; Defined at:
  3121 ;;		line 41 in file "saveEEPROM.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;		None
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  i               2    5[BANK0 ] unsigned int 
  3126 ;;  checksum        2    2[BANK0 ] unsigned int 
  3127 ;;  data            1    4[BANK0 ] unsigned char 
  3128 ;; Return value:  Size  Location     Type
  3129 ;;                  1    wreg      void 
  3130 ;; Registers used:
  3131 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3132 ;; Tracked objects:
  3133 ;;		On entry : 0/0
  3134 ;;		On exit  : 0/0
  3135 ;;		Unchanged: 0/0
  3136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3137 ;;      Params:         0       0       0       0       0
  3138 ;;      Locals:         0       5       0       0       0
  3139 ;;      Temps:          0       1       0       0       0
  3140 ;;      Totals:         0       6       0       0       0
  3141 ;;Total ram usage:        6 bytes
  3142 ;; Hardware stack levels used:    1
  3143 ;; Hardware stack levels required when called:    2
  3144 ;; This function calls:
  3145 ;;		_eeprom_write
  3146 ;; This function is called by:
  3147 ;;		_save_modalita_SW4
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           
  3152                           ;psect for function _eeprom_Save
  3153  0AFA                     _eeprom_Save:	
  3154                           
  3155                           ;saveEEPROM.c: 42: uint16_t i, checksum;
  3156                           ;saveEEPROM.c: 43: uint8_t data[sizeof(eepvar)];
  3157                           ;saveEEPROM.c: 44: checksum = 0;
  3158                           
  3159                           ;incstack = 0
  3160                           ; Regs used in _eeprom_Save: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3161  0AFA  1283               	bcf	3,5	;RP0=0, select bank0
  3162  0AFB  1303               	bcf	3,6	;RP1=0, select bank0
  3163  0AFC  01A2               	clrf	eeprom_Save@checksum
  3164  0AFD  01A3               	clrf	eeprom_Save@checksum+1
  3165                           
  3166                           ;saveEEPROM.c: 46: for(i = 0; i<sizeof(eepvar); i++){
  3167  0AFE  01A5               	clrf	eeprom_Save@i
  3168  0AFF  01A6               	clrf	eeprom_Save@i+1
  3169  0B00  0825               	movf	eeprom_Save@i,w
  3170  0B01  0426               	iorwf	eeprom_Save@i+1,w
  3171  0B02  1D03               	btfss	3,2
  3172  0B03  2B32               	goto	l2699
  3173  0B04                     l2691:	
  3174                           
  3175                           ;saveEEPROM.c: 47: data[i] = *((uint8_t*)(&eepvar) + i);
  3176  0B04  0825               	movf	eeprom_Save@i,w
  3177  0B05  3E58               	addlw	(low (_eepvar| 0))& (0+255)
  3178  0B06  0084               	movwf	4
  3179  0B07  1383               	bcf	3,7	;select IRP bank0
  3180  0B08  0800               	movf	0,w
  3181  0B09  00A1               	movwf	??_eeprom_Save
  3182  0B0A  0825               	movf	eeprom_Save@i,w
  3183  0B0B  3E24               	addlw	(low (eeprom_Save@data| 0))& (0+255)
  3184  0B0C  0084               	movwf	4
  3185  0B0D  0821               	movf	??_eeprom_Save,w
  3186  0B0E  0080               	movwf	0
  3187                           
  3188                           ;saveEEPROM.c: 48: checksum = checksum + data[i];
  3189  0B0F  0825               	movf	eeprom_Save@i,w
  3190  0B10  3E24               	addlw	(low (eeprom_Save@data| 0))& (0+255)
  3191  0B11  0084               	movwf	4
  3192  0B12  0800               	movf	0,w
  3193  0B13  0722               	addwf	eeprom_Save@checksum,w
  3194  0B14  00A2               	movwf	eeprom_Save@checksum
  3195  0B15  0823               	movf	eeprom_Save@checksum+1,w
  3196  0B16  1803               	skipnc
  3197  0B17  0A23               	incf	eeprom_Save@checksum+1,w
  3198  0B18  00A3               	movwf	eeprom_Save@checksum+1
  3199                           
  3200                           ;saveEEPROM.c: 49: eeprom_write(i, data[i]);
  3201  0B19  0825               	movf	eeprom_Save@i,w
  3202  0B1A  3E24               	addlw	(low (eeprom_Save@data| 0))& (0+255)
  3203  0B1B  0084               	movwf	4
  3204  0B1C  0800               	movf	0,w
  3205  0B1D  00A1               	movwf	??_eeprom_Save
  3206  0B1E  0821               	movf	??_eeprom_Save,w
  3207  0B1F  00F4               	movwf	eeprom_write@value
  3208  0B20  0825               	movf	eeprom_Save@i,w
  3209  0B21  120A  158A  21CC  120A  158A  	fcall	_eeprom_write
  3210  0B26  3001               	movlw	1
  3211  0B27  1283               	bcf	3,5	;RP0=0, select bank0
  3212  0B28  1303               	bcf	3,6	;RP1=0, select bank0
  3213  0B29  07A5               	addwf	eeprom_Save@i,f
  3214  0B2A  1803               	skipnc
  3215  0B2B  0AA6               	incf	eeprom_Save@i+1,f
  3216  0B2C  3000               	movlw	0
  3217  0B2D  07A6               	addwf	eeprom_Save@i+1,f
  3218  0B2E  0825               	movf	eeprom_Save@i,w
  3219  0B2F  0426               	iorwf	eeprom_Save@i+1,w
  3220  0B30  1903               	btfsc	3,2
  3221  0B31  2B04               	goto	l2691
  3222  0B32                     l2699:	
  3223                           
  3224                           ;saveEEPROM.c: 50: }
  3225                           ;saveEEPROM.c: 52: conv16to8.a = checksum;
  3226  0B32  0823               	movf	eeprom_Save@checksum+1,w
  3227  0B33  00D7               	movwf	_conv16to8+1
  3228  0B34  0822               	movf	eeprom_Save@checksum,w
  3229  0B35  00D6               	movwf	_conv16to8
  3230                           
  3231                           ;saveEEPROM.c: 53: eeprom_write(sizeof(eepvar), conv16to8.bytes[1]);
  3232  0B36  0857               	movf	_conv16to8+1,w
  3233  0B37  00A1               	movwf	??_eeprom_Save
  3234  0B38  0821               	movf	??_eeprom_Save,w
  3235  0B39  00F4               	movwf	eeprom_write@value
  3236  0B3A  3001               	movlw	1
  3237  0B3B  120A  158A  21CC  120A  158A  	fcall	_eeprom_write
  3238                           
  3239                           ;saveEEPROM.c: 54: eeprom_write(sizeof(eepvar) + 1, conv16to8.bytes[0]);
  3240  0B40  1283               	bcf	3,5	;RP0=0, select bank0
  3241  0B41  1303               	bcf	3,6	;RP1=0, select bank0
  3242  0B42  0856               	movf	_conv16to8,w
  3243  0B43  00A1               	movwf	??_eeprom_Save
  3244  0B44  0821               	movf	??_eeprom_Save,w
  3245  0B45  00F4               	movwf	eeprom_write@value
  3246  0B46  3002               	movlw	2
  3247  0B47  120A  158A  21CC   	fcall	_eeprom_write
  3248  0B4A  0008               	return
  3249  0B4B                     __end_of_eeprom_Save:	
  3250                           
  3251                           	psect	text6
  3252  09CC                     __ptext6:	
  3253 ;; *************** function _eeprom_write *****************
  3254 ;; Defined at:
  3255 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\pic\eewrite.c"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;  addr            1    wreg     unsigned char 
  3258 ;;  value           1    4[COMMON] unsigned char 
  3259 ;; Auto vars:     Size  Location     Type
  3260 ;;  addr            1    0[BANK0 ] unsigned char 
  3261 ;; Return value:  Size  Location     Type
  3262 ;;                  1    wreg      void 
  3263 ;; Registers used:
  3264 ;;		wreg, status,2, status,0
  3265 ;; Tracked objects:
  3266 ;;		On entry : 0/0
  3267 ;;		On exit  : 0/0
  3268 ;;		Unchanged: 0/0
  3269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3270 ;;      Params:         1       0       0       0       0
  3271 ;;      Locals:         0       1       0       0       0
  3272 ;;      Temps:          1       0       0       0       0
  3273 ;;      Totals:         2       1       0       0       0
  3274 ;;Total ram usage:        3 bytes
  3275 ;; Hardware stack levels used:    1
  3276 ;; Hardware stack levels required when called:    1
  3277 ;; This function calls:
  3278 ;;		Nothing
  3279 ;; This function is called by:
  3280 ;;		_eeprom_Save
  3281 ;; This function uses a non-reentrant model
  3282 ;;
  3283                           
  3284                           
  3285                           ;psect for function _eeprom_write
  3286  09CC                     _eeprom_write:	
  3287                           
  3288                           ;incstack = 0
  3289                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  3290                           ;eeprom_write@addr stored from wreg
  3291  09CC  1283               	bcf	3,5	;RP0=0, select bank0
  3292  09CD  1303               	bcf	3,6	;RP1=0, select bank0
  3293  09CE  00A0               	movwf	eeprom_write@addr
  3294  09CF                     l379:	
  3295  09CF  1683               	bsf	3,5	;RP0=1, select bank3
  3296  09D0  1703               	bsf	3,6	;RP1=1, select bank3
  3297  09D1  188C               	btfsc	12,1	;volsfr
  3298  09D2  29CF               	goto	l379
  3299  09D3  1283               	bcf	3,5	;RP0=0, select bank0
  3300  09D4  1303               	bcf	3,6	;RP1=0, select bank0
  3301  09D5  0820               	movf	eeprom_write@addr,w
  3302  09D6  1283               	bcf	3,5	;RP0=0, select bank2
  3303  09D7  1703               	bsf	3,6	;RP1=1, select bank2
  3304  09D8  008D               	movwf	13	;volatile
  3305  09D9  0874               	movf	eeprom_write@value,w
  3306  09DA  008C               	movwf	12	;volatile
  3307  09DB  303F               	movlw	63
  3308  09DC  00F5               	movwf	??_eeprom_write
  3309  09DD  0875               	movf	??_eeprom_write,w
  3310  09DE  1683               	bsf	3,5	;RP0=1, select bank3
  3311  09DF  1703               	bsf	3,6	;RP1=1, select bank3
  3312  09E0  058C               	andwf	12,f	;volsfr
  3313  09E1  1283               	bcf	3,5	;RP0=0, select bank0
  3314  09E2  1303               	bcf	3,6	;RP1=0, select bank0
  3315  09E3  1003               	bcf	3,0	;volatile
  3316  09E4  1B8B               	btfsc	11,7	;volatile
  3317  09E5  1403               	bsf	3,0	;volatile
  3318  09E6  138B               	bcf	11,7	;volatile
  3319  09E7  1683               	bsf	3,5	;RP0=1, select bank3
  3320  09E8  1703               	bsf	3,6	;RP1=1, select bank3
  3321  09E9  150C               	bsf	12,2	;volsfr
  3322  09EA  3055               	movlw	85
  3323  09EB  008D               	movwf	13	;volsfr
  3324  09EC  30AA               	movlw	170
  3325  09ED  008D               	movwf	13	;volsfr
  3326  09EE  148C               	bsf	12,1	;volsfr
  3327  09EF  110C               	bcf	12,2	;volsfr
  3328  09F0  1283               	bcf	3,5	;RP0=0, select bank0
  3329  09F1  1303               	bcf	3,6	;RP1=0, select bank0
  3330  09F2  1C03               	btfss	3,0	;volatile
  3331  09F3  0008               	return
  3332  09F4  178B               	bsf	11,7	;volatile
  3333  09F5  0008               	return
  3334  09F6                     __end_of_eeprom_write:	
  3335                           
  3336                           	psect	text7
  3337  07F4                     __ptext7:	
  3338 ;; *************** function _read_modalita_SW4 *****************
  3339 ;; Defined at:
  3340 ;;		line 251 in file "application.c"
  3341 ;; Parameters:    Size  Location     Type
  3342 ;;		None
  3343 ;; Auto vars:     Size  Location     Type
  3344 ;;		None
  3345 ;; Return value:  Size  Location     Type
  3346 ;;                  1    wreg      void 
  3347 ;; Registers used:
  3348 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3349 ;; Tracked objects:
  3350 ;;		On entry : 0/0
  3351 ;;		On exit  : 0/0
  3352 ;;		Unchanged: 0/0
  3353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3354 ;;      Params:         0       0       0       0       0
  3355 ;;      Locals:         0       0       0       0       0
  3356 ;;      Temps:          0       0       0       0       0
  3357 ;;      Totals:         0       0       0       0       0
  3358 ;;Total ram usage:        0 bytes
  3359 ;; Hardware stack levels used:    1
  3360 ;; Hardware stack levels required when called:    3
  3361 ;; This function calls:
  3362 ;;		_eeprom_Load
  3363 ;; This function is called by:
  3364 ;;		_main
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           
  3369                           ;psect for function _read_modalita_SW4
  3370  07F4                     _read_modalita_SW4:	
  3371                           
  3372                           ;application.c: 252: if(eeprom_Load()==0){
  3373                           
  3374                           ;incstack = 0
  3375                           ; Regs used in _read_modalita_SW4: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3376  07F4  120A  118A  2785  120A  118A  	fcall	_eeprom_Load
  3377  07F9  3A00               	xorlw	0
  3378  07FA  1D03               	skipz
  3379  07FB  0008               	return
  3380                           
  3381                           ;application.c: 254: eepvar.P4_state = 0;
  3382  07FC  1283               	bcf	3,5	;RP0=0, select bank0
  3383  07FD  1303               	bcf	3,6	;RP1=0, select bank0
  3384  07FE  01D8               	clrf	_eepvar
  3385  07FF  0008               	return
  3386  0800                     __end_of_read_modalita_SW4:	
  3387                           
  3388                           	psect	text8
  3389  0785                     __ptext8:	
  3390 ;; *************** function _eeprom_Load *****************
  3391 ;; Defined at:
  3392 ;;		line 18 in file "saveEEPROM.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;		None
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;  i               2    4[BANK0 ] unsigned int 
  3397 ;;  checksum        2    1[BANK0 ] unsigned int 
  3398 ;;  data            1    3[BANK0 ] unsigned char 
  3399 ;; Return value:  Size  Location     Type
  3400 ;;                  1    wreg      unsigned char 
  3401 ;; Registers used:
  3402 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3403 ;; Tracked objects:
  3404 ;;		On entry : 0/0
  3405 ;;		On exit  : 0/0
  3406 ;;		Unchanged: 0/0
  3407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3408 ;;      Params:         0       0       0       0       0
  3409 ;;      Locals:         0       5       0       0       0
  3410 ;;      Temps:          0       1       0       0       0
  3411 ;;      Totals:         0       6       0       0       0
  3412 ;;Total ram usage:        6 bytes
  3413 ;; Hardware stack levels used:    1
  3414 ;; Hardware stack levels required when called:    2
  3415 ;; This function calls:
  3416 ;;		_eeprom_read
  3417 ;; This function is called by:
  3418 ;;		_read_modalita_SW4
  3419 ;; This function uses a non-reentrant model
  3420 ;;
  3421                           
  3422                           
  3423                           ;psect for function _eeprom_Load
  3424  0785                     _eeprom_Load:	
  3425                           
  3426                           ;saveEEPROM.c: 20: uint16_t i, checksum;
  3427                           ;saveEEPROM.c: 21: uint8_t data[sizeof(eepvar)];
  3428                           ;saveEEPROM.c: 22: checksum = 0;
  3429                           
  3430                           ;incstack = 0
  3431                           ; Regs used in _eeprom_Load: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3432  0785  1283               	bcf	3,5	;RP0=0, select bank0
  3433  0786  1303               	bcf	3,6	;RP1=0, select bank0
  3434  0787  01A1               	clrf	eeprom_Load@checksum
  3435  0788  01A2               	clrf	eeprom_Load@checksum+1
  3436                           
  3437                           ;saveEEPROM.c: 24: for(i = 0; i<sizeof(eepvar); i++){
  3438  0789  01A4               	clrf	eeprom_Load@i
  3439  078A  01A5               	clrf	eeprom_Load@i+1
  3440  078B  0824               	movf	eeprom_Load@i,w
  3441  078C  0425               	iorwf	eeprom_Load@i+1,w
  3442  078D  1D03               	btfss	3,2
  3443  078E  2FB7               	goto	l2661
  3444  078F                     l2651:	
  3445                           
  3446                           ;saveEEPROM.c: 25: *((uint8_t*)(&eepvar) + i) = 0;
  3447  078F  0824               	movf	eeprom_Load@i,w
  3448  0790  3E58               	addlw	(low (_eepvar| 0))& (0+255)
  3449  0791  0084               	movwf	4
  3450  0792  1383               	bcf	3,7	;select IRP bank0
  3451  0793  0180               	clrf	0
  3452                           
  3453                           ;saveEEPROM.c: 26: data[i] = eeprom_read(i);
  3454  0794  0824               	movf	eeprom_Load@i,w
  3455  0795  120A  158A  2143  120A  118A  	fcall	_eeprom_read
  3456  079A  1283               	bcf	3,5	;RP0=0, select bank0
  3457  079B  1303               	bcf	3,6	;RP1=0, select bank0
  3458  079C  00A0               	movwf	??_eeprom_Load
  3459  079D  0824               	movf	eeprom_Load@i,w
  3460  079E  3E23               	addlw	(low (eeprom_Load@data| 0))& (0+255)
  3461  079F  0084               	movwf	4
  3462  07A0  0820               	movf	??_eeprom_Load,w
  3463  07A1  1383               	bcf	3,7	;select IRP bank0
  3464  07A2  0080               	movwf	0
  3465                           
  3466                           ;saveEEPROM.c: 27: checksum = checksum + data[i];
  3467  07A3  0824               	movf	eeprom_Load@i,w
  3468  07A4  3E23               	addlw	(low (eeprom_Load@data| 0))& (0+255)
  3469  07A5  0084               	movwf	4
  3470  07A6  0800               	movf	0,w
  3471  07A7  0721               	addwf	eeprom_Load@checksum,w
  3472  07A8  00A1               	movwf	eeprom_Load@checksum
  3473  07A9  0822               	movf	eeprom_Load@checksum+1,w
  3474  07AA  1803               	skipnc
  3475  07AB  0A22               	incf	eeprom_Load@checksum+1,w
  3476  07AC  00A2               	movwf	eeprom_Load@checksum+1
  3477  07AD  3001               	movlw	1
  3478  07AE  07A4               	addwf	eeprom_Load@i,f
  3479  07AF  1803               	skipnc
  3480  07B0  0AA5               	incf	eeprom_Load@i+1,f
  3481  07B1  3000               	movlw	0
  3482  07B2  07A5               	addwf	eeprom_Load@i+1,f
  3483  07B3  0824               	movf	eeprom_Load@i,w
  3484  07B4  0425               	iorwf	eeprom_Load@i+1,w
  3485  07B5  1903               	btfsc	3,2
  3486  07B6  2F8F               	goto	l2651
  3487  07B7                     l2661:	
  3488                           
  3489                           ;saveEEPROM.c: 28: }
  3490                           ;saveEEPROM.c: 29: conv16to8.bytes[1] = eeprom_read(sizeof(eepvar));
  3491  07B7  3001               	movlw	1
  3492  07B8  120A  158A  2143  120A  118A  	fcall	_eeprom_read
  3493  07BD  1283               	bcf	3,5	;RP0=0, select bank0
  3494  07BE  1303               	bcf	3,6	;RP1=0, select bank0
  3495  07BF  00A0               	movwf	??_eeprom_Load
  3496  07C0  0820               	movf	??_eeprom_Load,w
  3497  07C1  00D7               	movwf	_conv16to8+1
  3498                           
  3499                           ;saveEEPROM.c: 30: conv16to8.bytes[0] = eeprom_read(sizeof(eepvar) + 1);
  3500  07C2  3002               	movlw	2
  3501  07C3  120A  158A  2143  120A  118A  	fcall	_eeprom_read
  3502  07C8  1283               	bcf	3,5	;RP0=0, select bank0
  3503  07C9  1303               	bcf	3,6	;RP1=0, select bank0
  3504  07CA  00A0               	movwf	??_eeprom_Load
  3505  07CB  0820               	movf	??_eeprom_Load,w
  3506  07CC  00D6               	movwf	_conv16to8
  3507                           
  3508                           ;saveEEPROM.c: 32: if(conv16to8.a == checksum){
  3509  07CD  0822               	movf	eeprom_Load@checksum+1,w
  3510  07CE  0657               	xorwf	_conv16to8+1,w
  3511  07CF  1D03               	skipz
  3512  07D0  2FD3               	goto	u3395
  3513  07D1  0821               	movf	eeprom_Load@checksum,w
  3514  07D2  0656               	xorwf	_conv16to8,w
  3515  07D3                     u3395:	
  3516  07D3  1D03               	skipz
  3517  07D4  2FF2               	goto	l2681
  3518                           
  3519                           ;saveEEPROM.c: 33: for(i = 0; i<sizeof(eepvar); i++){
  3520  07D5  01A4               	clrf	eeprom_Load@i
  3521  07D6  01A5               	clrf	eeprom_Load@i+1
  3522  07D7  0824               	movf	eeprom_Load@i,w
  3523  07D8  0425               	iorwf	eeprom_Load@i+1,w
  3524  07D9  1D03               	btfss	3,2
  3525  07DA  2FF0               	goto	l2677
  3526  07DB                     l2671:	
  3527                           
  3528                           ;saveEEPROM.c: 34: *((uint8_t*)(&eepvar) + i) = data[i];
  3529  07DB  0824               	movf	eeprom_Load@i,w
  3530  07DC  3E23               	addlw	(low (eeprom_Load@data| 0))& (0+255)
  3531  07DD  0084               	movwf	4
  3532  07DE  1383               	bcf	3,7	;select IRP bank0
  3533  07DF  0800               	movf	0,w
  3534  07E0  00A0               	movwf	??_eeprom_Load
  3535  07E1  0824               	movf	eeprom_Load@i,w
  3536  07E2  3E58               	addlw	(low (_eepvar| 0))& (0+255)
  3537  07E3  0084               	movwf	4
  3538  07E4  0820               	movf	??_eeprom_Load,w
  3539  07E5  0080               	movwf	0
  3540  07E6  3001               	movlw	1
  3541  07E7  07A4               	addwf	eeprom_Load@i,f
  3542  07E8  1803               	skipnc
  3543  07E9  0AA5               	incf	eeprom_Load@i+1,f
  3544  07EA  3000               	movlw	0
  3545  07EB  07A5               	addwf	eeprom_Load@i+1,f
  3546  07EC  0824               	movf	eeprom_Load@i,w
  3547  07ED  0425               	iorwf	eeprom_Load@i+1,w
  3548  07EE  1903               	btfsc	3,2
  3549  07EF  2FDB               	goto	l2671
  3550  07F0                     l2677:	
  3551                           
  3552                           ;saveEEPROM.c: 35: }
  3553                           ;saveEEPROM.c: 36: return 1;
  3554  07F0  3001               	movlw	1
  3555  07F1  0008               	return
  3556  07F2                     l2681:	
  3557                           
  3558                           ;saveEEPROM.c: 37: }
  3559                           ;saveEEPROM.c: 38: return 0;
  3560  07F2  3000               	movlw	0
  3561  07F3  0008               	return
  3562  07F4                     __end_of_eeprom_Load:	
  3563                           
  3564                           	psect	text9
  3565  0943                     __ptext9:	
  3566 ;; *************** function _eeprom_read *****************
  3567 ;; Defined at:
  3568 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\pic\eeread.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;  addr            1    wreg     unsigned char 
  3571 ;; Auto vars:     Size  Location     Type
  3572 ;;  addr            1    5[COMMON] unsigned char 
  3573 ;; Return value:  Size  Location     Type
  3574 ;;                  1    wreg      unsigned char 
  3575 ;; Registers used:
  3576 ;;		wreg, status,2, status,0
  3577 ;; Tracked objects:
  3578 ;;		On entry : 0/0
  3579 ;;		On exit  : 0/0
  3580 ;;		Unchanged: 0/0
  3581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3582 ;;      Params:         0       0       0       0       0
  3583 ;;      Locals:         1       0       0       0       0
  3584 ;;      Temps:          1       0       0       0       0
  3585 ;;      Totals:         2       0       0       0       0
  3586 ;;Total ram usage:        2 bytes
  3587 ;; Hardware stack levels used:    1
  3588 ;; Hardware stack levels required when called:    1
  3589 ;; This function calls:
  3590 ;;		Nothing
  3591 ;; This function is called by:
  3592 ;;		_eeprom_Load
  3593 ;; This function uses a non-reentrant model
  3594 ;;
  3595                           
  3596                           
  3597                           ;psect for function _eeprom_read
  3598  0943                     _eeprom_read:	
  3599                           
  3600                           ;incstack = 0
  3601                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  3602                           ;eeprom_read@addr stored from wreg
  3603  0943  00F5               	movwf	eeprom_read@addr
  3604  0944                     l357:	
  3605  0944  0064               	clrwdt	;# 
  3606  0945  1683               	bsf	3,5	;RP0=1, select bank3
  3607  0946  1703               	bsf	3,6	;RP1=1, select bank3
  3608  0947  188C               	btfsc	12,1	;volsfr
  3609  0948  2944               	goto	l357
  3610  0949  0875               	movf	eeprom_read@addr,w
  3611  094A  1283               	bcf	3,5	;RP0=0, select bank2
  3612  094B  1703               	bsf	3,6	;RP1=1, select bank2
  3613  094C  008D               	movwf	13	;volatile
  3614  094D  303F               	movlw	63
  3615  094E  00F4               	movwf	??_eeprom_read
  3616  094F  0874               	movf	??_eeprom_read,w
  3617  0950  1683               	bsf	3,5	;RP0=1, select bank3
  3618  0951  1703               	bsf	3,6	;RP1=1, select bank3
  3619  0952  058C               	andwf	12,f	;volsfr
  3620  0953  140C               	bsf	12,0	;volsfr
  3621  0954  1003               	clrc
  3622  0955  180C               	btfsc	12,0	;volsfr
  3623  0956  1403               	setc
  3624  0957  3000               	movlw	0
  3625  0958  1803               	skipnc
  3626  0959  3001               	movlw	1
  3627  095A  1283               	bcf	3,5	;RP0=0, select bank2
  3628  095B  1703               	bsf	3,6	;RP1=1, select bank2
  3629  095C  080C               	movf	12,w	;volatile
  3630  095D  0008               	return
  3631  095E                     __end_of_eeprom_read:	
  3632                           
  3633                           	psect	text10
  3634  0928                     __ptext10:	
  3635 ;; *************** function _pulsanti_alldebounce_task *****************
  3636 ;; Defined at:
  3637 ;;		line 22 in file "switch.c"
  3638 ;; Parameters:    Size  Location     Type
  3639 ;;  switchs         1    wreg     PTR PTR struct SWITCH
  3640 ;;		 -> pulsanti(4), 
  3641 ;;  size            1   15[BANK0 ] unsigned char 
  3642 ;; Auto vars:     Size  Location     Type
  3643 ;;  switchs         1   16[BANK0 ] PTR PTR struct SWITCH
  3644 ;;		 -> pulsanti(4), 
  3645 ;;  i               1   17[BANK0 ] unsigned char 
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  1    wreg      void 
  3648 ;; Registers used:
  3649 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3655 ;;      Params:         0       1       0       0       0
  3656 ;;      Locals:         0       2       0       0       0
  3657 ;;      Temps:          1       0       0       0       0
  3658 ;;      Totals:         1       3       0       0       0
  3659 ;;Total ram usage:        4 bytes
  3660 ;; Hardware stack levels used:    1
  3661 ;; Hardware stack levels required when called:    3
  3662 ;; This function calls:
  3663 ;;		_pulsante_debounce
  3664 ;; This function is called by:
  3665 ;;		_main
  3666 ;; This function uses a non-reentrant model
  3667 ;;
  3668                           
  3669                           
  3670                           ;psect for function _pulsanti_alldebounce_task
  3671  0928                     _pulsanti_alldebounce_task:	
  3672                           
  3673                           ;incstack = 0
  3674                           ; Regs used in _pulsanti_alldebounce_task: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3675                           ;pulsanti_alldebounce_task@switchs stored from wreg
  3676  0928  1283               	bcf	3,5	;RP0=0, select bank0
  3677  0929  1303               	bcf	3,6	;RP1=0, select bank0
  3678  092A  00B0               	movwf	pulsanti_alldebounce_task@switchs
  3679                           
  3680                           ;switch.c: 23: uint8_t i;
  3681                           ;switch.c: 25: for(i=0;i<size; i++){
  3682  092B  01B1               	clrf	pulsanti_alldebounce_task@i
  3683  092C                     l2831:	
  3684  092C  082F               	movf	pulsanti_alldebounce_task@size,w
  3685  092D  0231               	subwf	pulsanti_alldebounce_task@i,w
  3686  092E  1803               	btfsc	3,0
  3687  092F  0008               	return
  3688                           
  3689                           ;switch.c: 27: pulsante_debounce(switchs[i]);
  3690  0930  0831               	movf	pulsanti_alldebounce_task@i,w
  3691  0931  0730               	addwf	pulsanti_alldebounce_task@switchs,w
  3692  0932  00F4               	movwf	??_pulsanti_alldebounce_task
  3693  0933  0874               	movf	??_pulsanti_alldebounce_task,w
  3694  0934  0084               	movwf	4
  3695  0935  1383               	bcf	3,7	;select IRP bank0
  3696  0936  0800               	movf	0,w
  3697  0937  120A  118A  250A  120A  158A  	fcall	_pulsante_debounce
  3698  093C  3001               	movlw	1
  3699  093D  00F4               	movwf	??_pulsanti_alldebounce_task
  3700  093E  0874               	movf	??_pulsanti_alldebounce_task,w
  3701  093F  1283               	bcf	3,5	;RP0=0, select bank0
  3702  0940  1303               	bcf	3,6	;RP1=0, select bank0
  3703  0941  07B1               	addwf	pulsanti_alldebounce_task@i,f
  3704  0942  292C               	goto	l2831
  3705  0943                     __end_of_pulsanti_alldebounce_task:	
  3706                           
  3707                           	psect	text11
  3708  050A                     __ptext11:	
  3709 ;; *************** function _pulsante_debounce *****************
  3710 ;; Defined at:
  3711 ;;		line 32 in file "switch.c"
  3712 ;; Parameters:    Size  Location     Type
  3713 ;;  p               1    wreg     PTR struct SWITCH
  3714 ;;		 -> P4_GIALLO(19), P3_BLU(19), P2_BLU(19), P1_ROSSO(19), 
  3715 ;; Auto vars:     Size  Location     Type
  3716 ;;  p               1   14[BANK0 ] PTR struct SWITCH
  3717 ;;		 -> P4_GIALLO(19), P3_BLU(19), P2_BLU(19), P1_ROSSO(19), 
  3718 ;;  value           1   13[BANK0 ] unsigned char 
  3719 ;;  pinmask         1   12[BANK0 ] unsigned char 
  3720 ;; Return value:  Size  Location     Type
  3721 ;;                  1    wreg      void 
  3722 ;; Registers used:
  3723 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3724 ;; Tracked objects:
  3725 ;;		On entry : 0/0
  3726 ;;		On exit  : 0/0
  3727 ;;		Unchanged: 0/0
  3728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3729 ;;      Params:         0       0       0       0       0
  3730 ;;      Locals:         0       3       0       0       0
  3731 ;;      Temps:          0       4       0       0       0
  3732 ;;      Totals:         0       7       0       0       0
  3733 ;;Total ram usage:        7 bytes
  3734 ;; Hardware stack levels used:    1
  3735 ;; Hardware stack levels required when called:    2
  3736 ;; This function calls:
  3737 ;;		_millis
  3738 ;; This function is called by:
  3739 ;;		_pulsanti_alldebounce_task
  3740 ;; This function uses a non-reentrant model
  3741 ;;
  3742                           
  3743                           
  3744                           ;psect for function _pulsante_debounce
  3745  050A                     _pulsante_debounce:	
  3746                           
  3747                           ;incstack = 0
  3748                           ; Regs used in _pulsante_debounce: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3749                           ;pulsante_debounce@p stored from wreg
  3750  050A  1283               	bcf	3,5	;RP0=0, select bank0
  3751  050B  1303               	bcf	3,6	;RP1=0, select bank0
  3752  050C  00AE               	movwf	pulsante_debounce@p
  3753                           
  3754                           ;switch.c: 34: uint8_t value, pinmask;
  3755                           ;switch.c: 35: pinmask = (1<<p->pin);
  3756  050D  3001               	movlw	1
  3757  050E  00A8               	movwf	??_pulsante_debounce
  3758  050F  082E               	movf	pulsante_debounce@p,w
  3759  0510  3E02               	addlw	2
  3760  0511  0084               	movwf	4
  3761  0512  1783               	bsf	3,7	;select IRP bank2
  3762  0513  0A00               	incf	0,w
  3763  0514  2D17               	goto	u3314
  3764  0515                     u3315:	
  3765  0515  1003               	clrc
  3766  0516  0DA8               	rlf	??_pulsante_debounce,f
  3767  0517                     u3314:	
  3768  0517  3EFF               	addlw	-1
  3769  0518  1D03               	skipz
  3770  0519  2D15               	goto	u3315
  3771  051A  0828               	movf	??_pulsante_debounce,w
  3772  051B  00A9               	movwf	??_pulsante_debounce+1
  3773  051C  0829               	movf	??_pulsante_debounce+1,w
  3774  051D  00AC               	movwf	pulsante_debounce@pinmask
  3775                           
  3776                           ;switch.c: 36: value = *p->port & pinmask;
  3777  051E  082E               	movf	pulsante_debounce@p,w
  3778  051F  0084               	movwf	4
  3779  0520  0800               	movf	0,w
  3780  0521  00A8               	movwf	??_pulsante_debounce
  3781  0522  0A84               	incf	4,f
  3782  0523  0800               	movf	0,w
  3783  0524  00A9               	movwf	??_pulsante_debounce+1
  3784  0525  0828               	movf	??_pulsante_debounce,w
  3785  0526  0084               	movwf	4
  3786  0527  1783               	bsf	3,7
  3787  0528  1C29               	btfss	??_pulsante_debounce+1,0
  3788  0529  1383               	bcf	3,7
  3789  052A  0800               	movf	0,w
  3790  052B  052C               	andwf	pulsante_debounce@pinmask,w
  3791  052C  00AA               	movwf	??_pulsante_debounce+2
  3792  052D  082A               	movf	??_pulsante_debounce+2,w
  3793  052E  00AD               	movwf	pulsante_debounce@value
  3794                           
  3795                           ;switch.c: 38: switch(p->state_debounce){
  3796  052F  2DD6               	goto	l2635
  3797  0530                     l2609:	
  3798                           ;switch.c: 39: case 0:
  3799                           
  3800                           
  3801                           ;switch.c: 40: if(value != p->laststato){
  3802  0530  082E               	movf	pulsante_debounce@p,w
  3803  0531  3E08               	addlw	8
  3804  0532  0084               	movwf	4
  3805  0533  1783               	bsf	3,7	;select IRP bank2
  3806  0534  0800               	movf	0,w
  3807  0535  062D               	xorwf	pulsante_debounce@value,w
  3808  0536  1903               	skipnz
  3809  0537  0008               	return
  3810                           
  3811                           ;switch.c: 42: p->timewaitdebounce = millis();
  3812  0538  120A  158A  20E4   	fcall	_millis
  3813  053B  1283               	bcf	3,5	;RP0=0, select bank0
  3814  053C  1303               	bcf	3,6	;RP1=0, select bank0
  3815  053D  082E               	movf	pulsante_debounce@p,w
  3816  053E  3E04               	addlw	4
  3817  053F  0084               	movwf	4
  3818  0540  0820               	movf	?_millis,w
  3819  0541  1783               	bsf	3,7	;select IRP bank2
  3820  0542  0080               	movwf	0
  3821  0543  0A84               	incf	4,f
  3822  0544  0821               	movf	?_millis+1,w
  3823  0545  0080               	movwf	0
  3824  0546  0A84               	incf	4,f
  3825  0547  0822               	movf	?_millis+2,w
  3826  0548  0080               	movwf	0
  3827  0549  0A84               	incf	4,f
  3828  054A  0823               	movf	?_millis+3,w
  3829  054B  0080               	movwf	0
  3830                           
  3831                           ;switch.c: 43: p->state_debounce = 1;
  3832  054C  082E               	movf	pulsante_debounce@p,w
  3833  054D  3E03               	addlw	3
  3834  054E  0084               	movwf	4
  3835  054F  0180               	clrf	0
  3836  0550  0A80               	incf	0,f
  3837                           
  3838                           ;switch.c: 45: }
  3839                           ;switch.c: 46: break;
  3840  0551  0008               	return
  3841  0552                     l2615:	
  3842                           ;switch.c: 47: case 1:
  3843                           
  3844                           
  3845                           ;switch.c: 48: if((millis() - p->timewaitdebounce)>=30){
  3846  0552  082E               	movf	pulsante_debounce@p,w
  3847  0553  3E04               	addlw	4
  3848  0554  0084               	movwf	4
  3849  0555  0800               	movf	0,w
  3850  0556  00A8               	movwf	??_pulsante_debounce
  3851  0557  0A84               	incf	4,f
  3852  0558  0800               	movf	0,w
  3853  0559  00A9               	movwf	??_pulsante_debounce+1
  3854  055A  0A84               	incf	4,f
  3855  055B  0800               	movf	0,w
  3856  055C  00AA               	movwf	??_pulsante_debounce+2
  3857  055D  0A84               	incf	4,f
  3858  055E  0800               	movf	0,w
  3859  055F  00AB               	movwf	??_pulsante_debounce+3
  3860  0560  09A8               	comf	??_pulsante_debounce,f
  3861  0561  09A9               	comf	??_pulsante_debounce+1,f
  3862  0562  09AA               	comf	??_pulsante_debounce+2,f
  3863  0563  09AB               	comf	??_pulsante_debounce+3,f
  3864  0564  0AA8               	incf	??_pulsante_debounce,f
  3865  0565  1903               	skipnz
  3866  0566  0AA9               	incf	??_pulsante_debounce+1,f
  3867  0567  1903               	skipnz
  3868  0568  0AAA               	incf	??_pulsante_debounce+2,f
  3869  0569  1903               	skipnz
  3870  056A  0AAB               	incf	??_pulsante_debounce+3,f
  3871  056B  120A  158A  20E4  120A  118A  	fcall	_millis
  3872  0570  1283               	bcf	3,5	;RP0=0, select bank0
  3873  0571  1303               	bcf	3,6	;RP1=0, select bank0
  3874  0572  0820               	movf	?_millis,w
  3875  0573  07A8               	addwf	??_pulsante_debounce,f
  3876  0574  0821               	movf	?_millis+1,w
  3877  0575  1803               	skipnc
  3878  0576  0F21               	incfsz	?_millis+1,w
  3879  0577  2D79               	goto	u3330
  3880  0578  2D7A               	goto	u3331
  3881  0579                     u3330:	
  3882  0579  07A9               	addwf	??_pulsante_debounce+1,f
  3883  057A                     u3331:	
  3884  057A  0822               	movf	?_millis+2,w
  3885  057B  1803               	skipnc
  3886  057C  0F22               	incfsz	?_millis+2,w
  3887  057D  2D7F               	goto	u3332
  3888  057E  2D80               	goto	u3333
  3889  057F                     u3332:	
  3890  057F  07AA               	addwf	??_pulsante_debounce+2,f
  3891  0580                     u3333:	
  3892  0580  0823               	movf	?_millis+3,w
  3893  0581  1803               	skipnc
  3894  0582  0A23               	incf	?_millis+3,w
  3895  0583  07AB               	addwf	??_pulsante_debounce+3,f
  3896  0584  082B               	movf	??_pulsante_debounce+3,w
  3897  0585  1D03               	btfss	3,2
  3898  0586  2D93               	goto	l2617
  3899  0587  082A               	movf	??_pulsante_debounce+2,w
  3900  0588  1D03               	btfss	3,2
  3901  0589  2D93               	goto	l2617
  3902  058A  0829               	movf	??_pulsante_debounce+1,w
  3903  058B  1D03               	btfss	3,2
  3904  058C  2D93               	goto	l2617
  3905  058D  301E               	movlw	30
  3906  058E  0228               	subwf	??_pulsante_debounce,w
  3907  058F  1D03               	skipz
  3908  0590  2D91               	goto	u3343
  3909  0591                     u3343:	
  3910  0591  1C03               	btfss	3,0
  3911  0592  0008               	return
  3912  0593                     l2617:	
  3913                           
  3914                           ;switch.c: 49: if(value != p->laststato){
  3915  0593  082E               	movf	pulsante_debounce@p,w
  3916  0594  3E08               	addlw	8
  3917  0595  0084               	movwf	4
  3918  0596  1783               	bsf	3,7	;select IRP bank2
  3919  0597  0800               	movf	0,w
  3920  0598  062D               	xorwf	pulsante_debounce@value,w
  3921  0599  1903               	skipnz
  3922  059A  2DD1               	goto	l2631
  3923                           
  3924                           ;switch.c: 50: p->laststato = value;
  3925  059B  082D               	movf	pulsante_debounce@value,w
  3926  059C  00A8               	movwf	??_pulsante_debounce
  3927  059D  082E               	movf	pulsante_debounce@p,w
  3928  059E  3E08               	addlw	8
  3929  059F  0084               	movwf	4
  3930  05A0  0828               	movf	??_pulsante_debounce,w
  3931  05A1  0080               	movwf	0
  3932                           
  3933                           ;switch.c: 52: p->changeState = 1;
  3934  05A2  082E               	movf	pulsante_debounce@p,w
  3935  05A3  3E09               	addlw	9
  3936  05A4  0084               	movwf	4
  3937  05A5  0180               	clrf	0
  3938  05A6  0A80               	incf	0,f
  3939                           
  3940                           ;switch.c: 53: if(value){
  3941  05A7  082D               	movf	pulsante_debounce@value,w
  3942  05A8  1903               	btfsc	3,2
  3943  05A9  2DB9               	goto	l2627
  3944                           
  3945                           ;switch.c: 54: p->State = 1;
  3946  05AA  082E               	movf	pulsante_debounce@p,w
  3947  05AB  3E0A               	addlw	10
  3948  05AC  0084               	movwf	4
  3949  05AD  0180               	clrf	0
  3950  05AE  0A80               	incf	0,f
  3951                           
  3952                           ;switch.c: 55: p->time_ONstate = millis();
  3953  05AF  120A  158A  20E4  120A  118A  	fcall	_millis
  3954  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  3955  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  3956  05B6  082E               	movf	pulsante_debounce@p,w
  3957  05B7  3E0B               	addlw	11
  3958  05B8  2DC4               	goto	L3
  3959  05B9                     l2627:	
  3960                           ;switch.c: 56: }else{
  3961                           
  3962                           
  3963                           ;switch.c: 57: p->State = 0;
  3964  05B9  082E               	movf	pulsante_debounce@p,w
  3965  05BA  3E0A               	addlw	10
  3966  05BB  0084               	movwf	4
  3967  05BC  0180               	clrf	0
  3968                           
  3969                           ;switch.c: 58: p->time_OFFstate = millis();
  3970  05BD  120A  158A  20E4   	fcall	_millis
  3971  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  3972  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  3973  05C2  082E               	movf	pulsante_debounce@p,w
  3974  05C3  3E0F               	addlw	15
  3975  05C4                     L3:	
  3976  05C4  0084               	movwf	4
  3977  05C5  0820               	movf	?_millis,w
  3978  05C6  1783               	bsf	3,7	;select IRP bank2
  3979  05C7  0080               	movwf	0
  3980  05C8  0A84               	incf	4,f
  3981  05C9  0821               	movf	?_millis+1,w
  3982  05CA  0080               	movwf	0
  3983  05CB  0A84               	incf	4,f
  3984  05CC  0822               	movf	?_millis+2,w
  3985  05CD  0080               	movwf	0
  3986  05CE  0A84               	incf	4,f
  3987  05CF  0823               	movf	?_millis+3,w
  3988  05D0  0080               	movwf	0
  3989  05D1                     l2631:	
  3990                           
  3991                           ;switch.c: 59: }
  3992                           ;switch.c: 60: }
  3993                           ;switch.c: 61: p->state_debounce = 0;
  3994  05D1  082E               	movf	pulsante_debounce@p,w
  3995  05D2  3E03               	addlw	3
  3996  05D3  0084               	movwf	4
  3997  05D4  0180               	clrf	0
  3998                           
  3999                           ;switch.c: 64: }
  4000                           
  4001                           ;switch.c: 62: }
  4002                           ;switch.c: 63: break;
  4003  05D5  0008               	return
  4004  05D6                     l2635:	
  4005  05D6  082E               	movf	pulsante_debounce@p,w
  4006  05D7  3E03               	addlw	3
  4007  05D8  0084               	movwf	4
  4008  05D9  1783               	bsf	3,7	;select IRP bank2
  4009  05DA  0800               	movf	0,w
  4010                           
  4011                           ; Switch size 1, requested type "space"
  4012                           ; Number of cases is 2, Range of values is 0 to 1
  4013                           ; switch strategies available:
  4014                           ; Name         Instructions Cycles
  4015                           ; simple_byte            7     4 (average)
  4016                           ; direct_byte           14     8 (fixed)
  4017                           ; jumptable            260     6 (fixed)
  4018                           ;	Chosen strategy is simple_byte
  4019  05DB  3A00               	xorlw	0	; case 0
  4020  05DC  1903               	skipnz
  4021  05DD  2D30               	goto	l2609
  4022  05DE  3A01               	xorlw	1	; case 1
  4023  05DF  1903               	skipnz
  4024  05E0  2D52               	goto	l2615
  4025  05E1  2DE2               	goto	l145
  4026  05E2                     l145:	
  4027  05E2  0008               	return
  4028  05E3                     __end_of_pulsante_debounce:	
  4029                           
  4030                           	psect	text12
  4031  0F3A                     __ptext12:	
  4032 ;; *************** function _out_toggle *****************
  4033 ;; Defined at:
  4034 ;;		line 156 in file "application.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;  p               1    wreg     PTR struct OUTPUT
  4037 ;;		 -> output_P4(7), output_P3(7), output_P2(7), output_P1(7), 
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;  p               1    5[COMMON] PTR struct OUTPUT
  4040 ;;		 -> output_P4(7), output_P3(7), output_P2(7), output_P1(7), 
  4041 ;;  pinmask         1    4[COMMON] unsigned char 
  4042 ;;  value           1    0        unsigned char 
  4043 ;; Return value:  Size  Location     Type
  4044 ;;                  1    wreg      void 
  4045 ;; Registers used:
  4046 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4047 ;; Tracked objects:
  4048 ;;		On entry : 0/0
  4049 ;;		On exit  : 0/0
  4050 ;;		Unchanged: 0/0
  4051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4052 ;;      Params:         0       0       0       0       0
  4053 ;;      Locals:         2       0       0       0       0
  4054 ;;      Temps:          0       5       0       0       0
  4055 ;;      Totals:         2       5       0       0       0
  4056 ;;Total ram usage:        7 bytes
  4057 ;; Hardware stack levels used:    1
  4058 ;; Hardware stack levels required when called:    1
  4059 ;; This function calls:
  4060 ;;		Nothing
  4061 ;; This function is called by:
  4062 ;;		_main
  4063 ;; This function uses a non-reentrant model
  4064 ;;
  4065                           
  4066                           
  4067                           ;psect for function _out_toggle
  4068  0F3A                     _out_toggle:	
  4069                           
  4070                           ;incstack = 0
  4071                           ; Regs used in _out_toggle: [wreg-fsr0h+status,2+status,0]
  4072                           ;out_toggle@p stored from wreg
  4073  0F3A  00F5               	movwf	out_toggle@p
  4074                           
  4075                           ;application.c: 158: uint8_t value, pinmask;
  4076                           ;application.c: 160: if(p->state){
  4077  0F3B  0875               	movf	out_toggle@p,w
  4078  0F3C  3E06               	addlw	6
  4079  0F3D  0084               	movwf	4
  4080  0F3E  1383               	bcf	3,7	;select IRP bank0
  4081  0F3F  0800               	movf	0,w
  4082  0F40  1903               	btfsc	3,2
  4083  0F41  2F64               	goto	l2855
  4084                           
  4085                           ;application.c: 162: pinmask = ~(1<<p->pinPOTENZA);
  4086  0F42  3001               	movlw	1
  4087  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  4088  0F44  1303               	bcf	3,6	;RP1=0, select bank0
  4089  0F45  00A0               	movwf	??_out_toggle
  4090  0F46  0875               	movf	out_toggle@p,w
  4091  0F47  3E02               	addlw	2
  4092  0F48  0084               	movwf	4
  4093  0F49  0A00               	incf	0,w
  4094  0F4A  2F4D               	goto	u3544
  4095  0F4B                     u3545:	
  4096  0F4B  1003               	clrc
  4097  0F4C  0DA0               	rlf	??_out_toggle,f
  4098  0F4D                     u3544:	
  4099  0F4D  3EFF               	addlw	-1
  4100  0F4E  1D03               	skipz
  4101  0F4F  2F4B               	goto	u3545
  4102  0F50  0820               	movf	??_out_toggle,w
  4103  0F51  3AFF               	xorlw	255
  4104  0F52  00A1               	movwf	??_out_toggle+1
  4105  0F53  0821               	movf	??_out_toggle+1,w
  4106  0F54  00F4               	movwf	out_toggle@pinmask
  4107                           
  4108                           ;application.c: 163: *p->portPOTENZA = *p->portPOTENZA & pinmask;
  4109  0F55  0875               	movf	out_toggle@p,w
  4110  0F56  0084               	movwf	4
  4111  0F57  0800               	movf	0,w
  4112  0F58  00A0               	movwf	??_out_toggle
  4113  0F59  0A84               	incf	4,f
  4114  0F5A  0800               	movf	0,w
  4115  0F5B  00A1               	movwf	??_out_toggle+1
  4116  0F5C  0820               	movf	??_out_toggle,w
  4117  0F5D  0084               	movwf	4
  4118  0F5E  1783               	bsf	3,7
  4119  0F5F  1C21               	btfss	??_out_toggle+1,0
  4120  0F60  1383               	bcf	3,7
  4121  0F61  0800               	movf	0,w
  4122  0F62  0574               	andwf	out_toggle@pinmask,w
  4123  0F63  2F85               	goto	L4
  4124  0F64                     l2855:	
  4125                           ;application.c: 164: }else{
  4126                           
  4127                           
  4128                           ;application.c: 166: pinmask = (1<<p->pinPOTENZA);
  4129  0F64  3001               	movlw	1
  4130  0F65  1283               	bcf	3,5	;RP0=0, select bank0
  4131  0F66  1303               	bcf	3,6	;RP1=0, select bank0
  4132  0F67  00A0               	movwf	??_out_toggle
  4133  0F68  0875               	movf	out_toggle@p,w
  4134  0F69  3E02               	addlw	2
  4135  0F6A  0084               	movwf	4
  4136  0F6B  1383               	bcf	3,7	;select IRP bank0
  4137  0F6C  0A00               	incf	0,w
  4138  0F6D  2F70               	goto	u3554
  4139  0F6E                     u3555:	
  4140  0F6E  1003               	clrc
  4141  0F6F  0DA0               	rlf	??_out_toggle,f
  4142  0F70                     u3554:	
  4143  0F70  3EFF               	addlw	-1
  4144  0F71  1D03               	skipz
  4145  0F72  2F6E               	goto	u3555
  4146  0F73  0820               	movf	??_out_toggle,w
  4147  0F74  00A1               	movwf	??_out_toggle+1
  4148  0F75  0821               	movf	??_out_toggle+1,w
  4149  0F76  00F4               	movwf	out_toggle@pinmask
  4150                           
  4151                           ;application.c: 167: *p->portPOTENZA = *p->portPOTENZA | pinmask;
  4152  0F77  0875               	movf	out_toggle@p,w
  4153  0F78  0084               	movwf	4
  4154  0F79  0800               	movf	0,w
  4155  0F7A  00A0               	movwf	??_out_toggle
  4156  0F7B  0A84               	incf	4,f
  4157  0F7C  0800               	movf	0,w
  4158  0F7D  00A1               	movwf	??_out_toggle+1
  4159  0F7E  0820               	movf	??_out_toggle,w
  4160  0F7F  0084               	movwf	4
  4161  0F80  1783               	bsf	3,7
  4162  0F81  1C21               	btfss	??_out_toggle+1,0
  4163  0F82  1383               	bcf	3,7
  4164  0F83  0800               	movf	0,w
  4165  0F84  0474               	iorwf	out_toggle@pinmask,w
  4166  0F85                     L4:	
  4167  0F85  00A2               	movwf	??_out_toggle+2
  4168  0F86  0875               	movf	out_toggle@p,w
  4169  0F87  0084               	movwf	4
  4170  0F88  1383               	bcf	3,7	;select IRP bank0
  4171  0F89  0800               	movf	0,w
  4172  0F8A  00A3               	movwf	??_out_toggle+3
  4173  0F8B  0A84               	incf	4,f
  4174  0F8C  0800               	movf	0,w
  4175  0F8D  00A4               	movwf	??_out_toggle+4
  4176  0F8E  0823               	movf	??_out_toggle+3,w
  4177  0F8F  0084               	movwf	4
  4178  0F90  1783               	bsf	3,7
  4179  0F91  1C24               	btfss	??_out_toggle+4,0
  4180  0F92  1383               	bcf	3,7
  4181  0F93  0822               	movf	??_out_toggle+2,w
  4182  0F94  0080               	movwf	0
  4183                           
  4184                           ;application.c: 168: }
  4185                           ;application.c: 170: if(p->state){
  4186  0F95  0875               	movf	out_toggle@p,w
  4187  0F96  3E06               	addlw	6
  4188  0F97  0084               	movwf	4
  4189  0F98  1383               	bcf	3,7	;select IRP bank0
  4190  0F99  0800               	movf	0,w
  4191  0F9A  1903               	btfsc	3,2
  4192  0F9B  2FBD               	goto	l2859
  4193                           
  4194                           ;application.c: 172: pinmask = ~(1<<p->pinLED);
  4195  0F9C  3001               	movlw	1
  4196  0F9D  00A0               	movwf	??_out_toggle
  4197  0F9E  0875               	movf	out_toggle@p,w
  4198  0F9F  3E05               	addlw	5
  4199  0FA0  0084               	movwf	4
  4200  0FA1  0A00               	incf	0,w
  4201  0FA2  2FA5               	goto	u3574
  4202  0FA3                     u3575:	
  4203  0FA3  1003               	clrc
  4204  0FA4  0DA0               	rlf	??_out_toggle,f
  4205  0FA5                     u3574:	
  4206  0FA5  3EFF               	addlw	-1
  4207  0FA6  1D03               	skipz
  4208  0FA7  2FA3               	goto	u3575
  4209  0FA8  0820               	movf	??_out_toggle,w
  4210  0FA9  3AFF               	xorlw	255
  4211  0FAA  00A1               	movwf	??_out_toggle+1
  4212  0FAB  0821               	movf	??_out_toggle+1,w
  4213  0FAC  00F4               	movwf	out_toggle@pinmask
  4214                           
  4215                           ;application.c: 173: *p->portLED = *p->portLED & pinmask;
  4216  0FAD  0875               	movf	out_toggle@p,w
  4217  0FAE  3E03               	addlw	3
  4218  0FAF  0084               	movwf	4
  4219  0FB0  0800               	movf	0,w
  4220  0FB1  00A0               	movwf	??_out_toggle
  4221  0FB2  0A84               	incf	4,f
  4222  0FB3  0800               	movf	0,w
  4223  0FB4  00A1               	movwf	??_out_toggle+1
  4224  0FB5  0820               	movf	??_out_toggle,w
  4225  0FB6  0084               	movwf	4
  4226  0FB7  1783               	bsf	3,7
  4227  0FB8  1C21               	btfss	??_out_toggle+1,0
  4228  0FB9  1383               	bcf	3,7
  4229  0FBA  0800               	movf	0,w
  4230  0FBB  0574               	andwf	out_toggle@pinmask,w
  4231  0FBC  2FDD               	goto	L5
  4232  0FBD                     l2859:	
  4233                           ;application.c: 174: }else{
  4234                           
  4235                           
  4236                           ;application.c: 176: pinmask = (1<<p->pinLED);
  4237  0FBD  3001               	movlw	1
  4238  0FBE  00A0               	movwf	??_out_toggle
  4239  0FBF  0875               	movf	out_toggle@p,w
  4240  0FC0  3E05               	addlw	5
  4241  0FC1  0084               	movwf	4
  4242  0FC2  1383               	bcf	3,7	;select IRP bank0
  4243  0FC3  0A00               	incf	0,w
  4244  0FC4  2FC7               	goto	u3584
  4245  0FC5                     u3585:	
  4246  0FC5  1003               	clrc
  4247  0FC6  0DA0               	rlf	??_out_toggle,f
  4248  0FC7                     u3584:	
  4249  0FC7  3EFF               	addlw	-1
  4250  0FC8  1D03               	skipz
  4251  0FC9  2FC5               	goto	u3585
  4252  0FCA  0820               	movf	??_out_toggle,w
  4253  0FCB  00A1               	movwf	??_out_toggle+1
  4254  0FCC  0821               	movf	??_out_toggle+1,w
  4255  0FCD  00F4               	movwf	out_toggle@pinmask
  4256                           
  4257                           ;application.c: 177: *p->portLED = *p->portLED | pinmask;
  4258  0FCE  0875               	movf	out_toggle@p,w
  4259  0FCF  3E03               	addlw	3
  4260  0FD0  0084               	movwf	4
  4261  0FD1  0800               	movf	0,w
  4262  0FD2  00A0               	movwf	??_out_toggle
  4263  0FD3  0A84               	incf	4,f
  4264  0FD4  0800               	movf	0,w
  4265  0FD5  00A1               	movwf	??_out_toggle+1
  4266  0FD6  0820               	movf	??_out_toggle,w
  4267  0FD7  0084               	movwf	4
  4268  0FD8  1783               	bsf	3,7
  4269  0FD9  1C21               	btfss	??_out_toggle+1,0
  4270  0FDA  1383               	bcf	3,7
  4271  0FDB  0800               	movf	0,w
  4272  0FDC  0474               	iorwf	out_toggle@pinmask,w
  4273  0FDD                     L5:	
  4274  0FDD  00A2               	movwf	??_out_toggle+2
  4275  0FDE  0875               	movf	out_toggle@p,w
  4276  0FDF  3E03               	addlw	3
  4277  0FE0  0084               	movwf	4
  4278  0FE1  1383               	bcf	3,7	;select IRP bank0
  4279  0FE2  0800               	movf	0,w
  4280  0FE3  00A3               	movwf	??_out_toggle+3
  4281  0FE4  0A84               	incf	4,f
  4282  0FE5  0800               	movf	0,w
  4283  0FE6  00A4               	movwf	??_out_toggle+4
  4284  0FE7  0823               	movf	??_out_toggle+3,w
  4285  0FE8  0084               	movwf	4
  4286  0FE9  1783               	bsf	3,7
  4287  0FEA  1C24               	btfss	??_out_toggle+4,0
  4288  0FEB  1383               	bcf	3,7
  4289  0FEC  0822               	movf	??_out_toggle+2,w
  4290  0FED  0080               	movwf	0
  4291                           
  4292                           ;application.c: 178: }
  4293                           ;application.c: 179: if(p->state){
  4294  0FEE  0875               	movf	out_toggle@p,w
  4295  0FEF  3E06               	addlw	6
  4296  0FF0  0084               	movwf	4
  4297  0FF1  1383               	bcf	3,7	;select IRP bank0
  4298  0FF2  0800               	movf	0,w
  4299  0FF3  1903               	btfsc	3,2
  4300  0FF4  2FFA               	goto	l2863
  4301                           
  4302                           ;application.c: 180: p->state = 0;
  4303  0FF5  0875               	movf	out_toggle@p,w
  4304  0FF6  3E06               	addlw	6
  4305  0FF7  0084               	movwf	4
  4306  0FF8  0180               	clrf	0
  4307                           
  4308                           ;application.c: 181: }else{
  4309  0FF9  0008               	return
  4310  0FFA                     l2863:	
  4311                           
  4312                           ;application.c: 182: p->state = 1;
  4313  0FFA  0875               	movf	out_toggle@p,w
  4314  0FFB  3E06               	addlw	6
  4315  0FFC  0084               	movwf	4
  4316  0FFD  0180               	clrf	0
  4317  0FFE  0A80               	incf	0,f
  4318  0FFF  0008               	return
  4319  1000                     __end_of_out_toggle:	
  4320                           
  4321                           	psect	text13
  4322  0CDD                     __ptext13:	
  4323 ;; *************** function _out_mod1_SW4__ON *****************
  4324 ;; Defined at:
  4325 ;;		line 211 in file "application.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;  v               1    wreg     PTR struct OUTPUT
  4328 ;;		 -> output_P4(7), output_P3(7), output_P2(7), output_P1(7), 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;  v               1    5[COMMON] PTR struct OUTPUT
  4331 ;;		 -> output_P4(7), output_P3(7), output_P2(7), output_P1(7), 
  4332 ;;  pinmask         1    4[COMMON] unsigned char 
  4333 ;; Return value:  Size  Location     Type
  4334 ;;                  1    wreg      void 
  4335 ;; Registers used:
  4336 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4337 ;; Tracked objects:
  4338 ;;		On entry : 0/0
  4339 ;;		On exit  : 0/0
  4340 ;;		Unchanged: 0/0
  4341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4342 ;;      Params:         0       0       0       0       0
  4343 ;;      Locals:         2       0       0       0       0
  4344 ;;      Temps:          0       5       0       0       0
  4345 ;;      Totals:         2       5       0       0       0
  4346 ;;Total ram usage:        7 bytes
  4347 ;; Hardware stack levels used:    1
  4348 ;; Hardware stack levels required when called:    2
  4349 ;; This function calls:
  4350 ;;		_millis
  4351 ;; This function is called by:
  4352 ;;		_main
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           
  4357                           ;psect for function _out_mod1_SW4__ON
  4358  0CDD                     _out_mod1_SW4__ON:	
  4359                           
  4360                           ;incstack = 0
  4361                           ; Regs used in _out_mod1_SW4__ON: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4362                           ;out_mod1_SW4__ON@v stored from wreg
  4363  0CDD  00F5               	movwf	out_mod1_SW4__ON@v
  4364                           
  4365                           ;application.c: 213: uint8_t pinmask;
  4366                           ;application.c: 216: pinmask = (1<<v->pinPOTENZA);
  4367  0CDE  3001               	movlw	1
  4368  0CDF  1283               	bcf	3,5	;RP0=0, select bank0
  4369  0CE0  1303               	bcf	3,6	;RP1=0, select bank0
  4370  0CE1  00A8               	movwf	??_out_mod1_SW4__ON
  4371  0CE2  0875               	movf	out_mod1_SW4__ON@v,w
  4372  0CE3  3E02               	addlw	2
  4373  0CE4  0084               	movwf	4
  4374  0CE5  1383               	bcf	3,7	;select IRP bank0
  4375  0CE6  0A00               	incf	0,w
  4376  0CE7  2CEA               	goto	u3514
  4377  0CE8                     u3515:	
  4378  0CE8  1003               	clrc
  4379  0CE9  0DA8               	rlf	??_out_mod1_SW4__ON,f
  4380  0CEA                     u3514:	
  4381  0CEA  3EFF               	addlw	-1
  4382  0CEB  1D03               	skipz
  4383  0CEC  2CE8               	goto	u3515
  4384  0CED  0828               	movf	??_out_mod1_SW4__ON,w
  4385  0CEE  00A9               	movwf	??_out_mod1_SW4__ON+1
  4386  0CEF  0829               	movf	??_out_mod1_SW4__ON+1,w
  4387  0CF0  00F4               	movwf	out_mod1_SW4__ON@pinmask
  4388                           
  4389                           ;application.c: 217: *v->portPOTENZA = *v->portPOTENZA | pinmask;
  4390  0CF1  0875               	movf	out_mod1_SW4__ON@v,w
  4391  0CF2  0084               	movwf	4
  4392  0CF3  0800               	movf	0,w
  4393  0CF4  00A8               	movwf	??_out_mod1_SW4__ON
  4394  0CF5  0A84               	incf	4,f
  4395  0CF6  0800               	movf	0,w
  4396  0CF7  00A9               	movwf	??_out_mod1_SW4__ON+1
  4397  0CF8  0828               	movf	??_out_mod1_SW4__ON,w
  4398  0CF9  0084               	movwf	4
  4399  0CFA  1783               	bsf	3,7
  4400  0CFB  1C29               	btfss	??_out_mod1_SW4__ON+1,0
  4401  0CFC  1383               	bcf	3,7
  4402  0CFD  0800               	movf	0,w
  4403  0CFE  0474               	iorwf	out_mod1_SW4__ON@pinmask,w
  4404  0CFF  00AA               	movwf	??_out_mod1_SW4__ON+2
  4405  0D00  0875               	movf	out_mod1_SW4__ON@v,w
  4406  0D01  0084               	movwf	4
  4407  0D02  1383               	bcf	3,7	;select IRP bank0
  4408  0D03  0800               	movf	0,w
  4409  0D04  00AB               	movwf	??_out_mod1_SW4__ON+3
  4410  0D05  0A84               	incf	4,f
  4411  0D06  0800               	movf	0,w
  4412  0D07  00AC               	movwf	??_out_mod1_SW4__ON+4
  4413  0D08  082B               	movf	??_out_mod1_SW4__ON+3,w
  4414  0D09  0084               	movwf	4
  4415  0D0A  1783               	bsf	3,7
  4416  0D0B  1C2C               	btfss	??_out_mod1_SW4__ON+4,0
  4417  0D0C  1383               	bcf	3,7
  4418  0D0D  082A               	movf	??_out_mod1_SW4__ON+2,w
  4419  0D0E  0080               	movwf	0
  4420                           
  4421                           ;application.c: 220: pinmask = (1<<v->pinLED);
  4422  0D0F  3001               	movlw	1
  4423  0D10  00A8               	movwf	??_out_mod1_SW4__ON
  4424  0D11  0875               	movf	out_mod1_SW4__ON@v,w
  4425  0D12  3E05               	addlw	5
  4426  0D13  0084               	movwf	4
  4427  0D14  1383               	bcf	3,7	;select IRP bank0
  4428  0D15  0A00               	incf	0,w
  4429  0D16  2D19               	goto	u3524
  4430  0D17                     u3525:	
  4431  0D17  1003               	clrc
  4432  0D18  0DA8               	rlf	??_out_mod1_SW4__ON,f
  4433  0D19                     u3524:	
  4434  0D19  3EFF               	addlw	-1
  4435  0D1A  1D03               	skipz
  4436  0D1B  2D17               	goto	u3525
  4437  0D1C  0828               	movf	??_out_mod1_SW4__ON,w
  4438  0D1D  00A9               	movwf	??_out_mod1_SW4__ON+1
  4439  0D1E  0829               	movf	??_out_mod1_SW4__ON+1,w
  4440  0D1F  00F4               	movwf	out_mod1_SW4__ON@pinmask
  4441                           
  4442                           ;application.c: 221: *v->portLED = *v->portLED | pinmask;
  4443  0D20  0875               	movf	out_mod1_SW4__ON@v,w
  4444  0D21  3E03               	addlw	3
  4445  0D22  0084               	movwf	4
  4446  0D23  0800               	movf	0,w
  4447  0D24  00A8               	movwf	??_out_mod1_SW4__ON
  4448  0D25  0A84               	incf	4,f
  4449  0D26  0800               	movf	0,w
  4450  0D27  00A9               	movwf	??_out_mod1_SW4__ON+1
  4451  0D28  0828               	movf	??_out_mod1_SW4__ON,w
  4452  0D29  0084               	movwf	4
  4453  0D2A  1783               	bsf	3,7
  4454  0D2B  1C29               	btfss	??_out_mod1_SW4__ON+1,0
  4455  0D2C  1383               	bcf	3,7
  4456  0D2D  0800               	movf	0,w
  4457  0D2E  0474               	iorwf	out_mod1_SW4__ON@pinmask,w
  4458  0D2F  00AA               	movwf	??_out_mod1_SW4__ON+2
  4459  0D30  0875               	movf	out_mod1_SW4__ON@v,w
  4460  0D31  3E03               	addlw	3
  4461  0D32  0084               	movwf	4
  4462  0D33  1383               	bcf	3,7	;select IRP bank0
  4463  0D34  0800               	movf	0,w
  4464  0D35  00AB               	movwf	??_out_mod1_SW4__ON+3
  4465  0D36  0A84               	incf	4,f
  4466  0D37  0800               	movf	0,w
  4467  0D38  00AC               	movwf	??_out_mod1_SW4__ON+4
  4468  0D39  082B               	movf	??_out_mod1_SW4__ON+3,w
  4469  0D3A  0084               	movwf	4
  4470  0D3B  1783               	bsf	3,7
  4471  0D3C  1C2C               	btfss	??_out_mod1_SW4__ON+4,0
  4472  0D3D  1383               	bcf	3,7
  4473  0D3E  082A               	movf	??_out_mod1_SW4__ON+2,w
  4474  0D3F  0080               	movwf	0
  4475                           
  4476                           ;application.c: 222: v->state = 1;
  4477  0D40  0875               	movf	out_mod1_SW4__ON@v,w
  4478  0D41  3E06               	addlw	6
  4479  0D42  0084               	movwf	4
  4480  0D43  1383               	bcf	3,7	;select IRP bank0
  4481  0D44  0180               	clrf	0
  4482  0D45  0A80               	incf	0,f
  4483                           
  4484                           ;application.c: 224: app.SW4_mod1_starttime = millis();
  4485  0D46  120A  158A  20E4   	fcall	_millis
  4486  0D49  1283               	bcf	3,5	;RP0=0, select bank0
  4487  0D4A  1303               	bcf	3,6	;RP1=0, select bank0
  4488  0D4B  0823               	movf	?_millis+3,w
  4489  0D4C  1683               	bsf	3,5	;RP0=1, select bank1
  4490  0D4D  1303               	bcf	3,6	;RP1=0, select bank1
  4491  0D4E  00AD               	movwf	((_app+3)^(0+128)+10)
  4492  0D4F  1283               	bcf	3,5	;RP0=0, select bank0
  4493  0D50  1303               	bcf	3,6	;RP1=0, select bank0
  4494  0D51  0822               	movf	?_millis+2,w
  4495  0D52  1683               	bsf	3,5	;RP0=1, select bank1
  4496  0D53  1303               	bcf	3,6	;RP1=0, select bank1
  4497  0D54  00AC               	movwf	((_app+2)^(0+128)+10)
  4498  0D55  1283               	bcf	3,5	;RP0=0, select bank0
  4499  0D56  1303               	bcf	3,6	;RP1=0, select bank0
  4500  0D57  0821               	movf	?_millis+1,w
  4501  0D58  1683               	bsf	3,5	;RP0=1, select bank1
  4502  0D59  1303               	bcf	3,6	;RP1=0, select bank1
  4503  0D5A  00AB               	movwf	((_app+1)^(0+128)+10)
  4504  0D5B  1283               	bcf	3,5	;RP0=0, select bank0
  4505  0D5C  1303               	bcf	3,6	;RP1=0, select bank0
  4506  0D5D  0820               	movf	?_millis,w
  4507  0D5E  1683               	bsf	3,5	;RP0=1, select bank1
  4508  0D5F  1303               	bcf	3,6	;RP1=0, select bank1
  4509  0D60  00AA               	movwf	(_app^(0+128)+10)
  4510  0D61  0008               	return
  4511  0D62                     __end_of_out_mod1_SW4__ON:	
  4512                           
  4513                           	psect	text14
  4514  0C04                     __ptext14:	
  4515 ;; *************** function _out_mod1_SW4__OFF *****************
  4516 ;; Defined at:
  4517 ;;		line 227 in file "application.c"
  4518 ;; Parameters:    Size  Location     Type
  4519 ;;  v               1    wreg     PTR struct OUTPUT
  4520 ;;		 -> output_P4(7), output_P3(7), output_P2(7), output_P1(7), 
  4521 ;; Auto vars:     Size  Location     Type
  4522 ;;  v               1    5[COMMON] PTR struct OUTPUT
  4523 ;;		 -> output_P4(7), output_P3(7), output_P2(7), output_P1(7), 
  4524 ;;  pinmask         1    4[COMMON] unsigned char 
  4525 ;; Return value:  Size  Location     Type
  4526 ;;                  1    wreg      void 
  4527 ;; Registers used:
  4528 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4529 ;; Tracked objects:
  4530 ;;		On entry : 0/0
  4531 ;;		On exit  : 0/0
  4532 ;;		Unchanged: 0/0
  4533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4534 ;;      Params:         0       0       0       0       0
  4535 ;;      Locals:         2       0       0       0       0
  4536 ;;      Temps:          0       5       0       0       0
  4537 ;;      Totals:         2       5       0       0       0
  4538 ;;Total ram usage:        7 bytes
  4539 ;; Hardware stack levels used:    1
  4540 ;; Hardware stack levels required when called:    1
  4541 ;; This function calls:
  4542 ;;		Nothing
  4543 ;; This function is called by:
  4544 ;;		_main
  4545 ;; This function uses a non-reentrant model
  4546 ;;
  4547                           
  4548                           
  4549                           ;psect for function _out_mod1_SW4__OFF
  4550  0C04                     _out_mod1_SW4__OFF:	
  4551                           
  4552                           ;incstack = 0
  4553                           ; Regs used in _out_mod1_SW4__OFF: [wreg-fsr0h+status,2+status,0]
  4554                           ;out_mod1_SW4__OFF@v stored from wreg
  4555  0C04  00F5               	movwf	out_mod1_SW4__OFF@v
  4556                           
  4557                           ;application.c: 229: uint8_t pinmask;
  4558                           ;application.c: 231: pinmask = ~(1<<v->pinPOTENZA);
  4559  0C05  3001               	movlw	1
  4560  0C06  1283               	bcf	3,5	;RP0=0, select bank0
  4561  0C07  1303               	bcf	3,6	;RP1=0, select bank0
  4562  0C08  00A0               	movwf	??_out_mod1_SW4__OFF
  4563  0C09  0875               	movf	out_mod1_SW4__OFF@v,w
  4564  0C0A  3E02               	addlw	2
  4565  0C0B  0084               	movwf	4
  4566  0C0C  1383               	bcf	3,7	;select IRP bank0
  4567  0C0D  0A00               	incf	0,w
  4568  0C0E  2C11               	goto	u3614
  4569  0C0F                     u3615:	
  4570  0C0F  1003               	clrc
  4571  0C10  0DA0               	rlf	??_out_mod1_SW4__OFF,f
  4572  0C11                     u3614:	
  4573  0C11  3EFF               	addlw	-1
  4574  0C12  1D03               	skipz
  4575  0C13  2C0F               	goto	u3615
  4576  0C14  0820               	movf	??_out_mod1_SW4__OFF,w
  4577  0C15  3AFF               	xorlw	255
  4578  0C16  00A1               	movwf	??_out_mod1_SW4__OFF+1
  4579  0C17  0821               	movf	??_out_mod1_SW4__OFF+1,w
  4580  0C18  00F4               	movwf	out_mod1_SW4__OFF@pinmask
  4581                           
  4582                           ;application.c: 232: *v->portPOTENZA = *v->portPOTENZA & pinmask;
  4583  0C19  0875               	movf	out_mod1_SW4__OFF@v,w
  4584  0C1A  0084               	movwf	4
  4585  0C1B  0800               	movf	0,w
  4586  0C1C  00A0               	movwf	??_out_mod1_SW4__OFF
  4587  0C1D  0A84               	incf	4,f
  4588  0C1E  0800               	movf	0,w
  4589  0C1F  00A1               	movwf	??_out_mod1_SW4__OFF+1
  4590  0C20  0820               	movf	??_out_mod1_SW4__OFF,w
  4591  0C21  0084               	movwf	4
  4592  0C22  1783               	bsf	3,7
  4593  0C23  1C21               	btfss	??_out_mod1_SW4__OFF+1,0
  4594  0C24  1383               	bcf	3,7
  4595  0C25  0800               	movf	0,w
  4596  0C26  0574               	andwf	out_mod1_SW4__OFF@pinmask,w
  4597  0C27  00A2               	movwf	??_out_mod1_SW4__OFF+2
  4598  0C28  0875               	movf	out_mod1_SW4__OFF@v,w
  4599  0C29  0084               	movwf	4
  4600  0C2A  1383               	bcf	3,7	;select IRP bank0
  4601  0C2B  0800               	movf	0,w
  4602  0C2C  00A3               	movwf	??_out_mod1_SW4__OFF+3
  4603  0C2D  0A84               	incf	4,f
  4604  0C2E  0800               	movf	0,w
  4605  0C2F  00A4               	movwf	??_out_mod1_SW4__OFF+4
  4606  0C30  0823               	movf	??_out_mod1_SW4__OFF+3,w
  4607  0C31  0084               	movwf	4
  4608  0C32  1783               	bsf	3,7
  4609  0C33  1C24               	btfss	??_out_mod1_SW4__OFF+4,0
  4610  0C34  1383               	bcf	3,7
  4611  0C35  0822               	movf	??_out_mod1_SW4__OFF+2,w
  4612  0C36  0080               	movwf	0
  4613                           
  4614                           ;application.c: 233: pinmask = ~(1<<v->pinLED);
  4615  0C37  3001               	movlw	1
  4616  0C38  00A0               	movwf	??_out_mod1_SW4__OFF
  4617  0C39  0875               	movf	out_mod1_SW4__OFF@v,w
  4618  0C3A  3E05               	addlw	5
  4619  0C3B  0084               	movwf	4
  4620  0C3C  1383               	bcf	3,7	;select IRP bank0
  4621  0C3D  0A00               	incf	0,w
  4622  0C3E  2C41               	goto	u3624
  4623  0C3F                     u3625:	
  4624  0C3F  1003               	clrc
  4625  0C40  0DA0               	rlf	??_out_mod1_SW4__OFF,f
  4626  0C41                     u3624:	
  4627  0C41  3EFF               	addlw	-1
  4628  0C42  1D03               	skipz
  4629  0C43  2C3F               	goto	u3625
  4630  0C44  0820               	movf	??_out_mod1_SW4__OFF,w
  4631  0C45  3AFF               	xorlw	255
  4632  0C46  00A1               	movwf	??_out_mod1_SW4__OFF+1
  4633  0C47  0821               	movf	??_out_mod1_SW4__OFF+1,w
  4634  0C48  00F4               	movwf	out_mod1_SW4__OFF@pinmask
  4635                           
  4636                           ;application.c: 234: *v->portLED = *v->portLED & pinmask;
  4637  0C49  0875               	movf	out_mod1_SW4__OFF@v,w
  4638  0C4A  3E03               	addlw	3
  4639  0C4B  0084               	movwf	4
  4640  0C4C  0800               	movf	0,w
  4641  0C4D  00A0               	movwf	??_out_mod1_SW4__OFF
  4642  0C4E  0A84               	incf	4,f
  4643  0C4F  0800               	movf	0,w
  4644  0C50  00A1               	movwf	??_out_mod1_SW4__OFF+1
  4645  0C51  0820               	movf	??_out_mod1_SW4__OFF,w
  4646  0C52  0084               	movwf	4
  4647  0C53  1783               	bsf	3,7
  4648  0C54  1C21               	btfss	??_out_mod1_SW4__OFF+1,0
  4649  0C55  1383               	bcf	3,7
  4650  0C56  0800               	movf	0,w
  4651  0C57  0574               	andwf	out_mod1_SW4__OFF@pinmask,w
  4652  0C58  00A2               	movwf	??_out_mod1_SW4__OFF+2
  4653  0C59  0875               	movf	out_mod1_SW4__OFF@v,w
  4654  0C5A  3E03               	addlw	3
  4655  0C5B  0084               	movwf	4
  4656  0C5C  1383               	bcf	3,7	;select IRP bank0
  4657  0C5D  0800               	movf	0,w
  4658  0C5E  00A3               	movwf	??_out_mod1_SW4__OFF+3
  4659  0C5F  0A84               	incf	4,f
  4660  0C60  0800               	movf	0,w
  4661  0C61  00A4               	movwf	??_out_mod1_SW4__OFF+4
  4662  0C62  0823               	movf	??_out_mod1_SW4__OFF+3,w
  4663  0C63  0084               	movwf	4
  4664  0C64  1783               	bsf	3,7
  4665  0C65  1C24               	btfss	??_out_mod1_SW4__OFF+4,0
  4666  0C66  1383               	bcf	3,7
  4667  0C67  0822               	movf	??_out_mod1_SW4__OFF+2,w
  4668  0C68  0080               	movwf	0
  4669                           
  4670                           ;application.c: 235: v->state = 0;
  4671  0C69  0875               	movf	out_mod1_SW4__OFF@v,w
  4672  0C6A  3E06               	addlw	6
  4673  0C6B  0084               	movwf	4
  4674  0C6C  1383               	bcf	3,7	;select IRP bank0
  4675  0C6D  0180               	clrf	0
  4676  0C6E  0008               	return
  4677  0C6F                     __end_of_out_mod1_SW4__OFF:	
  4678                           
  4679                           	psect	text15
  4680  0E88                     __ptext15:	
  4681 ;; *************** function _out_init *****************
  4682 ;; Defined at:
  4683 ;;		line 99 in file "application.c"
  4684 ;; Parameters:    Size  Location     Type
  4685 ;;		None
  4686 ;; Auto vars:     Size  Location     Type
  4687 ;;		None
  4688 ;; Return value:  Size  Location     Type
  4689 ;;                  1    wreg      void 
  4690 ;; Registers used:
  4691 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4692 ;; Tracked objects:
  4693 ;;		On entry : 0/0
  4694 ;;		On exit  : 0/0
  4695 ;;		Unchanged: 0/0
  4696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4697 ;;      Params:         0       0       0       0       0
  4698 ;;      Locals:         0       0       0       0       0
  4699 ;;      Temps:          0       1       0       0       0
  4700 ;;      Totals:         0       1       0       0       0
  4701 ;;Total ram usage:        1 bytes
  4702 ;; Hardware stack levels used:    1
  4703 ;; Hardware stack levels required when called:    5
  4704 ;; This function calls:
  4705 ;;		_softPWM_init
  4706 ;; This function is called by:
  4707 ;;		_main
  4708 ;; This function uses a non-reentrant model
  4709 ;;
  4710                           
  4711                           
  4712                           ;psect for function _out_init
  4713  0E88                     _out_init:	
  4714                           
  4715                           ;application.c: 100: TRISAbits.TRISA5 = 0;
  4716                           
  4717                           ;incstack = 0
  4718                           ; Regs used in _out_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4719  0E88  1683               	bsf	3,5	;RP0=1, select bank1
  4720  0E89  1303               	bcf	3,6	;RP1=0, select bank1
  4721  0E8A  1285               	bcf	5,5	;volatile
  4722                           
  4723                           ;application.c: 101: TRISAbits.TRISA3 = 0;
  4724  0E8B  1185               	bcf	5,3	;volatile
  4725                           
  4726                           ;application.c: 102: TRISAbits.TRISA2 = 0;
  4727  0E8C  1105               	bcf	5,2	;volatile
  4728                           
  4729                           ;application.c: 103: TRISBbits.TRISB6 = 0;
  4730  0E8D  1306               	bcf	6,6	;volatile
  4731                           
  4732                           ;application.c: 104: TRISCbits.TRISC0 = 0;
  4733  0E8E  1007               	bcf	7,0	;volatile
  4734                           
  4735                           ;application.c: 105: TRISCbits.TRISC1 = 0;
  4736  0E8F  1087               	bcf	7,1	;volatile
  4737                           
  4738                           ;application.c: 106: TRISCbits.TRISC2 = 0;
  4739  0E90  1107               	bcf	7,2	;volatile
  4740                           
  4741                           ;application.c: 107: TRISCbits.TRISC3 = 0;
  4742  0E91  1187               	bcf	7,3	;volatile
  4743                           
  4744                           ;application.c: 108: TRISAbits.TRISA7 = 0;
  4745  0E92  1385               	bcf	5,7	;volatile
  4746                           
  4747                           ;application.c: 109: PORTAbits.RA7 = 0;
  4748  0E93  1283               	bcf	3,5	;RP0=0, select bank0
  4749  0E94  1303               	bcf	3,6	;RP1=0, select bank0
  4750  0E95  1385               	bcf	5,7	;volatile
  4751                           
  4752                           ;application.c: 110: PORTAbits.RA5 = 0;
  4753  0E96  1285               	bcf	5,5	;volatile
  4754                           
  4755                           ;application.c: 111: PORTAbits.RA3 = 0;
  4756  0E97  1185               	bcf	5,3	;volatile
  4757                           
  4758                           ;application.c: 112: PORTAbits.RA2 = 0;
  4759  0E98  1105               	bcf	5,2	;volatile
  4760                           
  4761                           ;application.c: 113: PORTBbits.RB6 = 0;
  4762  0E99  1306               	bcf	6,6	;volatile
  4763                           
  4764                           ;application.c: 114: PORTCbits.RC0 = 0;
  4765  0E9A  1007               	bcf	7,0	;volatile
  4766                           
  4767                           ;application.c: 115: PORTCbits.RC1 = 0;
  4768  0E9B  1087               	bcf	7,1	;volatile
  4769                           
  4770                           ;application.c: 116: PORTCbits.RC2 = 0;
  4771  0E9C  1107               	bcf	7,2	;volatile
  4772                           
  4773                           ;application.c: 117: PORTCbits.RC3 = 0;
  4774  0E9D  1187               	bcf	7,3	;volatile
  4775                           
  4776                           ;application.c: 119: output_P1.portPOTENZA = &PORTA;
  4777  0E9E  3000               	movlw	0
  4778  0E9F  1683               	bsf	3,5	;RP0=1, select bank1
  4779  0EA0  1303               	bcf	3,6	;RP1=0, select bank1
  4780  0EA1  00DE               	movwf	(_output_P1+1)^(0+128)
  4781  0EA2  3005               	movlw	5
  4782  0EA3  00DD               	movwf	_output_P1^(0+128)
  4783                           
  4784                           ;application.c: 120: output_P1.pinPOTENZA = 5;
  4785  0EA4  3005               	movlw	5
  4786  0EA5  1283               	bcf	3,5	;RP0=0, select bank0
  4787  0EA6  1303               	bcf	3,6	;RP1=0, select bank0
  4788  0EA7  00CC               	movwf	??_out_init
  4789  0EA8  084C               	movf	??_out_init,w
  4790  0EA9  1683               	bsf	3,5	;RP0=1, select bank1
  4791  0EAA  1303               	bcf	3,6	;RP1=0, select bank1
  4792  0EAB  00DF               	movwf	(_output_P1^(0+128)+2)
  4793                           
  4794                           ;application.c: 121: output_P1.portLED = &PORTC;
  4795  0EAC  3000               	movlw	0
  4796  0EAD  00E1               	movwf	((low ((_output_P1| 0+3))+1))^(0+128)
  4797  0EAE  3007               	movlw	7
  4798  0EAF  00E0               	movwf	(low ((_output_P1| 0+3)))^(0+128)
  4799                           
  4800                           ;application.c: 122: output_P1.pinLED = 0;
  4801  0EB0  01E2               	clrf	(_output_P1^(0+128)+5)
  4802                           
  4803                           ;application.c: 123: output_P1.state = 0;
  4804  0EB1  01E3               	clrf	(_output_P1^(0+128)+6)
  4805                           
  4806                           ;application.c: 125: output_P2.portPOTENZA = &PORTA;
  4807  0EB2  3000               	movlw	0
  4808  0EB3  00D7               	movwf	(_output_P2+1)^(0+128)
  4809  0EB4  3005               	movlw	5
  4810  0EB5  00D6               	movwf	_output_P2^(0+128)
  4811                           
  4812                           ;application.c: 126: output_P2.pinPOTENZA = 3;
  4813  0EB6  3003               	movlw	3
  4814  0EB7  1283               	bcf	3,5	;RP0=0, select bank0
  4815  0EB8  1303               	bcf	3,6	;RP1=0, select bank0
  4816  0EB9  00CC               	movwf	??_out_init
  4817  0EBA  084C               	movf	??_out_init,w
  4818  0EBB  1683               	bsf	3,5	;RP0=1, select bank1
  4819  0EBC  1303               	bcf	3,6	;RP1=0, select bank1
  4820  0EBD  00D8               	movwf	(_output_P2^(0+128)+2)
  4821                           
  4822                           ;application.c: 127: output_P2.portLED = &PORTC;
  4823  0EBE  3000               	movlw	0
  4824  0EBF  00DA               	movwf	((low ((_output_P2| 0+3))+1))^(0+128)
  4825  0EC0  3007               	movlw	7
  4826  0EC1  00D9               	movwf	(low ((_output_P2| 0+3)))^(0+128)
  4827                           
  4828                           ;application.c: 128: output_P2.pinLED = 1;
  4829  0EC2  01DB               	clrf	(_output_P2^(0+128)+5)
  4830  0EC3  0ADB               	incf	(_output_P2^(0+128)+5),f
  4831                           
  4832                           ;application.c: 129: output_P2.state = 0;
  4833  0EC4  01DC               	clrf	(_output_P2^(0+128)+6)
  4834                           
  4835                           ;application.c: 131: output_P3.portPOTENZA = &PORTA;
  4836  0EC5  3000               	movlw	0
  4837  0EC6  00D0               	movwf	(_output_P3+1)^(0+128)
  4838  0EC7  3005               	movlw	5
  4839  0EC8  00CF               	movwf	_output_P3^(0+128)
  4840                           
  4841                           ;application.c: 132: output_P3.pinPOTENZA = 2;
  4842  0EC9  3002               	movlw	2
  4843  0ECA  1283               	bcf	3,5	;RP0=0, select bank0
  4844  0ECB  1303               	bcf	3,6	;RP1=0, select bank0
  4845  0ECC  00CC               	movwf	??_out_init
  4846  0ECD  084C               	movf	??_out_init,w
  4847  0ECE  1683               	bsf	3,5	;RP0=1, select bank1
  4848  0ECF  1303               	bcf	3,6	;RP1=0, select bank1
  4849  0ED0  00D1               	movwf	(_output_P3^(0+128)+2)
  4850                           
  4851                           ;application.c: 133: output_P3.portLED = &PORTC;
  4852  0ED1  3000               	movlw	0
  4853  0ED2  00D3               	movwf	((low ((_output_P3| 0+3))+1))^(0+128)
  4854  0ED3  3007               	movlw	7
  4855  0ED4  00D2               	movwf	(low ((_output_P3| 0+3)))^(0+128)
  4856                           
  4857                           ;application.c: 134: output_P3.pinLED = 2;
  4858  0ED5  3002               	movlw	2
  4859  0ED6  1283               	bcf	3,5	;RP0=0, select bank0
  4860  0ED7  1303               	bcf	3,6	;RP1=0, select bank0
  4861  0ED8  00CC               	movwf	??_out_init
  4862  0ED9  084C               	movf	??_out_init,w
  4863  0EDA  1683               	bsf	3,5	;RP0=1, select bank1
  4864  0EDB  1303               	bcf	3,6	;RP1=0, select bank1
  4865  0EDC  00D4               	movwf	(_output_P3^(0+128)+5)
  4866                           
  4867                           ;application.c: 135: output_P3.state = 0;
  4868  0EDD  01D5               	clrf	(_output_P3^(0+128)+6)
  4869                           
  4870                           ;application.c: 137: output_P4.portPOTENZA = &PORTB;
  4871  0EDE  3000               	movlw	0
  4872  0EDF  00C9               	movwf	(_output_P4+1)^(0+128)
  4873  0EE0  3006               	movlw	6
  4874  0EE1  00C8               	movwf	_output_P4^(0+128)
  4875                           
  4876                           ;application.c: 138: output_P4.pinPOTENZA = 6;
  4877  0EE2  3006               	movlw	6
  4878  0EE3  1283               	bcf	3,5	;RP0=0, select bank0
  4879  0EE4  1303               	bcf	3,6	;RP1=0, select bank0
  4880  0EE5  00CC               	movwf	??_out_init
  4881  0EE6  084C               	movf	??_out_init,w
  4882  0EE7  1683               	bsf	3,5	;RP0=1, select bank1
  4883  0EE8  1303               	bcf	3,6	;RP1=0, select bank1
  4884  0EE9  00CA               	movwf	(_output_P4^(0+128)+2)
  4885                           
  4886                           ;application.c: 139: output_P4.portLED = &PORTC;
  4887  0EEA  3000               	movlw	0
  4888  0EEB  00CC               	movwf	((low ((_output_P4| 0+3))+1))^(0+128)
  4889  0EEC  3007               	movlw	7
  4890  0EED  00CB               	movwf	(low ((_output_P4| 0+3)))^(0+128)
  4891                           
  4892                           ;application.c: 140: output_P4.pinLED = 3;
  4893  0EEE  3003               	movlw	3
  4894  0EEF  1283               	bcf	3,5	;RP0=0, select bank0
  4895  0EF0  1303               	bcf	3,6	;RP1=0, select bank0
  4896  0EF1  00CC               	movwf	??_out_init
  4897  0EF2  084C               	movf	??_out_init,w
  4898  0EF3  1683               	bsf	3,5	;RP0=1, select bank1
  4899  0EF4  1303               	bcf	3,6	;RP1=0, select bank1
  4900  0EF5  00CD               	movwf	(_output_P4^(0+128)+5)
  4901                           
  4902                           ;application.c: 141: output_P4.state = 0;
  4903  0EF6  01CE               	clrf	(_output_P4^(0+128)+6)
  4904                           
  4905                           ;application.c: 143: POWER_ONLED.portLED = &PORTA;
  4906  0EF7  3000               	movlw	0
  4907  0EF8  1683               	bsf	3,5	;RP0=1, select bank3
  4908  0EF9  1703               	bsf	3,6	;RP1=1, select bank3
  4909  0EFA  0094               	movwf	((low ((_POWER_ONLED| (0+256)+3))+1))^(0+128)
  4910  0EFB  3005               	movlw	5
  4911  0EFC  0093               	movwf	(low ((_POWER_ONLED| (0+256)+3)))^(0+128)
  4912                           
  4913                           ;application.c: 144: POWER_ONLED.pinLED = 7;
  4914  0EFD  3007               	movlw	7
  4915  0EFE  1283               	bcf	3,5	;RP0=0, select bank0
  4916  0EFF  1303               	bcf	3,6	;RP1=0, select bank0
  4917  0F00  00CC               	movwf	??_out_init
  4918  0F01  084C               	movf	??_out_init,w
  4919  0F02  1683               	bsf	3,5	;RP0=1, select bank3
  4920  0F03  1703               	bsf	3,6	;RP1=1, select bank3
  4921  0F04  0095               	movwf	(_POWER_ONLED^(0+384)+5)
  4922                           
  4923                           ;application.c: 146: soft_pwm.port = &PORTA;
  4924  0F05  3000               	movlw	0
  4925  0F06  1683               	bsf	3,5	;RP0=1, select bank1
  4926  0F07  1303               	bcf	3,6	;RP1=0, select bank1
  4927  0F08  00B9               	movwf	(_soft_pwm+1)^(0+128)
  4928  0F09  3005               	movlw	5
  4929  0F0A  00B8               	movwf	_soft_pwm^(0+128)
  4930                           
  4931                           ;application.c: 147: soft_pwm.pin = 7;
  4932  0F0B  3007               	movlw	7
  4933  0F0C  1283               	bcf	3,5	;RP0=0, select bank0
  4934  0F0D  1303               	bcf	3,6	;RP1=0, select bank0
  4935  0F0E  00CC               	movwf	??_out_init
  4936  0F0F  084C               	movf	??_out_init,w
  4937  0F10  1683               	bsf	3,5	;RP0=1, select bank1
  4938  0F11  1303               	bcf	3,6	;RP1=0, select bank1
  4939  0F12  00BA               	movwf	(_soft_pwm^(0+128)+2)
  4940                           
  4941                           ;application.c: 148: softPWM_init(&soft_pwm,50);
  4942  0F13  3032               	movlw	50
  4943  0F14  1283               	bcf	3,5	;RP0=0, select bank0
  4944  0F15  1303               	bcf	3,6	;RP1=0, select bank0
  4945  0F16  00C9               	movwf	softPWM_init@freq
  4946  0F17  3000               	movlw	0
  4947  0F18  00CA               	movwf	softPWM_init@freq+1
  4948  0F19  30B8               	movlw	(low (_soft_pwm| 0))& (0+255)
  4949  0F1A  120A  158A  21F6   	fcall	_softPWM_init
  4950                           
  4951                           ;application.c: 149: app.crepuscolare_changet = 0;
  4952  0F1D  1683               	bsf	3,5	;RP0=1, select bank1
  4953  0F1E  1303               	bcf	3,6	;RP1=0, select bank1
  4954  0F1F  01B6               	clrf	(_app^(0+128)+22)
  4955                           
  4956                           ;application.c: 150: app.pwmstatemachine = 0;
  4957  0F20  01B1               	clrf	(_app^(0+128)+17)
  4958                           
  4959                           ;application.c: 151: app.tpwm = 100;
  4960  0F21  3064               	movlw	100
  4961  0F22  1283               	bcf	3,5	;RP0=0, select bank0
  4962  0F23  1303               	bcf	3,6	;RP1=0, select bank0
  4963  0F24  00CC               	movwf	??_out_init
  4964  0F25  084C               	movf	??_out_init,w
  4965  0F26  1683               	bsf	3,5	;RP0=1, select bank1
  4966  0F27  1303               	bcf	3,6	;RP1=0, select bank1
  4967  0F28  00AF               	movwf	(_app^(0+128)+15)
  4968                           
  4969                           ;application.c: 152: app.pwmlast = 100;
  4970  0F29  3064               	movlw	100
  4971  0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  4972  0F2B  1303               	bcf	3,6	;RP1=0, select bank0
  4973  0F2C  00CC               	movwf	??_out_init
  4974  0F2D  084C               	movf	??_out_init,w
  4975  0F2E  1683               	bsf	3,5	;RP0=1, select bank1
  4976  0F2F  1303               	bcf	3,6	;RP1=0, select bank1
  4977  0F30  00B0               	movwf	(_app^(0+128)+16)
  4978                           
  4979                           ;application.c: 153: app.pwm = 100;
  4980  0F31  3064               	movlw	100
  4981  0F32  1283               	bcf	3,5	;RP0=0, select bank0
  4982  0F33  1303               	bcf	3,6	;RP1=0, select bank0
  4983  0F34  00CC               	movwf	??_out_init
  4984  0F35  084C               	movf	??_out_init,w
  4985  0F36  1683               	bsf	3,5	;RP0=1, select bank1
  4986  0F37  1303               	bcf	3,6	;RP1=0, select bank1
  4987  0F38  00AE               	movwf	(_app^(0+128)+14)
  4988  0F39  0008               	return
  4989  0F3A                     __end_of_out_init:	
  4990                           
  4991                           	psect	text16
  4992  09F6                     __ptext16:	
  4993 ;; *************** function _softPWM_init *****************
  4994 ;; Defined at:
  4995 ;;		line 11 in file "softPWM.c"
  4996 ;; Parameters:    Size  Location     Type
  4997 ;;  spwm            1    wreg     PTR struct SOFT_PWM
  4998 ;;		 -> soft_pwm(16), 
  4999 ;;  freq            2   41[BANK0 ] unsigned int 
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;  spwm            1   43[BANK0 ] PTR struct SOFT_PWM
  5002 ;;		 -> soft_pwm(16), 
  5003 ;; Return value:  Size  Location     Type
  5004 ;;                  1    wreg      void 
  5005 ;; Registers used:
  5006 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5007 ;; Tracked objects:
  5008 ;;		On entry : 0/0
  5009 ;;		On exit  : 0/0
  5010 ;;		Unchanged: 0/0
  5011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5012 ;;      Params:         0       2       0       0       0
  5013 ;;      Locals:         0       1       0       0       0
  5014 ;;      Temps:          0       0       0       0       0
  5015 ;;      Totals:         0       3       0       0       0
  5016 ;;Total ram usage:        3 bytes
  5017 ;; Hardware stack levels used:    1
  5018 ;; Hardware stack levels required when called:    4
  5019 ;; This function calls:
  5020 ;;		___lwdiv
  5021 ;;		_millis
  5022 ;;		_softPWM_Set
  5023 ;; This function is called by:
  5024 ;;		_out_init
  5025 ;; This function uses a non-reentrant model
  5026 ;;
  5027                           
  5028                           
  5029                           ;psect for function _softPWM_init
  5030  09F6                     _softPWM_init:	
  5031                           
  5032                           ;incstack = 0
  5033                           ; Regs used in _softPWM_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5034                           ;softPWM_init@spwm stored from wreg
  5035  09F6  1283               	bcf	3,5	;RP0=0, select bank0
  5036  09F7  1303               	bcf	3,6	;RP1=0, select bank0
  5037  09F8  00CB               	movwf	softPWM_init@spwm
  5038                           
  5039                           ;softPWM.c: 12: spwm->ms_time_freq = 1000/freq;
  5040  09F9  084A               	movf	softPWM_init@freq+1,w
  5041  09FA  00A1               	movwf	___lwdiv@divisor+1
  5042  09FB  0849               	movf	softPWM_init@freq,w
  5043  09FC  00A0               	movwf	___lwdiv@divisor
  5044  09FD  30E8               	movlw	232
  5045  09FE  00A2               	movwf	___lwdiv@dividend
  5046  09FF  3003               	movlw	3
  5047  0A00  00A3               	movwf	___lwdiv@dividend+1
  5048  0A01  120A  158A  226D  120A  158A  	fcall	___lwdiv
  5049  0A06  1283               	bcf	3,5	;RP0=0, select bank0
  5050  0A07  1303               	bcf	3,6	;RP1=0, select bank0
  5051  0A08  084B               	movf	softPWM_init@spwm,w
  5052  0A09  3E03               	addlw	3
  5053  0A0A  0084               	movwf	4
  5054  0A0B  0820               	movf	?___lwdiv,w
  5055  0A0C  1383               	bcf	3,7	;select IRP bank0
  5056  0A0D  0080               	movwf	0
  5057  0A0E  0A84               	incf	4,f
  5058  0A0F  0821               	movf	?___lwdiv+1,w
  5059  0A10  0080               	movwf	0
  5060                           
  5061                           ;softPWM.c: 13: spwm->percent_Pwm = 0;
  5062  0A11  084B               	movf	softPWM_init@spwm,w
  5063  0A12  3E09               	addlw	9
  5064  0A13  0084               	movwf	4
  5065  0A14  0180               	clrf	0
  5066                           
  5067                           ;softPWM.c: 14: softPWM_Set(spwm,0);
  5068  0A15  01BB               	clrf	softPWM_Set@perc
  5069  0A16  084B               	movf	softPWM_init@spwm,w
  5070  0A17  120A  158A  25F0  120A  158A  	fcall	_softPWM_Set
  5071                           
  5072                           ;softPWM.c: 15: spwm->mstime = millis();
  5073  0A1C  120A  158A  20E4   	fcall	_millis
  5074  0A1F  1283               	bcf	3,5	;RP0=0, select bank0
  5075  0A20  1303               	bcf	3,6	;RP1=0, select bank0
  5076  0A21  084B               	movf	softPWM_init@spwm,w
  5077  0A22  3E0A               	addlw	10
  5078  0A23  0084               	movwf	4
  5079  0A24  0820               	movf	?_millis,w
  5080  0A25  1383               	bcf	3,7	;select IRP bank0
  5081  0A26  0080               	movwf	0
  5082  0A27  0A84               	incf	4,f
  5083  0A28  0821               	movf	?_millis+1,w
  5084  0A29  0080               	movwf	0
  5085  0A2A  0A84               	incf	4,f
  5086  0A2B  0822               	movf	?_millis+2,w
  5087  0A2C  0080               	movwf	0
  5088  0A2D  0A84               	incf	4,f
  5089  0A2E  0823               	movf	?_millis+3,w
  5090  0A2F  0080               	movwf	0
  5091  0A30  0008               	return
  5092  0A31                     __end_of_softPWM_init:	
  5093                           
  5094                           	psect	text17
  5095  0A6D                     __ptext17:	
  5096 ;; *************** function ___lwdiv *****************
  5097 ;; Defined at:
  5098 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  5099 ;; Parameters:    Size  Location     Type
  5100 ;;  divisor         2    0[BANK0 ] unsigned int 
  5101 ;;  dividend        2    2[BANK0 ] unsigned int 
  5102 ;; Auto vars:     Size  Location     Type
  5103 ;;  quotient        2    5[BANK0 ] unsigned int 
  5104 ;;  counter         1    4[BANK0 ] unsigned char 
  5105 ;; Return value:  Size  Location     Type
  5106 ;;                  2    0[BANK0 ] unsigned int 
  5107 ;; Registers used:
  5108 ;;		wreg, status,2, status,0
  5109 ;; Tracked objects:
  5110 ;;		On entry : 0/0
  5111 ;;		On exit  : 0/0
  5112 ;;		Unchanged: 0/0
  5113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5114 ;;      Params:         0       4       0       0       0
  5115 ;;      Locals:         0       3       0       0       0
  5116 ;;      Temps:          1       0       0       0       0
  5117 ;;      Totals:         1       7       0       0       0
  5118 ;;Total ram usage:        8 bytes
  5119 ;; Hardware stack levels used:    1
  5120 ;; Hardware stack levels required when called:    1
  5121 ;; This function calls:
  5122 ;;		Nothing
  5123 ;; This function is called by:
  5124 ;;		_softPWM_init
  5125 ;; This function uses a non-reentrant model
  5126 ;;
  5127                           
  5128                           
  5129                           ;psect for function ___lwdiv
  5130  0A6D                     ___lwdiv:	
  5131                           
  5132                           ;incstack = 0
  5133                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5134  0A6D  1283               	bcf	3,5	;RP0=0, select bank0
  5135  0A6E  1303               	bcf	3,6	;RP1=0, select bank0
  5136  0A6F  01A5               	clrf	___lwdiv@quotient
  5137  0A70  01A6               	clrf	___lwdiv@quotient+1
  5138  0A71  0820               	movf	___lwdiv@divisor,w
  5139  0A72  0421               	iorwf	___lwdiv@divisor+1,w
  5140  0A73  1903               	btfsc	3,2
  5141  0A74  2AA6               	goto	l2595
  5142  0A75  01A4               	clrf	___lwdiv@counter
  5143  0A76  0AA4               	incf	___lwdiv@counter,f
  5144  0A77                     l2583:	
  5145  0A77  1BA1               	btfsc	___lwdiv@divisor+1,7
  5146  0A78  2A85               	goto	l2585
  5147  0A79  3001               	movlw	1
  5148  0A7A                     u3235:	
  5149  0A7A  1003               	clrc
  5150  0A7B  0DA0               	rlf	___lwdiv@divisor,f
  5151  0A7C  0DA1               	rlf	___lwdiv@divisor+1,f
  5152  0A7D  3EFF               	addlw	-1
  5153  0A7E  1D03               	skipz
  5154  0A7F  2A7A               	goto	u3235
  5155  0A80  3001               	movlw	1
  5156  0A81  00F4               	movwf	??___lwdiv
  5157  0A82  0874               	movf	??___lwdiv,w
  5158  0A83  07A4               	addwf	___lwdiv@counter,f
  5159  0A84  2A77               	goto	l2583
  5160  0A85                     l2585:	
  5161  0A85  3001               	movlw	1
  5162  0A86                     u3255:	
  5163  0A86  1003               	clrc
  5164  0A87  0DA5               	rlf	___lwdiv@quotient,f
  5165  0A88  0DA6               	rlf	___lwdiv@quotient+1,f
  5166  0A89  3EFF               	addlw	-1
  5167  0A8A  1D03               	skipz
  5168  0A8B  2A86               	goto	u3255
  5169  0A8C  0821               	movf	___lwdiv@divisor+1,w
  5170  0A8D  0223               	subwf	___lwdiv@dividend+1,w
  5171  0A8E  1D03               	skipz
  5172  0A8F  2A92               	goto	u3265
  5173  0A90  0820               	movf	___lwdiv@divisor,w
  5174  0A91  0222               	subwf	___lwdiv@dividend,w
  5175  0A92                     u3265:	
  5176  0A92  1C03               	skipc
  5177  0A93  2A9B               	goto	l2591
  5178  0A94  0820               	movf	___lwdiv@divisor,w
  5179  0A95  02A2               	subwf	___lwdiv@dividend,f
  5180  0A96  0821               	movf	___lwdiv@divisor+1,w
  5181  0A97  1C03               	skipc
  5182  0A98  03A3               	decf	___lwdiv@dividend+1,f
  5183  0A99  02A3               	subwf	___lwdiv@dividend+1,f
  5184  0A9A  1425               	bsf	___lwdiv@quotient,0
  5185  0A9B                     l2591:	
  5186  0A9B  3001               	movlw	1
  5187  0A9C                     u3275:	
  5188  0A9C  1003               	clrc
  5189  0A9D  0CA1               	rrf	___lwdiv@divisor+1,f
  5190  0A9E  0CA0               	rrf	___lwdiv@divisor,f
  5191  0A9F  3EFF               	addlw	-1
  5192  0AA0  1D03               	skipz
  5193  0AA1  2A9C               	goto	u3275
  5194  0AA2  3001               	movlw	1
  5195  0AA3  02A4               	subwf	___lwdiv@counter,f
  5196  0AA4  1D03               	btfss	3,2
  5197  0AA5  2A85               	goto	l2585
  5198  0AA6                     l2595:	
  5199  0AA6  0826               	movf	___lwdiv@quotient+1,w
  5200  0AA7  00A1               	movwf	?___lwdiv+1
  5201  0AA8  0825               	movf	___lwdiv@quotient,w
  5202  0AA9  00A0               	movwf	?___lwdiv
  5203  0AAA  0008               	return
  5204  0AAB                     __end_of___lwdiv:	
  5205                           
  5206                           	psect	text18
  5207  06B6                     __ptext18:	
  5208 ;; *************** function _out_SW1_SW2__ON *****************
  5209 ;; Defined at:
  5210 ;;		line 186 in file "application.c"
  5211 ;; Parameters:    Size  Location     Type
  5212 ;;  o1              1    wreg     PTR struct OUTPUT
  5213 ;;		 -> output_P4(7), output_P3(7), output_P2(7), output_P1(7), 
  5214 ;;  o2              1    0[BANK0 ] PTR struct OUTPUT
  5215 ;;		 -> output_P4(7), output_P3(7), output_P2(7), output_P1(7), 
  5216 ;; Auto vars:     Size  Location     Type
  5217 ;;  o1              1    5[COMMON] PTR struct OUTPUT
  5218 ;;		 -> output_P4(7), output_P3(7), output_P2(7), output_P1(7), 
  5219 ;;  pinmask         1    4[COMMON] unsigned char 
  5220 ;;  value           1    0        unsigned char 
  5221 ;; Return value:  Size  Location     Type
  5222 ;;                  1    wreg      void 
  5223 ;; Registers used:
  5224 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5225 ;; Tracked objects:
  5226 ;;		On entry : 0/0
  5227 ;;		On exit  : 0/0
  5228 ;;		Unchanged: 0/0
  5229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5230 ;;      Params:         0       1       0       0       0
  5231 ;;      Locals:         2       0       0       0       0
  5232 ;;      Temps:          0       5       0       0       0
  5233 ;;      Totals:         2       6       0       0       0
  5234 ;;Total ram usage:        8 bytes
  5235 ;; Hardware stack levels used:    1
  5236 ;; Hardware stack levels required when called:    1
  5237 ;; This function calls:
  5238 ;;		Nothing
  5239 ;; This function is called by:
  5240 ;;		_main
  5241 ;; This function uses a non-reentrant model
  5242 ;;
  5243                           
  5244                           
  5245                           ;psect for function _out_SW1_SW2__ON
  5246  06B6                     _out_SW1_SW2__ON:	
  5247                           
  5248                           ;incstack = 0
  5249                           ; Regs used in _out_SW1_SW2__ON: [wreg-fsr0h+status,2+status,0]
  5250                           ;out_SW1_SW2__ON@o1 stored from wreg
  5251  06B6  00F5               	movwf	out_SW1_SW2__ON@o1
  5252                           
  5253                           ;application.c: 188: uint8_t value, pinmask;
  5254                           ;application.c: 191: pinmask = (1<<o1->pinPOTENZA);
  5255  06B7  3001               	movlw	1
  5256  06B8  1283               	bcf	3,5	;RP0=0, select bank0
  5257  06B9  1303               	bcf	3,6	;RP1=0, select bank0
  5258  06BA  00A1               	movwf	??_out_SW1_SW2__ON
  5259  06BB  0875               	movf	out_SW1_SW2__ON@o1,w
  5260  06BC  3E02               	addlw	2
  5261  06BD  0084               	movwf	4
  5262  06BE  1383               	bcf	3,7	;select IRP bank0
  5263  06BF  0A00               	incf	0,w
  5264  06C0  2EC3               	goto	u3474
  5265  06C1                     u3475:	
  5266  06C1  1003               	clrc
  5267  06C2  0DA1               	rlf	??_out_SW1_SW2__ON,f
  5268  06C3                     u3474:	
  5269  06C3  3EFF               	addlw	-1
  5270  06C4  1D03               	skipz
  5271  06C5  2EC1               	goto	u3475
  5272  06C6  0821               	movf	??_out_SW1_SW2__ON,w
  5273  06C7  00A2               	movwf	??_out_SW1_SW2__ON+1
  5274  06C8  0822               	movf	??_out_SW1_SW2__ON+1,w
  5275  06C9  00F4               	movwf	out_SW1_SW2__ON@pinmask
  5276                           
  5277                           ;application.c: 192: *o1->portPOTENZA = *o1->portPOTENZA | pinmask;
  5278  06CA  0875               	movf	out_SW1_SW2__ON@o1,w
  5279  06CB  0084               	movwf	4
  5280  06CC  0800               	movf	0,w
  5281  06CD  00A1               	movwf	??_out_SW1_SW2__ON
  5282  06CE  0A84               	incf	4,f
  5283  06CF  0800               	movf	0,w
  5284  06D0  00A2               	movwf	??_out_SW1_SW2__ON+1
  5285  06D1  0821               	movf	??_out_SW1_SW2__ON,w
  5286  06D2  0084               	movwf	4
  5287  06D3  1783               	bsf	3,7
  5288  06D4  1C22               	btfss	??_out_SW1_SW2__ON+1,0
  5289  06D5  1383               	bcf	3,7
  5290  06D6  0800               	movf	0,w
  5291  06D7  0474               	iorwf	out_SW1_SW2__ON@pinmask,w
  5292  06D8  00A3               	movwf	??_out_SW1_SW2__ON+2
  5293  06D9  0875               	movf	out_SW1_SW2__ON@o1,w
  5294  06DA  0084               	movwf	4
  5295  06DB  1383               	bcf	3,7	;select IRP bank0
  5296  06DC  0800               	movf	0,w
  5297  06DD  00A4               	movwf	??_out_SW1_SW2__ON+3
  5298  06DE  0A84               	incf	4,f
  5299  06DF  0800               	movf	0,w
  5300  06E0  00A5               	movwf	??_out_SW1_SW2__ON+4
  5301  06E1  0824               	movf	??_out_SW1_SW2__ON+3,w
  5302  06E2  0084               	movwf	4
  5303  06E3  1783               	bsf	3,7
  5304  06E4  1C25               	btfss	??_out_SW1_SW2__ON+4,0
  5305  06E5  1383               	bcf	3,7
  5306  06E6  0823               	movf	??_out_SW1_SW2__ON+2,w
  5307  06E7  0080               	movwf	0
  5308                           
  5309                           ;application.c: 195: pinmask = (1<<o1->pinLED);
  5310  06E8  3001               	movlw	1
  5311  06E9  00A1               	movwf	??_out_SW1_SW2__ON
  5312  06EA  0875               	movf	out_SW1_SW2__ON@o1,w
  5313  06EB  3E05               	addlw	5
  5314  06EC  0084               	movwf	4
  5315  06ED  1383               	bcf	3,7	;select IRP bank0
  5316  06EE  0A00               	incf	0,w
  5317  06EF  2EF2               	goto	u3484
  5318  06F0                     u3485:	
  5319  06F0  1003               	clrc
  5320  06F1  0DA1               	rlf	??_out_SW1_SW2__ON,f
  5321  06F2                     u3484:	
  5322  06F2  3EFF               	addlw	-1
  5323  06F3  1D03               	skipz
  5324  06F4  2EF0               	goto	u3485
  5325  06F5  0821               	movf	??_out_SW1_SW2__ON,w
  5326  06F6  00A2               	movwf	??_out_SW1_SW2__ON+1
  5327  06F7  0822               	movf	??_out_SW1_SW2__ON+1,w
  5328  06F8  00F4               	movwf	out_SW1_SW2__ON@pinmask
  5329                           
  5330                           ;application.c: 196: *o1->portLED = *o1->portLED | pinmask;
  5331  06F9  0875               	movf	out_SW1_SW2__ON@o1,w
  5332  06FA  3E03               	addlw	3
  5333  06FB  0084               	movwf	4
  5334  06FC  0800               	movf	0,w
  5335  06FD  00A1               	movwf	??_out_SW1_SW2__ON
  5336  06FE  0A84               	incf	4,f
  5337  06FF  0800               	movf	0,w
  5338  0700  00A2               	movwf	??_out_SW1_SW2__ON+1
  5339  0701  0821               	movf	??_out_SW1_SW2__ON,w
  5340  0702  0084               	movwf	4
  5341  0703  1783               	bsf	3,7
  5342  0704  1C22               	btfss	??_out_SW1_SW2__ON+1,0
  5343  0705  1383               	bcf	3,7
  5344  0706  0800               	movf	0,w
  5345  0707  0474               	iorwf	out_SW1_SW2__ON@pinmask,w
  5346  0708  00A3               	movwf	??_out_SW1_SW2__ON+2
  5347  0709  0875               	movf	out_SW1_SW2__ON@o1,w
  5348  070A  3E03               	addlw	3
  5349  070B  0084               	movwf	4
  5350  070C  1383               	bcf	3,7	;select IRP bank0
  5351  070D  0800               	movf	0,w
  5352  070E  00A4               	movwf	??_out_SW1_SW2__ON+3
  5353  070F  0A84               	incf	4,f
  5354  0710  0800               	movf	0,w
  5355  0711  00A5               	movwf	??_out_SW1_SW2__ON+4
  5356  0712  0824               	movf	??_out_SW1_SW2__ON+3,w
  5357  0713  0084               	movwf	4
  5358  0714  1783               	bsf	3,7
  5359  0715  1C25               	btfss	??_out_SW1_SW2__ON+4,0
  5360  0716  1383               	bcf	3,7
  5361  0717  0823               	movf	??_out_SW1_SW2__ON+2,w
  5362  0718  0080               	movwf	0
  5363                           
  5364                           ;application.c: 199: pinmask = (1<<o2->pinPOTENZA);
  5365  0719  3001               	movlw	1
  5366  071A  00A1               	movwf	??_out_SW1_SW2__ON
  5367  071B  0820               	movf	out_SW1_SW2__ON@o2,w
  5368  071C  3E02               	addlw	2
  5369  071D  0084               	movwf	4
  5370  071E  1383               	bcf	3,7	;select IRP bank0
  5371  071F  0A00               	incf	0,w
  5372  0720  2F23               	goto	u3494
  5373  0721                     u3495:	
  5374  0721  1003               	clrc
  5375  0722  0DA1               	rlf	??_out_SW1_SW2__ON,f
  5376  0723                     u3494:	
  5377  0723  3EFF               	addlw	-1
  5378  0724  1D03               	skipz
  5379  0725  2F21               	goto	u3495
  5380  0726  0821               	movf	??_out_SW1_SW2__ON,w
  5381  0727  00A2               	movwf	??_out_SW1_SW2__ON+1
  5382  0728  0822               	movf	??_out_SW1_SW2__ON+1,w
  5383  0729  00F4               	movwf	out_SW1_SW2__ON@pinmask
  5384                           
  5385                           ;application.c: 200: *o2->portPOTENZA = *o2->portPOTENZA | pinmask;
  5386  072A  0820               	movf	out_SW1_SW2__ON@o2,w
  5387  072B  0084               	movwf	4
  5388  072C  0800               	movf	0,w
  5389  072D  00A1               	movwf	??_out_SW1_SW2__ON
  5390  072E  0A84               	incf	4,f
  5391  072F  0800               	movf	0,w
  5392  0730  00A2               	movwf	??_out_SW1_SW2__ON+1
  5393  0731  0821               	movf	??_out_SW1_SW2__ON,w
  5394  0732  0084               	movwf	4
  5395  0733  1783               	bsf	3,7
  5396  0734  1C22               	btfss	??_out_SW1_SW2__ON+1,0
  5397  0735  1383               	bcf	3,7
  5398  0736  0800               	movf	0,w
  5399  0737  0474               	iorwf	out_SW1_SW2__ON@pinmask,w
  5400  0738  00A3               	movwf	??_out_SW1_SW2__ON+2
  5401  0739  0820               	movf	out_SW1_SW2__ON@o2,w
  5402  073A  0084               	movwf	4
  5403  073B  1383               	bcf	3,7	;select IRP bank0
  5404  073C  0800               	movf	0,w
  5405  073D  00A4               	movwf	??_out_SW1_SW2__ON+3
  5406  073E  0A84               	incf	4,f
  5407  073F  0800               	movf	0,w
  5408  0740  00A5               	movwf	??_out_SW1_SW2__ON+4
  5409  0741  0824               	movf	??_out_SW1_SW2__ON+3,w
  5410  0742  0084               	movwf	4
  5411  0743  1783               	bsf	3,7
  5412  0744  1C25               	btfss	??_out_SW1_SW2__ON+4,0
  5413  0745  1383               	bcf	3,7
  5414  0746  0823               	movf	??_out_SW1_SW2__ON+2,w
  5415  0747  0080               	movwf	0
  5416                           
  5417                           ;application.c: 203: pinmask = (1<<o2->pinLED);
  5418  0748  3001               	movlw	1
  5419  0749  00A1               	movwf	??_out_SW1_SW2__ON
  5420  074A  0820               	movf	out_SW1_SW2__ON@o2,w
  5421  074B  3E05               	addlw	5
  5422  074C  0084               	movwf	4
  5423  074D  1383               	bcf	3,7	;select IRP bank0
  5424  074E  0A00               	incf	0,w
  5425  074F  2F52               	goto	u3504
  5426  0750                     u3505:	
  5427  0750  1003               	clrc
  5428  0751  0DA1               	rlf	??_out_SW1_SW2__ON,f
  5429  0752                     u3504:	
  5430  0752  3EFF               	addlw	-1
  5431  0753  1D03               	skipz
  5432  0754  2F50               	goto	u3505
  5433  0755  0821               	movf	??_out_SW1_SW2__ON,w
  5434  0756  00A2               	movwf	??_out_SW1_SW2__ON+1
  5435  0757  0822               	movf	??_out_SW1_SW2__ON+1,w
  5436  0758  00F4               	movwf	out_SW1_SW2__ON@pinmask
  5437                           
  5438                           ;application.c: 204: *o2->portLED = *o2->portLED | pinmask;
  5439  0759  0820               	movf	out_SW1_SW2__ON@o2,w
  5440  075A  3E03               	addlw	3
  5441  075B  0084               	movwf	4
  5442  075C  0800               	movf	0,w
  5443  075D  00A1               	movwf	??_out_SW1_SW2__ON
  5444  075E  0A84               	incf	4,f
  5445  075F  0800               	movf	0,w
  5446  0760  00A2               	movwf	??_out_SW1_SW2__ON+1
  5447  0761  0821               	movf	??_out_SW1_SW2__ON,w
  5448  0762  0084               	movwf	4
  5449  0763  1783               	bsf	3,7
  5450  0764  1C22               	btfss	??_out_SW1_SW2__ON+1,0
  5451  0765  1383               	bcf	3,7
  5452  0766  0800               	movf	0,w
  5453  0767  0474               	iorwf	out_SW1_SW2__ON@pinmask,w
  5454  0768  00A3               	movwf	??_out_SW1_SW2__ON+2
  5455  0769  0820               	movf	out_SW1_SW2__ON@o2,w
  5456  076A  3E03               	addlw	3
  5457  076B  0084               	movwf	4
  5458  076C  1383               	bcf	3,7	;select IRP bank0
  5459  076D  0800               	movf	0,w
  5460  076E  00A4               	movwf	??_out_SW1_SW2__ON+3
  5461  076F  0A84               	incf	4,f
  5462  0770  0800               	movf	0,w
  5463  0771  00A5               	movwf	??_out_SW1_SW2__ON+4
  5464  0772  0824               	movf	??_out_SW1_SW2__ON+3,w
  5465  0773  0084               	movwf	4
  5466  0774  1783               	bsf	3,7
  5467  0775  1C25               	btfss	??_out_SW1_SW2__ON+4,0
  5468  0776  1383               	bcf	3,7
  5469  0777  0823               	movf	??_out_SW1_SW2__ON+2,w
  5470  0778  0080               	movwf	0
  5471                           
  5472                           ;application.c: 206: o1->state = 1;
  5473  0779  0875               	movf	out_SW1_SW2__ON@o1,w
  5474  077A  3E06               	addlw	6
  5475  077B  0084               	movwf	4
  5476  077C  1383               	bcf	3,7	;select IRP bank0
  5477  077D  0180               	clrf	0
  5478  077E  0A80               	incf	0,f
  5479                           
  5480                           ;application.c: 207: o2->state = 1;
  5481  077F  0820               	movf	out_SW1_SW2__ON@o2,w
  5482  0780  3E06               	addlw	6
  5483  0781  0084               	movwf	4
  5484  0782  0180               	clrf	0
  5485  0783  0A80               	incf	0,f
  5486  0784  0008               	return
  5487  0785                     __end_of_out_SW1_SW2__ON:	
  5488                           
  5489                           	psect	text19
  5490  08BA                     __ptext19:	
  5491 ;; *************** function _buzzer_init *****************
  5492 ;; Defined at:
  5493 ;;		line 60 in file "application.c"
  5494 ;; Parameters:    Size  Location     Type
  5495 ;;		None
  5496 ;; Auto vars:     Size  Location     Type
  5497 ;;		None
  5498 ;; Return value:  Size  Location     Type
  5499 ;;                  1    wreg      void 
  5500 ;; Registers used:
  5501 ;;		None
  5502 ;; Tracked objects:
  5503 ;;		On entry : 0/0
  5504 ;;		On exit  : 0/0
  5505 ;;		Unchanged: 0/0
  5506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5507 ;;      Params:         0       0       0       0       0
  5508 ;;      Locals:         0       0       0       0       0
  5509 ;;      Temps:          0       0       0       0       0
  5510 ;;      Totals:         0       0       0       0       0
  5511 ;;Total ram usage:        0 bytes
  5512 ;; Hardware stack levels used:    1
  5513 ;; Hardware stack levels required when called:    1
  5514 ;; This function calls:
  5515 ;;		Nothing
  5516 ;; This function is called by:
  5517 ;;		_main
  5518 ;; This function uses a non-reentrant model
  5519 ;;
  5520                           
  5521                           
  5522                           ;psect for function _buzzer_init
  5523  08BA                     _buzzer_init:	
  5524                           
  5525                           ;application.c: 61: TRISAbits.TRISA6 = 0;
  5526                           
  5527                           ;incstack = 0
  5528                           ; Regs used in _buzzer_init: []
  5529  08BA  1683               	bsf	3,5	;RP0=1, select bank1
  5530  08BB  1303               	bcf	3,6	;RP1=0, select bank1
  5531  08BC  1305               	bcf	5,6	;volatile
  5532                           
  5533                           ;application.c: 62: PORTAbits.RA6 = 0;
  5534  08BD  1283               	bcf	3,5	;RP0=0, select bank0
  5535  08BE  1303               	bcf	3,6	;RP1=0, select bank0
  5536  08BF  1305               	bcf	5,6	;volatile
  5537  08C0  0008               	return
  5538  08C1                     __end_of_buzzer_init:	
  5539                           
  5540                           	psect	text20
  5541  08B3                     __ptext20:	
  5542 ;; *************** function _buzzer_Stop *****************
  5543 ;; Defined at:
  5544 ;;		line 70 in file "application.c"
  5545 ;; Parameters:    Size  Location     Type
  5546 ;;		None
  5547 ;; Auto vars:     Size  Location     Type
  5548 ;;		None
  5549 ;; Return value:  Size  Location     Type
  5550 ;;                  1    wreg      void 
  5551 ;; Registers used:
  5552 ;;		status,2
  5553 ;; Tracked objects:
  5554 ;;		On entry : 0/0
  5555 ;;		On exit  : 0/0
  5556 ;;		Unchanged: 0/0
  5557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5558 ;;      Params:         0       0       0       0       0
  5559 ;;      Locals:         0       0       0       0       0
  5560 ;;      Temps:          0       0       0       0       0
  5561 ;;      Totals:         0       0       0       0       0
  5562 ;;Total ram usage:        0 bytes
  5563 ;; Hardware stack levels used:    1
  5564 ;; Hardware stack levels required when called:    1
  5565 ;; This function calls:
  5566 ;;		Nothing
  5567 ;; This function is called by:
  5568 ;;		_main
  5569 ;; This function uses a non-reentrant model
  5570 ;;
  5571                           
  5572                           
  5573                           ;psect for function _buzzer_Stop
  5574  08B3                     _buzzer_Stop:	
  5575                           
  5576                           ;application.c: 71: PORTAbits.RA6 = 0;
  5577                           
  5578                           ;incstack = 0
  5579                           ; Regs used in _buzzer_Stop: [status,2]
  5580  08B3  1283               	bcf	3,5	;RP0=0, select bank0
  5581  08B4  1303               	bcf	3,6	;RP1=0, select bank0
  5582  08B5  1305               	bcf	5,6	;volatile
  5583                           
  5584                           ;application.c: 72: app.buzzer_state = 0;
  5585  08B6  1683               	bsf	3,5	;RP0=1, select bank1
  5586  08B7  1303               	bcf	3,6	;RP1=0, select bank1
  5587  08B8  01A0               	clrf	_app^(0+128)
  5588  08B9  0008               	return
  5589  08BA                     __end_of_buzzer_Stop:	
  5590                           
  5591                           	psect	text21
  5592  095E                     __ptext21:	
  5593 ;; *************** function _buzzer_Start *****************
  5594 ;; Defined at:
  5595 ;;		line 65 in file "application.c"
  5596 ;; Parameters:    Size  Location     Type
  5597 ;;		None
  5598 ;; Auto vars:     Size  Location     Type
  5599 ;;		None
  5600 ;; Return value:  Size  Location     Type
  5601 ;;                  1    wreg      void 
  5602 ;; Registers used:
  5603 ;;		wreg, pclath, cstack
  5604 ;; Tracked objects:
  5605 ;;		On entry : 0/0
  5606 ;;		On exit  : 0/0
  5607 ;;		Unchanged: 0/0
  5608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5609 ;;      Params:         0       0       0       0       0
  5610 ;;      Locals:         0       0       0       0       0
  5611 ;;      Temps:          0       0       0       0       0
  5612 ;;      Totals:         0       0       0       0       0
  5613 ;;Total ram usage:        0 bytes
  5614 ;; Hardware stack levels used:    1
  5615 ;; Hardware stack levels required when called:    2
  5616 ;; This function calls:
  5617 ;;		_millis
  5618 ;; This function is called by:
  5619 ;;		_main
  5620 ;; This function uses a non-reentrant model
  5621 ;;
  5622                           
  5623                           
  5624                           ;psect for function _buzzer_Start
  5625  095E                     _buzzer_Start:	
  5626                           
  5627                           ;application.c: 66: PORTAbits.RA6 = 1;
  5628                           
  5629                           ;incstack = 0
  5630                           ; Regs used in _buzzer_Start: [wreg+pclath+cstack]
  5631  095E  1283               	bcf	3,5	;RP0=0, select bank0
  5632  095F  1303               	bcf	3,6	;RP1=0, select bank0
  5633  0960  1705               	bsf	5,6	;volatile
  5634                           
  5635                           ;application.c: 67: app.buzzer_state = 1;
  5636  0961  1683               	bsf	3,5	;RP0=1, select bank1
  5637  0962  1303               	bcf	3,6	;RP1=0, select bank1
  5638  0963  01A0               	clrf	_app^(0+128)
  5639  0964  0AA0               	incf	_app^(0+128),f
  5640                           
  5641                           ;application.c: 68: app.buzzer_starttime = millis();
  5642  0965  120A  158A  20E4   	fcall	_millis
  5643  0968  1283               	bcf	3,5	;RP0=0, select bank0
  5644  0969  1303               	bcf	3,6	;RP1=0, select bank0
  5645  096A  0823               	movf	?_millis+3,w
  5646  096B  1683               	bsf	3,5	;RP0=1, select bank1
  5647  096C  1303               	bcf	3,6	;RP1=0, select bank1
  5648  096D  00A4               	movwf	((_app+3)^(0+128)+1)
  5649  096E  1283               	bcf	3,5	;RP0=0, select bank0
  5650  096F  1303               	bcf	3,6	;RP1=0, select bank0
  5651  0970  0822               	movf	?_millis+2,w
  5652  0971  1683               	bsf	3,5	;RP0=1, select bank1
  5653  0972  1303               	bcf	3,6	;RP1=0, select bank1
  5654  0973  00A3               	movwf	((_app+2)^(0+128)+1)
  5655  0974  1283               	bcf	3,5	;RP0=0, select bank0
  5656  0975  1303               	bcf	3,6	;RP1=0, select bank0
  5657  0976  0821               	movf	?_millis+1,w
  5658  0977  1683               	bsf	3,5	;RP0=1, select bank1
  5659  0978  1303               	bcf	3,6	;RP1=0, select bank1
  5660  0979  00A2               	movwf	((_app+1)^(0+128)+1)
  5661  097A  1283               	bcf	3,5	;RP0=0, select bank0
  5662  097B  1303               	bcf	3,6	;RP1=0, select bank0
  5663  097C  0820               	movf	?_millis,w
  5664  097D  1683               	bsf	3,5	;RP0=1, select bank1
  5665  097E  1303               	bcf	3,6	;RP1=0, select bank1
  5666  097F  00A1               	movwf	(_app^(0+128)+1)
  5667  0980  0008               	return
  5668  0981                     __end_of_buzzer_Start:	
  5669                           
  5670                           	psect	text22
  5671  0A31                     __ptext22:	
  5672 ;; *************** function _ON_LED *****************
  5673 ;; Defined at:
  5674 ;;		line 238 in file "application.c"
  5675 ;; Parameters:    Size  Location     Type
  5676 ;;  state           1    wreg     unsigned char 
  5677 ;; Auto vars:     Size  Location     Type
  5678 ;;  state           1   42[BANK0 ] unsigned char 
  5679 ;; Return value:  Size  Location     Type
  5680 ;;                  1    wreg      void 
  5681 ;; Registers used:
  5682 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5683 ;; Tracked objects:
  5684 ;;		On entry : 0/0
  5685 ;;		On exit  : 0/0
  5686 ;;		Unchanged: 0/0
  5687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5688 ;;      Params:         0       0       0       0       0
  5689 ;;      Locals:         0       1       0       0       0
  5690 ;;      Temps:          0       1       0       0       0
  5691 ;;      Totals:         0       2       0       0       0
  5692 ;;Total ram usage:        2 bytes
  5693 ;; Hardware stack levels used:    1
  5694 ;; Hardware stack levels required when called:    4
  5695 ;; This function calls:
  5696 ;;		_millis
  5697 ;;		_softPWM_Set
  5698 ;; This function is called by:
  5699 ;;		_main
  5700 ;; This function uses a non-reentrant model
  5701 ;;
  5702                           
  5703                           
  5704                           ;psect for function _ON_LED
  5705  0A31                     _ON_LED:	
  5706                           
  5707                           ;incstack = 0
  5708                           ; Regs used in _ON_LED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5709                           ;ON_LED@state stored from wreg
  5710  0A31  1283               	bcf	3,5	;RP0=0, select bank0
  5711  0A32  1303               	bcf	3,6	;RP1=0, select bank0
  5712  0A33  00CA               	movwf	ON_LED@state
  5713                           
  5714                           ;application.c: 239: if(state){
  5715  0A34  084A               	movf	ON_LED@state,w
  5716  0A35  1903               	btfsc	3,2
  5717  0A36  2A63               	goto	l2841
  5718                           
  5719                           ;application.c: 241: softPWM_Set(&soft_pwm, app.pwm);
  5720  0A37  1683               	bsf	3,5	;RP0=1, select bank1
  5721  0A38  1303               	bcf	3,6	;RP1=0, select bank1
  5722  0A39  082E               	movf	(_app^(0+128)+14),w
  5723  0A3A  1283               	bcf	3,5	;RP0=0, select bank0
  5724  0A3B  1303               	bcf	3,6	;RP1=0, select bank0
  5725  0A3C  00C9               	movwf	??_ON_LED
  5726  0A3D  0849               	movf	??_ON_LED,w
  5727  0A3E  00BB               	movwf	softPWM_Set@perc
  5728  0A3F  30B8               	movlw	(low (_soft_pwm| 0))& (0+255)
  5729  0A40  120A  158A  25F0  120A  158A  	fcall	_softPWM_Set
  5730                           
  5731                           ;application.c: 242: app.onLed_starttime = millis();
  5732  0A45  120A  158A  20E4   	fcall	_millis
  5733  0A48  1283               	bcf	3,5	;RP0=0, select bank0
  5734  0A49  1303               	bcf	3,6	;RP1=0, select bank0
  5735  0A4A  0823               	movf	?_millis+3,w
  5736  0A4B  1683               	bsf	3,5	;RP0=1, select bank1
  5737  0A4C  1303               	bcf	3,6	;RP1=0, select bank1
  5738  0A4D  00A9               	movwf	((_app+3)^(0+128)+6)
  5739  0A4E  1283               	bcf	3,5	;RP0=0, select bank0
  5740  0A4F  1303               	bcf	3,6	;RP1=0, select bank0
  5741  0A50  0822               	movf	?_millis+2,w
  5742  0A51  1683               	bsf	3,5	;RP0=1, select bank1
  5743  0A52  1303               	bcf	3,6	;RP1=0, select bank1
  5744  0A53  00A8               	movwf	((_app+2)^(0+128)+6)
  5745  0A54  1283               	bcf	3,5	;RP0=0, select bank0
  5746  0A55  1303               	bcf	3,6	;RP1=0, select bank0
  5747  0A56  0821               	movf	?_millis+1,w
  5748  0A57  1683               	bsf	3,5	;RP0=1, select bank1
  5749  0A58  1303               	bcf	3,6	;RP1=0, select bank1
  5750  0A59  00A7               	movwf	((_app+1)^(0+128)+6)
  5751  0A5A  1283               	bcf	3,5	;RP0=0, select bank0
  5752  0A5B  1303               	bcf	3,6	;RP1=0, select bank0
  5753  0A5C  0820               	movf	?_millis,w
  5754  0A5D  1683               	bsf	3,5	;RP0=1, select bank1
  5755  0A5E  1303               	bcf	3,6	;RP1=0, select bank1
  5756  0A5F  00A6               	movwf	(_app^(0+128)+6)
  5757                           
  5758                           ;application.c: 243: app.onLed_state = 1;
  5759  0A60  01A5               	clrf	(_app^(0+128)+5)
  5760  0A61  0AA5               	incf	(_app^(0+128)+5),f
  5761                           
  5762                           ;application.c: 244: }else{
  5763  0A62  0008               	return
  5764  0A63                     l2841:	
  5765                           
  5766                           ;application.c: 246: softPWM_Set(&soft_pwm, 0);
  5767  0A63  1283               	bcf	3,5	;RP0=0, select bank0
  5768  0A64  01BB               	clrf	softPWM_Set@perc
  5769  0A65  30B8               	movlw	(low (_soft_pwm| 0))& (0+255)
  5770  0A66  120A  158A  25F0   	fcall	_softPWM_Set
  5771                           
  5772                           ;application.c: 247: app.onLed_state = 0;
  5773  0A69  1683               	bsf	3,5	;RP0=1, select bank1
  5774  0A6A  1303               	bcf	3,6	;RP1=0, select bank1
  5775  0A6B  01A5               	clrf	(_app^(0+128)+5)
  5776  0A6C  0008               	return
  5777  0A6D                     __end_of_ON_LED:	
  5778                           
  5779                           	psect	text23
  5780  0DF0                     __ptext23:	
  5781 ;; *************** function _softPWM_Set *****************
  5782 ;; Defined at:
  5783 ;;		line 18 in file "softPWM.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;  spwm            1    wreg     PTR struct SOFT_PWM
  5786 ;;		 -> soft_pwm(16), 
  5787 ;;  perc            1   27[BANK0 ] unsigned char 
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;  spwm            1   40[BANK0 ] PTR struct SOFT_PWM
  5790 ;;		 -> soft_pwm(16), 
  5791 ;;  t               3   37[BANK0 ] float 
  5792 ;;  p               3   34[BANK0 ] float 
  5793 ;; Return value:  Size  Location     Type
  5794 ;;                  1    wreg      void 
  5795 ;; Registers used:
  5796 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5797 ;; Tracked objects:
  5798 ;;		On entry : 0/0
  5799 ;;		On exit  : 0/0
  5800 ;;		Unchanged: 0/0
  5801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5802 ;;      Params:         0       1       0       0       0
  5803 ;;      Locals:         0       7       0       0       0
  5804 ;;      Temps:          0       6       0       0       0
  5805 ;;      Totals:         0      14       0       0       0
  5806 ;;Total ram usage:       14 bytes
  5807 ;; Hardware stack levels used:    1
  5808 ;; Hardware stack levels required when called:    3
  5809 ;; This function calls:
  5810 ;;		___awdiv
  5811 ;;		___awtoft
  5812 ;;		___ftmul
  5813 ;;		___fttol
  5814 ;;		___lwtoft
  5815 ;; This function is called by:
  5816 ;;		_main
  5817 ;;		_ON_LED
  5818 ;;		_softPWM_init
  5819 ;; This function uses a non-reentrant model
  5820 ;;
  5821                           
  5822                           
  5823                           ;psect for function _softPWM_Set
  5824  0DF0                     _softPWM_Set:	
  5825                           
  5826                           ;incstack = 0
  5827                           ; Regs used in _softPWM_Set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5828                           ;softPWM_Set@spwm stored from wreg
  5829  0DF0  1283               	bcf	3,5	;RP0=0, select bank0
  5830  0DF1  1303               	bcf	3,6	;RP1=0, select bank0
  5831  0DF2  00C8               	movwf	softPWM_Set@spwm
  5832                           
  5833                           ;softPWM.c: 19: float p,t;
  5834                           ;softPWM.c: 20: spwm->percent_Pwm = perc;
  5835  0DF3  083B               	movf	softPWM_Set@perc,w
  5836  0DF4  00BC               	movwf	??_softPWM_Set
  5837  0DF5  0848               	movf	softPWM_Set@spwm,w
  5838  0DF6  3E09               	addlw	9
  5839  0DF7  0084               	movwf	4
  5840  0DF8  083C               	movf	??_softPWM_Set,w
  5841  0DF9  1383               	bcf	3,7	;select IRP bank0
  5842  0DFA  0080               	movwf	0
  5843                           
  5844                           ;softPWM.c: 21: p=perc/100;
  5845  0DFB  3064               	movlw	100
  5846  0DFC  00A0               	movwf	___awdiv@divisor
  5847  0DFD  3000               	movlw	0
  5848  0DFE  00A1               	movwf	___awdiv@divisor+1
  5849  0DFF  083B               	movf	softPWM_Set@perc,w
  5850  0E00  00BC               	movwf	??_softPWM_Set
  5851  0E01  01BD               	clrf	??_softPWM_Set+1
  5852  0E02  083C               	movf	??_softPWM_Set,w
  5853  0E03  00A2               	movwf	___awdiv@dividend
  5854  0E04  083D               	movf	??_softPWM_Set+1,w
  5855  0E05  00A3               	movwf	___awdiv@dividend+1
  5856  0E06  120A  158A  234B  120A  158A  	fcall	___awdiv
  5857  0E0B  1283               	bcf	3,5	;RP0=0, select bank0
  5858  0E0C  1303               	bcf	3,6	;RP1=0, select bank0
  5859  0E0D  0821               	movf	?___awdiv+1,w
  5860  0E0E  00A9               	movwf	___awtoft@c+1
  5861  0E0F  0820               	movf	?___awdiv,w
  5862  0E10  00A8               	movwf	___awtoft@c
  5863  0E11  120A  158A  2181  120A  158A  	fcall	___awtoft
  5864  0E16  1283               	bcf	3,5	;RP0=0, select bank0
  5865  0E17  1303               	bcf	3,6	;RP1=0, select bank0
  5866  0E18  0828               	movf	?___awtoft,w
  5867  0E19  00C2               	movwf	softPWM_Set@p
  5868  0E1A  0829               	movf	?___awtoft+1,w
  5869  0E1B  00C3               	movwf	softPWM_Set@p+1
  5870  0E1C  082A               	movf	?___awtoft+2,w
  5871  0E1D  00C4               	movwf	softPWM_Set@p+2
  5872                           
  5873                           ;softPWM.c: 22: t=(float)spwm->ms_time_freq * p;
  5874  0E1E  0842               	movf	softPWM_Set@p,w
  5875  0E1F  00AB               	movwf	___ftmul@f1
  5876  0E20  0843               	movf	softPWM_Set@p+1,w
  5877  0E21  00AC               	movwf	___ftmul@f1+1
  5878  0E22  0844               	movf	softPWM_Set@p+2,w
  5879  0E23  00AD               	movwf	___ftmul@f1+2
  5880  0E24  0848               	movf	softPWM_Set@spwm,w
  5881  0E25  3E03               	addlw	3
  5882  0E26  0084               	movwf	4
  5883  0E27  1383               	bcf	3,7	;select IRP bank0
  5884  0E28  0800               	movf	0,w
  5885  0E29  00A8               	movwf	___lwtoft@c
  5886  0E2A  0A84               	incf	4,f
  5887  0E2B  0800               	movf	0,w
  5888  0E2C  00A9               	movwf	___lwtoft@c+1
  5889  0E2D  120A  158A  2110  120A  158A  	fcall	___lwtoft
  5890  0E32  1283               	bcf	3,5	;RP0=0, select bank0
  5891  0E33  1303               	bcf	3,6	;RP1=0, select bank0
  5892  0E34  0828               	movf	?___lwtoft,w
  5893  0E35  00AE               	movwf	___ftmul@f2
  5894  0E36  0829               	movf	?___lwtoft+1,w
  5895  0E37  00AF               	movwf	___ftmul@f2+1
  5896  0E38  082A               	movf	?___lwtoft+2,w
  5897  0E39  00B0               	movwf	___ftmul@f2+2
  5898  0E3A  120A  118A  25E3  120A  158A  	fcall	___ftmul
  5899  0E3F  1283               	bcf	3,5	;RP0=0, select bank0
  5900  0E40  1303               	bcf	3,6	;RP1=0, select bank0
  5901  0E41  082B               	movf	?___ftmul,w
  5902  0E42  00C5               	movwf	softPWM_Set@t
  5903  0E43  082C               	movf	?___ftmul+1,w
  5904  0E44  00C6               	movwf	softPWM_Set@t+1
  5905  0E45  082D               	movf	?___ftmul+2,w
  5906  0E46  00C7               	movwf	softPWM_Set@t+2
  5907                           
  5908                           ;softPWM.c: 23: spwm->ms_time_ON = (uint16_t)t;
  5909  0E47  0845               	movf	softPWM_Set@t,w
  5910  0E48  00A0               	movwf	___fttol@f1
  5911  0E49  0846               	movf	softPWM_Set@t+1,w
  5912  0E4A  00A1               	movwf	___fttol@f1+1
  5913  0E4B  0847               	movf	softPWM_Set@t+2,w
  5914  0E4C  00A2               	movwf	___fttol@f1+2
  5915  0E4D  120A  158A  2562  120A  158A  	fcall	___fttol
  5916  0E52  1283               	bcf	3,5	;RP0=0, select bank0
  5917  0E53  1303               	bcf	3,6	;RP1=0, select bank0
  5918  0E54  0848               	movf	softPWM_Set@spwm,w
  5919  0E55  3E05               	addlw	5
  5920  0E56  0084               	movwf	4
  5921  0E57  0820               	movf	?___fttol,w
  5922  0E58  1383               	bcf	3,7	;select IRP bank0
  5923  0E59  0080               	movwf	0
  5924  0E5A  0A84               	incf	4,f
  5925  0E5B  0821               	movf	?___fttol+1,w
  5926  0E5C  0080               	movwf	0
  5927                           
  5928                           ;softPWM.c: 24: spwm->ms_time_OFF = spwm->ms_time_freq - spwm->ms_time_ON;
  5929  0E5D  0848               	movf	softPWM_Set@spwm,w
  5930  0E5E  3E03               	addlw	3
  5931  0E5F  0084               	movwf	4
  5932  0E60  0800               	movf	0,w
  5933  0E61  00BC               	movwf	??_softPWM_Set
  5934  0E62  0A84               	incf	4,f
  5935  0E63  0800               	movf	0,w
  5936  0E64  00BD               	movwf	??_softPWM_Set+1
  5937  0E65  0848               	movf	softPWM_Set@spwm,w
  5938  0E66  3E05               	addlw	5
  5939  0E67  0084               	movwf	4
  5940  0E68  0800               	movf	0,w
  5941  0E69  00BE               	movwf	??_softPWM_Set+2
  5942  0E6A  0A84               	incf	4,f
  5943  0E6B  0800               	movf	0,w
  5944  0E6C  00BF               	movwf	??_softPWM_Set+3
  5945  0E6D  09BE               	comf	??_softPWM_Set+2,f
  5946  0E6E  09BF               	comf	??_softPWM_Set+3,f
  5947  0E6F  0ABE               	incf	??_softPWM_Set+2,f
  5948  0E70  1903               	skipnz
  5949  0E71  0ABF               	incf	??_softPWM_Set+3,f
  5950  0E72  083C               	movf	??_softPWM_Set,w
  5951  0E73  073E               	addwf	??_softPWM_Set+2,w
  5952  0E74  00C0               	movwf	??_softPWM_Set+4
  5953  0E75  083D               	movf	??_softPWM_Set+1,w
  5954  0E76  1803               	skipnc
  5955  0E77  0A3D               	incf	??_softPWM_Set+1,w
  5956  0E78  073F               	addwf	??_softPWM_Set+3,w
  5957  0E79  00C1               	movwf	??_softPWM_Set+5
  5958  0E7A  0848               	movf	softPWM_Set@spwm,w
  5959  0E7B  3E07               	addlw	7
  5960  0E7C  0084               	movwf	4
  5961  0E7D  0840               	movf	??_softPWM_Set+4,w
  5962  0E7E  0080               	movwf	0
  5963  0E7F  0A84               	incf	4,f
  5964  0E80  0841               	movf	??_softPWM_Set+5,w
  5965  0E81  0080               	movwf	0
  5966                           
  5967                           ;softPWM.c: 26: spwm->needchange = 1;
  5968  0E82  0848               	movf	softPWM_Set@spwm,w
  5969  0E83  3E0E               	addlw	14
  5970  0E84  0084               	movwf	4
  5971  0E85  0180               	clrf	0
  5972  0E86  0A80               	incf	0,f
  5973  0E87  0008               	return
  5974  0E88                     __end_of_softPWM_Set:	
  5975                           
  5976                           	psect	text24
  5977  0910                     __ptext24:	
  5978 ;; *************** function ___lwtoft *****************
  5979 ;; Defined at:
  5980 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  5981 ;; Parameters:    Size  Location     Type
  5982 ;;  c               2    8[BANK0 ] unsigned int 
  5983 ;; Auto vars:     Size  Location     Type
  5984 ;;		None
  5985 ;; Return value:  Size  Location     Type
  5986 ;;                  3    8[BANK0 ] float 
  5987 ;; Registers used:
  5988 ;;		wreg, status,2, status,0, pclath, cstack
  5989 ;; Tracked objects:
  5990 ;;		On entry : 0/0
  5991 ;;		On exit  : 0/0
  5992 ;;		Unchanged: 0/0
  5993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5994 ;;      Params:         0       3       0       0       0
  5995 ;;      Locals:         0       0       0       0       0
  5996 ;;      Temps:          1       0       0       0       0
  5997 ;;      Totals:         1       3       0       0       0
  5998 ;;Total ram usage:        4 bytes
  5999 ;; Hardware stack levels used:    1
  6000 ;; Hardware stack levels required when called:    2
  6001 ;; This function calls:
  6002 ;;		___ftpack
  6003 ;; This function is called by:
  6004 ;;		_softPWM_Set
  6005 ;; This function uses a non-reentrant model
  6006 ;;
  6007                           
  6008                           
  6009                           ;psect for function ___lwtoft
  6010  0910                     ___lwtoft:	
  6011                           
  6012                           ;incstack = 0
  6013                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  6014  0910  1283               	bcf	3,5	;RP0=0, select bank0
  6015  0911  1303               	bcf	3,6	;RP1=0, select bank0
  6016  0912  0828               	movf	___lwtoft@c,w
  6017  0913  00A0               	movwf	___ftpack@arg
  6018  0914  0829               	movf	___lwtoft@c+1,w
  6019  0915  00A1               	movwf	___ftpack@arg+1
  6020  0916  01A2               	clrf	___ftpack@arg+2
  6021  0917  308E               	movlw	142
  6022  0918  00F4               	movwf	??___lwtoft
  6023  0919  0874               	movf	??___lwtoft,w
  6024  091A  00A3               	movwf	___ftpack@exp
  6025  091B  01A4               	clrf	___ftpack@sign
  6026  091C  120A  158A  246F   	fcall	___ftpack
  6027  091F  1283               	bcf	3,5	;RP0=0, select bank0
  6028  0920  1303               	bcf	3,6	;RP1=0, select bank0
  6029  0921  0820               	movf	?___ftpack,w
  6030  0922  00A8               	movwf	?___lwtoft
  6031  0923  0821               	movf	?___ftpack+1,w
  6032  0924  00A9               	movwf	?___lwtoft+1
  6033  0925  0822               	movf	?___ftpack+2,w
  6034  0926  00AA               	movwf	?___lwtoft+2
  6035  0927  0008               	return
  6036  0928                     __end_of___lwtoft:	
  6037                           
  6038                           	psect	text25
  6039  0D62                     __ptext25:	
  6040 ;; *************** function ___fttol *****************
  6041 ;; Defined at:
  6042 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  6043 ;; Parameters:    Size  Location     Type
  6044 ;;  f1              3    0[BANK0 ] float 
  6045 ;; Auto vars:     Size  Location     Type
  6046 ;;  lval            4    9[BANK0 ] unsigned long 
  6047 ;;  exp1            1   13[BANK0 ] unsigned char 
  6048 ;;  sign1           1    8[BANK0 ] unsigned char 
  6049 ;; Return value:  Size  Location     Type
  6050 ;;                  4    0[BANK0 ] long 
  6051 ;; Registers used:
  6052 ;;		wreg, status,2, status,0
  6053 ;; Tracked objects:
  6054 ;;		On entry : 0/0
  6055 ;;		On exit  : 0/0
  6056 ;;		Unchanged: 0/0
  6057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6058 ;;      Params:         0       4       0       0       0
  6059 ;;      Locals:         0       6       0       0       0
  6060 ;;      Temps:          0       4       0       0       0
  6061 ;;      Totals:         0      14       0       0       0
  6062 ;;Total ram usage:       14 bytes
  6063 ;; Hardware stack levels used:    1
  6064 ;; Hardware stack levels required when called:    1
  6065 ;; This function calls:
  6066 ;;		Nothing
  6067 ;; This function is called by:
  6068 ;;		_softPWM_Set
  6069 ;; This function uses a non-reentrant model
  6070 ;;
  6071                           
  6072                           
  6073                           ;psect for function ___fttol
  6074  0D62                     ___fttol:	
  6075                           
  6076                           ;incstack = 0
  6077                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6078  0D62  1283               	bcf	3,5	;RP0=0, select bank0
  6079  0D63  1303               	bcf	3,6	;RP1=0, select bank0
  6080  0D64  0820               	movf	___fttol@f1,w
  6081  0D65  00A4               	movwf	??___fttol
  6082  0D66  0821               	movf	___fttol@f1+1,w
  6083  0D67  00A5               	movwf	??___fttol+1
  6084  0D68  0822               	movf	___fttol@f1+2,w
  6085  0D69  00A6               	movwf	??___fttol+2
  6086  0D6A  1003               	clrc
  6087  0D6B  0D25               	rlf	??___fttol+1,w
  6088  0D6C  0D26               	rlf	??___fttol+2,w
  6089  0D6D  00A7               	movwf	??___fttol+3
  6090  0D6E  0827               	movf	??___fttol+3,w
  6091  0D6F  00AD               	movwf	___fttol@exp1
  6092  0D70  082D               	movf	___fttol@exp1,w
  6093  0D71  1D03               	btfss	3,2
  6094  0D72  2D7C               	goto	l2489
  6095  0D73  3000               	movlw	0
  6096  0D74  00A3               	movwf	?___fttol+3
  6097  0D75  3000               	movlw	0
  6098  0D76  00A2               	movwf	?___fttol+2
  6099  0D77  3000               	movlw	0
  6100  0D78  00A1               	movwf	?___fttol+1
  6101  0D79  3000               	movlw	0
  6102  0D7A  00A0               	movwf	?___fttol
  6103  0D7B  0008               	return
  6104  0D7C                     l2489:	
  6105  0D7C  0820               	movf	___fttol@f1,w
  6106  0D7D  00A4               	movwf	??___fttol
  6107  0D7E  0821               	movf	___fttol@f1+1,w
  6108  0D7F  00A5               	movwf	??___fttol+1
  6109  0D80  0822               	movf	___fttol@f1+2,w
  6110  0D81  00A6               	movwf	??___fttol+2
  6111  0D82  3017               	movlw	23
  6112  0D83                     u3095:	
  6113  0D83  1003               	clrc
  6114  0D84  0CA6               	rrf	??___fttol+2,f
  6115  0D85  0CA5               	rrf	??___fttol+1,f
  6116  0D86  0CA4               	rrf	??___fttol,f
  6117  0D87  3EFF               	addlw	-1
  6118  0D88  1D03               	skipz
  6119  0D89  2D83               	goto	u3095
  6120  0D8A  0824               	movf	??___fttol,w
  6121  0D8B  00A7               	movwf	??___fttol+3
  6122  0D8C  0827               	movf	??___fttol+3,w
  6123  0D8D  00A8               	movwf	___fttol@sign1
  6124  0D8E  17A1               	bsf	___fttol@f1+1,7
  6125  0D8F  30FF               	movlw	255
  6126  0D90  05A0               	andwf	___fttol@f1,f
  6127  0D91  30FF               	movlw	255
  6128  0D92  05A1               	andwf	___fttol@f1+1,f
  6129  0D93  3000               	movlw	0
  6130  0D94  05A2               	andwf	___fttol@f1+2,f
  6131  0D95  0820               	movf	___fttol@f1,w
  6132  0D96  00A9               	movwf	___fttol@lval
  6133  0D97  0821               	movf	___fttol@f1+1,w
  6134  0D98  00AA               	movwf	___fttol@lval+1
  6135  0D99  0822               	movf	___fttol@f1+2,w
  6136  0D9A  00AB               	movwf	___fttol@lval+2
  6137  0D9B  01AC               	clrf	___fttol@lval+3
  6138  0D9C  308E               	movlw	142
  6139  0D9D  02AD               	subwf	___fttol@exp1,f
  6140  0D9E  1FAD               	btfss	___fttol@exp1,7
  6141  0D9F  2DBE               	goto	l2509
  6142  0DA0  082D               	movf	___fttol@exp1,w
  6143  0DA1  3A80               	xorlw	128
  6144  0DA2  3E8F               	addlw	143
  6145  0DA3  1803               	skipnc
  6146  0DA4  2DAE               	goto	l2507
  6147  0DA5  3000               	movlw	0
  6148  0DA6  00A3               	movwf	?___fttol+3
  6149  0DA7  3000               	movlw	0
  6150  0DA8  00A2               	movwf	?___fttol+2
  6151  0DA9  3000               	movlw	0
  6152  0DAA  00A1               	movwf	?___fttol+1
  6153  0DAB  3000               	movlw	0
  6154  0DAC  00A0               	movwf	?___fttol
  6155  0DAD  0008               	return
  6156  0DAE                     l2507:	
  6157  0DAE  3001               	movlw	1
  6158  0DAF                     u3125:	
  6159  0DAF  1003               	clrc
  6160  0DB0  0CAC               	rrf	___fttol@lval+3,f
  6161  0DB1  0CAB               	rrf	___fttol@lval+2,f
  6162  0DB2  0CAA               	rrf	___fttol@lval+1,f
  6163  0DB3  0CA9               	rrf	___fttol@lval,f
  6164  0DB4  3EFF               	addlw	-1
  6165  0DB5  1D03               	skipz
  6166  0DB6  2DAF               	goto	u3125
  6167  0DB7  3001               	movlw	1
  6168  0DB8  00A4               	movwf	??___fttol
  6169  0DB9  0824               	movf	??___fttol,w
  6170  0DBA  07AD               	addwf	___fttol@exp1,f
  6171  0DBB  1903               	btfsc	3,2
  6172  0DBC  2DD9               	goto	l2517
  6173  0DBD  2DAE               	goto	l2507
  6174  0DBE                     l2509:	
  6175  0DBE  3018               	movlw	24
  6176  0DBF  022D               	subwf	___fttol@exp1,w
  6177  0DC0  1C03               	skipc
  6178  0DC1  2DD6               	goto	l721
  6179  0DC2  3000               	movlw	0
  6180  0DC3  00A3               	movwf	?___fttol+3
  6181  0DC4  3000               	movlw	0
  6182  0DC5  00A2               	movwf	?___fttol+2
  6183  0DC6  3000               	movlw	0
  6184  0DC7  00A1               	movwf	?___fttol+1
  6185  0DC8  3000               	movlw	0
  6186  0DC9  00A0               	movwf	?___fttol
  6187  0DCA  0008               	return
  6188  0DCB                     l2515:	
  6189  0DCB  3001               	movlw	1
  6190  0DCC  00A4               	movwf	??___fttol
  6191  0DCD                     u3155:	
  6192  0DCD  1003               	clrc
  6193  0DCE  0DA9               	rlf	___fttol@lval,f
  6194  0DCF  0DAA               	rlf	___fttol@lval+1,f
  6195  0DD0  0DAB               	rlf	___fttol@lval+2,f
  6196  0DD1  0DAC               	rlf	___fttol@lval+3,f
  6197  0DD2  0BA4               	decfsz	??___fttol,f
  6198  0DD3  2DCD               	goto	u3155
  6199  0DD4  3001               	movlw	1
  6200  0DD5  02AD               	subwf	___fttol@exp1,f
  6201  0DD6                     l721:	
  6202  0DD6  082D               	movf	___fttol@exp1,w
  6203  0DD7  1D03               	btfss	3,2
  6204  0DD8  2DCB               	goto	l2515
  6205  0DD9                     l2517:	
  6206  0DD9  0828               	movf	___fttol@sign1,w
  6207  0DDA  1903               	btfsc	3,2
  6208  0DDB  2DE7               	goto	l2521
  6209  0DDC  09A9               	comf	___fttol@lval,f
  6210  0DDD  09AA               	comf	___fttol@lval+1,f
  6211  0DDE  09AB               	comf	___fttol@lval+2,f
  6212  0DDF  09AC               	comf	___fttol@lval+3,f
  6213  0DE0  0AA9               	incf	___fttol@lval,f
  6214  0DE1  1903               	skipnz
  6215  0DE2  0AAA               	incf	___fttol@lval+1,f
  6216  0DE3  1903               	skipnz
  6217  0DE4  0AAB               	incf	___fttol@lval+2,f
  6218  0DE5  1903               	skipnz
  6219  0DE6  0AAC               	incf	___fttol@lval+3,f
  6220  0DE7                     l2521:	
  6221  0DE7  082C               	movf	___fttol@lval+3,w
  6222  0DE8  00A3               	movwf	?___fttol+3
  6223  0DE9  082B               	movf	___fttol@lval+2,w
  6224  0DEA  00A2               	movwf	?___fttol+2
  6225  0DEB  082A               	movf	___fttol@lval+1,w
  6226  0DEC  00A1               	movwf	?___fttol+1
  6227  0DED  0829               	movf	___fttol@lval,w
  6228  0DEE  00A0               	movwf	?___fttol
  6229  0DEF  0008               	return
  6230  0DF0                     __end_of___fttol:	
  6231                           
  6232                           	psect	text26
  6233  05E3                     __ptext26:	
  6234 ;; *************** function ___ftmul *****************
  6235 ;; Defined at:
  6236 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  6237 ;; Parameters:    Size  Location     Type
  6238 ;;  f1              3   11[BANK0 ] float 
  6239 ;;  f2              3   14[BANK0 ] float 
  6240 ;; Auto vars:     Size  Location     Type
  6241 ;;  f3_as_produc    3   22[BANK0 ] unsigned um
  6242 ;;  sign            1   26[BANK0 ] unsigned char 
  6243 ;;  cntr            1   25[BANK0 ] unsigned char 
  6244 ;;  exp             1   21[BANK0 ] unsigned char 
  6245 ;; Return value:  Size  Location     Type
  6246 ;;                  3   11[BANK0 ] float 
  6247 ;; Registers used:
  6248 ;;		wreg, status,2, status,0, pclath, cstack
  6249 ;; Tracked objects:
  6250 ;;		On entry : 0/0
  6251 ;;		On exit  : 0/0
  6252 ;;		Unchanged: 0/0
  6253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6254 ;;      Params:         0       6       0       0       0
  6255 ;;      Locals:         0       6       0       0       0
  6256 ;;      Temps:          0       4       0       0       0
  6257 ;;      Totals:         0      16       0       0       0
  6258 ;;Total ram usage:       16 bytes
  6259 ;; Hardware stack levels used:    1
  6260 ;; Hardware stack levels required when called:    2
  6261 ;; This function calls:
  6262 ;;		___ftpack
  6263 ;; This function is called by:
  6264 ;;		_softPWM_Set
  6265 ;; This function uses a non-reentrant model
  6266 ;;
  6267                           
  6268                           
  6269                           ;psect for function ___ftmul
  6270  05E3                     ___ftmul:	
  6271                           
  6272                           ;incstack = 0
  6273                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6274  05E3  1283               	bcf	3,5	;RP0=0, select bank0
  6275  05E4  1303               	bcf	3,6	;RP1=0, select bank0
  6276  05E5  082B               	movf	___ftmul@f1,w
  6277  05E6  00B1               	movwf	??___ftmul
  6278  05E7  082C               	movf	___ftmul@f1+1,w
  6279  05E8  00B2               	movwf	??___ftmul+1
  6280  05E9  082D               	movf	___ftmul@f1+2,w
  6281  05EA  00B3               	movwf	??___ftmul+2
  6282  05EB  1003               	clrc
  6283  05EC  0D32               	rlf	??___ftmul+1,w
  6284  05ED  0D33               	rlf	??___ftmul+2,w
  6285  05EE  00B4               	movwf	??___ftmul+3
  6286  05EF  0834               	movf	??___ftmul+3,w
  6287  05F0  00B5               	movwf	___ftmul@exp
  6288  05F1  0835               	movf	___ftmul@exp,w
  6289  05F2  1D03               	btfss	3,2
  6290  05F3  2DFB               	goto	l2439
  6291  05F4  3000               	movlw	0
  6292  05F5  00AB               	movwf	?___ftmul
  6293  05F6  3000               	movlw	0
  6294  05F7  00AC               	movwf	?___ftmul+1
  6295  05F8  3000               	movlw	0
  6296  05F9  00AD               	movwf	?___ftmul+2
  6297  05FA  0008               	return
  6298  05FB                     l2439:	
  6299  05FB  082E               	movf	___ftmul@f2,w
  6300  05FC  00B1               	movwf	??___ftmul
  6301  05FD  082F               	movf	___ftmul@f2+1,w
  6302  05FE  00B2               	movwf	??___ftmul+1
  6303  05FF  0830               	movf	___ftmul@f2+2,w
  6304  0600  00B3               	movwf	??___ftmul+2
  6305  0601  1003               	clrc
  6306  0602  0D32               	rlf	??___ftmul+1,w
  6307  0603  0D33               	rlf	??___ftmul+2,w
  6308  0604  00B4               	movwf	??___ftmul+3
  6309  0605  0834               	movf	??___ftmul+3,w
  6310  0606  00BA               	movwf	___ftmul@sign
  6311  0607  083A               	movf	___ftmul@sign,w
  6312  0608  1D03               	btfss	3,2
  6313  0609  2E11               	goto	l2445
  6314  060A  3000               	movlw	0
  6315  060B  00AB               	movwf	?___ftmul
  6316  060C  3000               	movlw	0
  6317  060D  00AC               	movwf	?___ftmul+1
  6318  060E  3000               	movlw	0
  6319  060F  00AD               	movwf	?___ftmul+2
  6320  0610  0008               	return
  6321  0611                     l2445:	
  6322  0611  083A               	movf	___ftmul@sign,w
  6323  0612  3E7B               	addlw	123
  6324  0613  00B1               	movwf	??___ftmul
  6325  0614  0831               	movf	??___ftmul,w
  6326  0615  07B5               	addwf	___ftmul@exp,f
  6327  0616  082B               	movf	___ftmul@f1,w
  6328  0617  00B1               	movwf	??___ftmul
  6329  0618  082C               	movf	___ftmul@f1+1,w
  6330  0619  00B2               	movwf	??___ftmul+1
  6331  061A  082D               	movf	___ftmul@f1+2,w
  6332  061B  00B3               	movwf	??___ftmul+2
  6333  061C  3010               	movlw	16
  6334  061D                     u2965:	
  6335  061D  1003               	clrc
  6336  061E  0CB3               	rrf	??___ftmul+2,f
  6337  061F  0CB2               	rrf	??___ftmul+1,f
  6338  0620  0CB1               	rrf	??___ftmul,f
  6339  0621  3EFF               	addlw	-1
  6340  0622  1D03               	skipz
  6341  0623  2E1D               	goto	u2965
  6342  0624  0831               	movf	??___ftmul,w
  6343  0625  00B4               	movwf	??___ftmul+3
  6344  0626  0834               	movf	??___ftmul+3,w
  6345  0627  00BA               	movwf	___ftmul@sign
  6346  0628  082E               	movf	___ftmul@f2,w
  6347  0629  00B1               	movwf	??___ftmul
  6348  062A  082F               	movf	___ftmul@f2+1,w
  6349  062B  00B2               	movwf	??___ftmul+1
  6350  062C  0830               	movf	___ftmul@f2+2,w
  6351  062D  00B3               	movwf	??___ftmul+2
  6352  062E  3010               	movlw	16
  6353  062F                     u2975:	
  6354  062F  1003               	clrc
  6355  0630  0CB3               	rrf	??___ftmul+2,f
  6356  0631  0CB2               	rrf	??___ftmul+1,f
  6357  0632  0CB1               	rrf	??___ftmul,f
  6358  0633  3EFF               	addlw	-1
  6359  0634  1D03               	skipz
  6360  0635  2E2F               	goto	u2975
  6361  0636  0831               	movf	??___ftmul,w
  6362  0637  00B4               	movwf	??___ftmul+3
  6363  0638  0834               	movf	??___ftmul+3,w
  6364  0639  06BA               	xorwf	___ftmul@sign,f
  6365  063A  3080               	movlw	128
  6366  063B  00B1               	movwf	??___ftmul
  6367  063C  0831               	movf	??___ftmul,w
  6368  063D  05BA               	andwf	___ftmul@sign,f
  6369  063E  17AC               	bsf	___ftmul@f1+1,7
  6370  063F  17AF               	bsf	___ftmul@f2+1,7
  6371  0640  30FF               	movlw	255
  6372  0641  05AE               	andwf	___ftmul@f2,f
  6373  0642  30FF               	movlw	255
  6374  0643  05AF               	andwf	___ftmul@f2+1,f
  6375  0644  3000               	movlw	0
  6376  0645  05B0               	andwf	___ftmul@f2+2,f
  6377  0646  3000               	movlw	0
  6378  0647  00B6               	movwf	___ftmul@f3_as_product
  6379  0648  3000               	movlw	0
  6380  0649  00B7               	movwf	___ftmul@f3_as_product+1
  6381  064A  3000               	movlw	0
  6382  064B  00B8               	movwf	___ftmul@f3_as_product+2
  6383  064C  3007               	movlw	7
  6384  064D  00B1               	movwf	??___ftmul
  6385  064E  0831               	movf	??___ftmul,w
  6386  064F  00B9               	movwf	___ftmul@cntr
  6387  0650                     l2457:	
  6388  0650  1C2B               	btfss	___ftmul@f1,0
  6389  0651  2E60               	goto	l2461
  6390  0652  082E               	movf	___ftmul@f2,w
  6391  0653  07B6               	addwf	___ftmul@f3_as_product,f
  6392  0654  082F               	movf	___ftmul@f2+1,w
  6393  0655  1103               	clrz
  6394  0656  1803               	skipnc
  6395  0657  0A2F               	incf	___ftmul@f2+1,w
  6396  0658  1D03               	btfss	3,2
  6397  0659  07B7               	addwf	___ftmul@f3_as_product+1,f
  6398  065A  0830               	movf	___ftmul@f2+2,w
  6399  065B  1103               	clrz
  6400  065C  1803               	skipnc
  6401  065D  0A30               	incf	___ftmul@f2+2,w
  6402  065E  1D03               	btfss	3,2
  6403  065F  07B8               	addwf	___ftmul@f3_as_product+2,f
  6404  0660                     l2461:	
  6405  0660  3001               	movlw	1
  6406  0661                     u3005:	
  6407  0661  1003               	clrc
  6408  0662  0CAD               	rrf	___ftmul@f1+2,f
  6409  0663  0CAC               	rrf	___ftmul@f1+1,f
  6410  0664  0CAB               	rrf	___ftmul@f1,f
  6411  0665  3EFF               	addlw	-1
  6412  0666  1D03               	skipz
  6413  0667  2E61               	goto	u3005
  6414  0668  3001               	movlw	1
  6415  0669                     u3015:	
  6416  0669  1003               	clrc
  6417  066A  0DAE               	rlf	___ftmul@f2,f
  6418  066B  0DAF               	rlf	___ftmul@f2+1,f
  6419  066C  0DB0               	rlf	___ftmul@f2+2,f
  6420  066D  3EFF               	addlw	-1
  6421  066E  1D03               	skipz
  6422  066F  2E69               	goto	u3015
  6423  0670  3001               	movlw	1
  6424  0671  02B9               	subwf	___ftmul@cntr,f
  6425  0672  1D03               	btfss	3,2
  6426  0673  2E50               	goto	l2457
  6427  0674  3009               	movlw	9
  6428  0675  00B1               	movwf	??___ftmul
  6429  0676  0831               	movf	??___ftmul,w
  6430  0677  00B9               	movwf	___ftmul@cntr
  6431  0678                     l2469:	
  6432  0678  1C2B               	btfss	___ftmul@f1,0
  6433  0679  2E88               	goto	l2473
  6434  067A  082E               	movf	___ftmul@f2,w
  6435  067B  07B6               	addwf	___ftmul@f3_as_product,f
  6436  067C  082F               	movf	___ftmul@f2+1,w
  6437  067D  1103               	clrz
  6438  067E  1803               	skipnc
  6439  067F  0A2F               	incf	___ftmul@f2+1,w
  6440  0680  1D03               	btfss	3,2
  6441  0681  07B7               	addwf	___ftmul@f3_as_product+1,f
  6442  0682  0830               	movf	___ftmul@f2+2,w
  6443  0683  1103               	clrz
  6444  0684  1803               	skipnc
  6445  0685  0A30               	incf	___ftmul@f2+2,w
  6446  0686  1D03               	btfss	3,2
  6447  0687  07B8               	addwf	___ftmul@f3_as_product+2,f
  6448  0688                     l2473:	
  6449  0688  3001               	movlw	1
  6450  0689                     u3055:	
  6451  0689  1003               	clrc
  6452  068A  0CAD               	rrf	___ftmul@f1+2,f
  6453  068B  0CAC               	rrf	___ftmul@f1+1,f
  6454  068C  0CAB               	rrf	___ftmul@f1,f
  6455  068D  3EFF               	addlw	-1
  6456  068E  1D03               	skipz
  6457  068F  2E89               	goto	u3055
  6458  0690  3001               	movlw	1
  6459  0691                     u3065:	
  6460  0691  1003               	clrc
  6461  0692  0CB8               	rrf	___ftmul@f3_as_product+2,f
  6462  0693  0CB7               	rrf	___ftmul@f3_as_product+1,f
  6463  0694  0CB6               	rrf	___ftmul@f3_as_product,f
  6464  0695  3EFF               	addlw	-1
  6465  0696  1D03               	skipz
  6466  0697  2E91               	goto	u3065
  6467  0698  3001               	movlw	1
  6468  0699  02B9               	subwf	___ftmul@cntr,f
  6469  069A  1D03               	btfss	3,2
  6470  069B  2E78               	goto	l2469
  6471  069C  0836               	movf	___ftmul@f3_as_product,w
  6472  069D  00A0               	movwf	___ftpack@arg
  6473  069E  0837               	movf	___ftmul@f3_as_product+1,w
  6474  069F  00A1               	movwf	___ftpack@arg+1
  6475  06A0  0838               	movf	___ftmul@f3_as_product+2,w
  6476  06A1  00A2               	movwf	___ftpack@arg+2
  6477  06A2  0835               	movf	___ftmul@exp,w
  6478  06A3  00B1               	movwf	??___ftmul
  6479  06A4  0831               	movf	??___ftmul,w
  6480  06A5  00A3               	movwf	___ftpack@exp
  6481  06A6  083A               	movf	___ftmul@sign,w
  6482  06A7  00B2               	movwf	??___ftmul+1
  6483  06A8  0832               	movf	??___ftmul+1,w
  6484  06A9  00A4               	movwf	___ftpack@sign
  6485  06AA  120A  158A  246F   	fcall	___ftpack
  6486  06AD  1283               	bcf	3,5	;RP0=0, select bank0
  6487  06AE  1303               	bcf	3,6	;RP1=0, select bank0
  6488  06AF  0820               	movf	?___ftpack,w
  6489  06B0  00AB               	movwf	?___ftmul
  6490  06B1  0821               	movf	?___ftpack+1,w
  6491  06B2  00AC               	movwf	?___ftmul+1
  6492  06B3  0822               	movf	?___ftpack+2,w
  6493  06B4  00AD               	movwf	?___ftmul+2
  6494  06B5  0008               	return
  6495  06B6                     __end_of___ftmul:	
  6496                           
  6497                           	psect	text27
  6498  0981                     __ptext27:	
  6499 ;; *************** function ___awtoft *****************
  6500 ;; Defined at:
  6501 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awtoft.c"
  6502 ;; Parameters:    Size  Location     Type
  6503 ;;  c               2    8[BANK0 ] int 
  6504 ;; Auto vars:     Size  Location     Type
  6505 ;;  sign            1    5[COMMON] unsigned char 
  6506 ;; Return value:  Size  Location     Type
  6507 ;;                  3    8[BANK0 ] float 
  6508 ;; Registers used:
  6509 ;;		wreg, status,2, status,0, pclath, cstack
  6510 ;; Tracked objects:
  6511 ;;		On entry : 0/0
  6512 ;;		On exit  : 0/0
  6513 ;;		Unchanged: 0/0
  6514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6515 ;;      Params:         0       3       0       0       0
  6516 ;;      Locals:         1       0       0       0       0
  6517 ;;      Temps:          0       2       0       0       0
  6518 ;;      Totals:         1       5       0       0       0
  6519 ;;Total ram usage:        6 bytes
  6520 ;; Hardware stack levels used:    1
  6521 ;; Hardware stack levels required when called:    2
  6522 ;; This function calls:
  6523 ;;		___ftpack
  6524 ;; This function is called by:
  6525 ;;		_softPWM_Set
  6526 ;; This function uses a non-reentrant model
  6527 ;;
  6528                           
  6529                           
  6530                           ;psect for function ___awtoft
  6531  0981                     ___awtoft:	
  6532                           
  6533                           ;incstack = 0
  6534                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  6535  0981  01F5               	clrf	___awtoft@sign
  6536  0982  1283               	bcf	3,5	;RP0=0, select bank0
  6537  0983  1303               	bcf	3,6	;RP1=0, select bank0
  6538  0984  1FA9               	btfss	___awtoft@c+1,7
  6539  0985  298D               	goto	l2429
  6540  0986  09A8               	comf	___awtoft@c,f
  6541  0987  09A9               	comf	___awtoft@c+1,f
  6542  0988  0AA8               	incf	___awtoft@c,f
  6543  0989  1903               	skipnz
  6544  098A  0AA9               	incf	___awtoft@c+1,f
  6545  098B  01F5               	clrf	___awtoft@sign
  6546  098C  0AF5               	incf	___awtoft@sign,f
  6547  098D                     l2429:	
  6548  098D  0828               	movf	___awtoft@c,w
  6549  098E  00A0               	movwf	___ftpack@arg
  6550  098F  0829               	movf	___awtoft@c+1,w
  6551  0990  00A1               	movwf	___ftpack@arg+1
  6552  0991  01A2               	clrf	___ftpack@arg+2
  6553  0992  308E               	movlw	142
  6554  0993  00AB               	movwf	??___awtoft
  6555  0994  082B               	movf	??___awtoft,w
  6556  0995  00A3               	movwf	___ftpack@exp
  6557  0996  0875               	movf	___awtoft@sign,w
  6558  0997  00AC               	movwf	??___awtoft+1
  6559  0998  082C               	movf	??___awtoft+1,w
  6560  0999  00A4               	movwf	___ftpack@sign
  6561  099A  120A  158A  246F   	fcall	___ftpack
  6562  099D  1283               	bcf	3,5	;RP0=0, select bank0
  6563  099E  1303               	bcf	3,6	;RP1=0, select bank0
  6564  099F  0820               	movf	?___ftpack,w
  6565  09A0  00A8               	movwf	?___awtoft
  6566  09A1  0821               	movf	?___ftpack+1,w
  6567  09A2  00A9               	movwf	?___awtoft+1
  6568  09A3  0822               	movf	?___ftpack+2,w
  6569  09A4  00AA               	movwf	?___awtoft+2
  6570  09A5  0008               	return
  6571  09A6                     __end_of___awtoft:	
  6572                           
  6573                           	psect	text28
  6574  0C6F                     __ptext28:	
  6575 ;; *************** function ___ftpack *****************
  6576 ;; Defined at:
  6577 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  6578 ;; Parameters:    Size  Location     Type
  6579 ;;  arg             3    0[BANK0 ] unsigned um
  6580 ;;  exp             1    3[BANK0 ] unsigned char 
  6581 ;;  sign            1    4[BANK0 ] unsigned char 
  6582 ;; Auto vars:     Size  Location     Type
  6583 ;;		None
  6584 ;; Return value:  Size  Location     Type
  6585 ;;                  3    0[BANK0 ] float 
  6586 ;; Registers used:
  6587 ;;		wreg, status,2, status,0
  6588 ;; Tracked objects:
  6589 ;;		On entry : 0/0
  6590 ;;		On exit  : 0/0
  6591 ;;		Unchanged: 0/0
  6592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6593 ;;      Params:         0       5       0       0       0
  6594 ;;      Locals:         0       0       0       0       0
  6595 ;;      Temps:          0       3       0       0       0
  6596 ;;      Totals:         0       8       0       0       0
  6597 ;;Total ram usage:        8 bytes
  6598 ;; Hardware stack levels used:    1
  6599 ;; Hardware stack levels required when called:    1
  6600 ;; This function calls:
  6601 ;;		Nothing
  6602 ;; This function is called by:
  6603 ;;		___awtoft
  6604 ;;		___ftmul
  6605 ;;		___lwtoft
  6606 ;; This function uses a non-reentrant model
  6607 ;;
  6608                           
  6609                           
  6610                           ;psect for function ___ftpack
  6611  0C6F                     ___ftpack:	
  6612                           
  6613                           ;incstack = 0
  6614                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6615  0C6F  1283               	bcf	3,5	;RP0=0, select bank0
  6616  0C70  1303               	bcf	3,6	;RP1=0, select bank0
  6617  0C71  0823               	movf	___ftpack@exp,w
  6618  0C72  1903               	btfsc	3,2
  6619  0C73  2C79               	goto	l2349
  6620  0C74  0822               	movf	___ftpack@arg+2,w
  6621  0C75  0421               	iorwf	___ftpack@arg+1,w
  6622  0C76  0420               	iorwf	___ftpack@arg,w
  6623  0C77  1D03               	skipz
  6624  0C78  2C8C               	goto	l2355
  6625  0C79                     l2349:	
  6626  0C79  3000               	movlw	0
  6627  0C7A  00A0               	movwf	?___ftpack
  6628  0C7B  3000               	movlw	0
  6629  0C7C  00A1               	movwf	?___ftpack+1
  6630  0C7D  3000               	movlw	0
  6631  0C7E  00A2               	movwf	?___ftpack+2
  6632  0C7F  0008               	return
  6633  0C80                     l2353:	
  6634  0C80  3001               	movlw	1
  6635  0C81  00A5               	movwf	??___ftpack
  6636  0C82  0825               	movf	??___ftpack,w
  6637  0C83  07A3               	addwf	___ftpack@exp,f
  6638  0C84  3001               	movlw	1
  6639  0C85                     u2735:	
  6640  0C85  1003               	clrc
  6641  0C86  0CA2               	rrf	___ftpack@arg+2,f
  6642  0C87  0CA1               	rrf	___ftpack@arg+1,f
  6643  0C88  0CA0               	rrf	___ftpack@arg,f
  6644  0C89  3EFF               	addlw	-1
  6645  0C8A  1D03               	skipz
  6646  0C8B  2C85               	goto	u2735
  6647  0C8C                     l2355:	
  6648  0C8C  30FE               	movlw	254
  6649  0C8D  0522               	andwf	___ftpack@arg+2,w
  6650  0C8E  1903               	btfsc	3,2
  6651  0C8F  2CA7               	goto	l630
  6652  0C90  2C80               	goto	l2353
  6653  0C91                     l2357:	
  6654  0C91  3001               	movlw	1
  6655  0C92  00A5               	movwf	??___ftpack
  6656  0C93  0825               	movf	??___ftpack,w
  6657  0C94  07A3               	addwf	___ftpack@exp,f
  6658  0C95  3001               	movlw	1
  6659  0C96  07A0               	addwf	___ftpack@arg,f
  6660  0C97  3000               	movlw	0
  6661  0C98  1803               	skipnc
  6662  0C99  3001               	movlw	1
  6663  0C9A  07A1               	addwf	___ftpack@arg+1,f
  6664  0C9B  3000               	movlw	0
  6665  0C9C  1803               	skipnc
  6666  0C9D  3001               	movlw	1
  6667  0C9E  07A2               	addwf	___ftpack@arg+2,f
  6668  0C9F  3001               	movlw	1
  6669  0CA0                     u2755:	
  6670  0CA0  1003               	clrc
  6671  0CA1  0CA2               	rrf	___ftpack@arg+2,f
  6672  0CA2  0CA1               	rrf	___ftpack@arg+1,f
  6673  0CA3  0CA0               	rrf	___ftpack@arg,f
  6674  0CA4  3EFF               	addlw	-1
  6675  0CA5  1D03               	skipz
  6676  0CA6  2CA0               	goto	u2755
  6677  0CA7                     l630:	
  6678  0CA7  30FF               	movlw	255
  6679  0CA8  0522               	andwf	___ftpack@arg+2,w
  6680  0CA9  1903               	btfsc	3,2
  6681  0CAA  2CB6               	goto	l2365
  6682  0CAB  2C91               	goto	l2357
  6683  0CAC                     l2363:	
  6684  0CAC  3001               	movlw	1
  6685  0CAD  02A3               	subwf	___ftpack@exp,f
  6686  0CAE  3001               	movlw	1
  6687  0CAF                     u2775:	
  6688  0CAF  1003               	clrc
  6689  0CB0  0DA0               	rlf	___ftpack@arg,f
  6690  0CB1  0DA1               	rlf	___ftpack@arg+1,f
  6691  0CB2  0DA2               	rlf	___ftpack@arg+2,f
  6692  0CB3  3EFF               	addlw	-1
  6693  0CB4  1D03               	skipz
  6694  0CB5  2CAF               	goto	u2775
  6695  0CB6                     l2365:	
  6696  0CB6  1BA1               	btfsc	___ftpack@arg+1,7
  6697  0CB7  2CBC               	goto	l637
  6698  0CB8  3002               	movlw	2
  6699  0CB9  0223               	subwf	___ftpack@exp,w
  6700  0CBA  1803               	skipnc
  6701  0CBB  2CAC               	goto	l2363
  6702  0CBC                     l637:	
  6703  0CBC  1823               	btfsc	___ftpack@exp,0
  6704  0CBD  2CC4               	goto	l638
  6705  0CBE  30FF               	movlw	255
  6706  0CBF  05A0               	andwf	___ftpack@arg,f
  6707  0CC0  307F               	movlw	127
  6708  0CC1  05A1               	andwf	___ftpack@arg+1,f
  6709  0CC2  30FF               	movlw	255
  6710  0CC3  05A2               	andwf	___ftpack@arg+2,f
  6711  0CC4                     l638:	
  6712  0CC4  1003               	clrc
  6713  0CC5  0CA3               	rrf	___ftpack@exp,f
  6714  0CC6  0823               	movf	___ftpack@exp,w
  6715  0CC7  00A5               	movwf	??___ftpack
  6716  0CC8  01A6               	clrf	??___ftpack+1
  6717  0CC9  01A7               	clrf	??___ftpack+2
  6718  0CCA  3010               	movlw	16
  6719  0CCB                     u2815:	
  6720  0CCB  1003               	clrc
  6721  0CCC  0DA5               	rlf	??___ftpack,f
  6722  0CCD  0DA6               	rlf	??___ftpack+1,f
  6723  0CCE  0DA7               	rlf	??___ftpack+2,f
  6724  0CCF  3EFF               	addlw	-1
  6725  0CD0  1D03               	skipz
  6726  0CD1  2CCB               	goto	u2815
  6727  0CD2  0825               	movf	??___ftpack,w
  6728  0CD3  04A0               	iorwf	___ftpack@arg,f
  6729  0CD4  0826               	movf	??___ftpack+1,w
  6730  0CD5  04A1               	iorwf	___ftpack@arg+1,f
  6731  0CD6  0827               	movf	??___ftpack+2,w
  6732  0CD7  04A2               	iorwf	___ftpack@arg+2,f
  6733  0CD8  0824               	movf	___ftpack@sign,w
  6734  0CD9  1903               	btfsc	3,2
  6735  0CDA  0008               	return
  6736  0CDB  17A2               	bsf	___ftpack@arg+2,7
  6737  0CDC  0008               	return
  6738  0CDD                     __end_of___ftpack:	
  6739                           
  6740                           	psect	text29
  6741  0B4B                     __ptext29:	
  6742 ;; *************** function ___awdiv *****************
  6743 ;; Defined at:
  6744 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;  divisor         2    0[BANK0 ] int 
  6747 ;;  dividend        2    2[BANK0 ] int 
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;  quotient        2    6[BANK0 ] int 
  6750 ;;  sign            1    5[BANK0 ] unsigned char 
  6751 ;;  counter         1    4[BANK0 ] unsigned char 
  6752 ;; Return value:  Size  Location     Type
  6753 ;;                  2    0[BANK0 ] int 
  6754 ;; Registers used:
  6755 ;;		wreg, status,2, status,0
  6756 ;; Tracked objects:
  6757 ;;		On entry : 0/0
  6758 ;;		On exit  : 0/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6761 ;;      Params:         0       4       0       0       0
  6762 ;;      Locals:         0       4       0       0       0
  6763 ;;      Temps:          1       0       0       0       0
  6764 ;;      Totals:         1       8       0       0       0
  6765 ;;Total ram usage:        9 bytes
  6766 ;; Hardware stack levels used:    1
  6767 ;; Hardware stack levels required when called:    1
  6768 ;; This function calls:
  6769 ;;		Nothing
  6770 ;; This function is called by:
  6771 ;;		_softPWM_Set
  6772 ;; This function uses a non-reentrant model
  6773 ;;
  6774                           
  6775                           
  6776                           ;psect for function ___awdiv
  6777  0B4B                     ___awdiv:	
  6778                           
  6779                           ;incstack = 0
  6780                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6781  0B4B  1283               	bcf	3,5	;RP0=0, select bank0
  6782  0B4C  1303               	bcf	3,6	;RP1=0, select bank0
  6783  0B4D  01A5               	clrf	___awdiv@sign
  6784  0B4E  1FA1               	btfss	___awdiv@divisor+1,7
  6785  0B4F  2B57               	goto	l2385
  6786  0B50  09A0               	comf	___awdiv@divisor,f
  6787  0B51  09A1               	comf	___awdiv@divisor+1,f
  6788  0B52  0AA0               	incf	___awdiv@divisor,f
  6789  0B53  1903               	skipnz
  6790  0B54  0AA1               	incf	___awdiv@divisor+1,f
  6791  0B55  01A5               	clrf	___awdiv@sign
  6792  0B56  0AA5               	incf	___awdiv@sign,f
  6793  0B57                     l2385:	
  6794  0B57  1FA3               	btfss	___awdiv@dividend+1,7
  6795  0B58  2B62               	goto	l2391
  6796  0B59  09A2               	comf	___awdiv@dividend,f
  6797  0B5A  09A3               	comf	___awdiv@dividend+1,f
  6798  0B5B  0AA2               	incf	___awdiv@dividend,f
  6799  0B5C  1903               	skipnz
  6800  0B5D  0AA3               	incf	___awdiv@dividend+1,f
  6801  0B5E  3001               	movlw	1
  6802  0B5F  00F4               	movwf	??___awdiv
  6803  0B60  0874               	movf	??___awdiv,w
  6804  0B61  06A5               	xorwf	___awdiv@sign,f
  6805  0B62                     l2391:	
  6806  0B62  01A6               	clrf	___awdiv@quotient
  6807  0B63  01A7               	clrf	___awdiv@quotient+1
  6808  0B64  0820               	movf	___awdiv@divisor,w
  6809  0B65  0421               	iorwf	___awdiv@divisor+1,w
  6810  0B66  1903               	btfsc	3,2
  6811  0B67  2B99               	goto	l2413
  6812  0B68  01A4               	clrf	___awdiv@counter
  6813  0B69  0AA4               	incf	___awdiv@counter,f
  6814  0B6A                     l2401:	
  6815  0B6A  1BA1               	btfsc	___awdiv@divisor+1,7
  6816  0B6B  2B78               	goto	l2403
  6817  0B6C  3001               	movlw	1
  6818  0B6D                     u2865:	
  6819  0B6D  1003               	clrc
  6820  0B6E  0DA0               	rlf	___awdiv@divisor,f
  6821  0B6F  0DA1               	rlf	___awdiv@divisor+1,f
  6822  0B70  3EFF               	addlw	-1
  6823  0B71  1D03               	skipz
  6824  0B72  2B6D               	goto	u2865
  6825  0B73  3001               	movlw	1
  6826  0B74  00F4               	movwf	??___awdiv
  6827  0B75  0874               	movf	??___awdiv,w
  6828  0B76  07A4               	addwf	___awdiv@counter,f
  6829  0B77  2B6A               	goto	l2401
  6830  0B78                     l2403:	
  6831  0B78  3001               	movlw	1
  6832  0B79                     u2885:	
  6833  0B79  1003               	clrc
  6834  0B7A  0DA6               	rlf	___awdiv@quotient,f
  6835  0B7B  0DA7               	rlf	___awdiv@quotient+1,f
  6836  0B7C  3EFF               	addlw	-1
  6837  0B7D  1D03               	skipz
  6838  0B7E  2B79               	goto	u2885
  6839  0B7F  0821               	movf	___awdiv@divisor+1,w
  6840  0B80  0223               	subwf	___awdiv@dividend+1,w
  6841  0B81  1D03               	skipz
  6842  0B82  2B85               	goto	u2895
  6843  0B83  0820               	movf	___awdiv@divisor,w
  6844  0B84  0222               	subwf	___awdiv@dividend,w
  6845  0B85                     u2895:	
  6846  0B85  1C03               	skipc
  6847  0B86  2B8E               	goto	l2409
  6848  0B87  0820               	movf	___awdiv@divisor,w
  6849  0B88  02A2               	subwf	___awdiv@dividend,f
  6850  0B89  0821               	movf	___awdiv@divisor+1,w
  6851  0B8A  1C03               	skipc
  6852  0B8B  03A3               	decf	___awdiv@dividend+1,f
  6853  0B8C  02A3               	subwf	___awdiv@dividend+1,f
  6854  0B8D  1426               	bsf	___awdiv@quotient,0
  6855  0B8E                     l2409:	
  6856  0B8E  3001               	movlw	1
  6857  0B8F                     u2905:	
  6858  0B8F  1003               	clrc
  6859  0B90  0CA1               	rrf	___awdiv@divisor+1,f
  6860  0B91  0CA0               	rrf	___awdiv@divisor,f
  6861  0B92  3EFF               	addlw	-1
  6862  0B93  1D03               	skipz
  6863  0B94  2B8F               	goto	u2905
  6864  0B95  3001               	movlw	1
  6865  0B96  02A4               	subwf	___awdiv@counter,f
  6866  0B97  1D03               	btfss	3,2
  6867  0B98  2B78               	goto	l2403
  6868  0B99                     l2413:	
  6869  0B99  0825               	movf	___awdiv@sign,w
  6870  0B9A  1903               	btfsc	3,2
  6871  0B9B  2BA1               	goto	l2417
  6872  0B9C  09A6               	comf	___awdiv@quotient,f
  6873  0B9D  09A7               	comf	___awdiv@quotient+1,f
  6874  0B9E  0AA6               	incf	___awdiv@quotient,f
  6875  0B9F  1903               	skipnz
  6876  0BA0  0AA7               	incf	___awdiv@quotient+1,f
  6877  0BA1                     l2417:	
  6878  0BA1  0827               	movf	___awdiv@quotient+1,w
  6879  0BA2  00A1               	movwf	?___awdiv+1
  6880  0BA3  0826               	movf	___awdiv@quotient,w
  6881  0BA4  00A0               	movwf	?___awdiv
  6882  0BA5  0008               	return
  6883  0BA6                     __end_of___awdiv:	
  6884                           
  6885                           	psect	text30
  6886  08E4                     __ptext30:	
  6887 ;; *************** function _millis *****************
  6888 ;; Defined at:
  6889 ;;		line 5 in file "varie.c"
  6890 ;; Parameters:    Size  Location     Type
  6891 ;;		None
  6892 ;; Auto vars:     Size  Location     Type
  6893 ;;  m               4    4[BANK0 ] unsigned long 
  6894 ;; Return value:  Size  Location     Type
  6895 ;;                  4    0[BANK0 ] unsigned long 
  6896 ;; Registers used:
  6897 ;;		wreg
  6898 ;; Tracked objects:
  6899 ;;		On entry : 0/0
  6900 ;;		On exit  : 0/0
  6901 ;;		Unchanged: 0/0
  6902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6903 ;;      Params:         0       4       0       0       0
  6904 ;;      Locals:         0       4       0       0       0
  6905 ;;      Temps:          0       0       0       0       0
  6906 ;;      Totals:         0       8       0       0       0
  6907 ;;Total ram usage:        8 bytes
  6908 ;; Hardware stack levels used:    1
  6909 ;; Hardware stack levels required when called:    1
  6910 ;; This function calls:
  6911 ;;		Nothing
  6912 ;; This function is called by:
  6913 ;;		_main
  6914 ;;		_pulsante_debounce
  6915 ;;		_buzzer_Start
  6916 ;;		_out_mod1_SW4__ON
  6917 ;;		_ON_LED
  6918 ;;		_softPWM_init
  6919 ;;		_softPWM_task
  6920 ;; This function uses a non-reentrant model
  6921 ;;
  6922                           
  6923                           
  6924                           ;psect for function _millis
  6925  08E4                     _millis:	
  6926                           
  6927                           ;varie.c: 6: uint32_t m;
  6928                           ;varie.c: 7: INTCONbits.GIE = 0;
  6929                           
  6930                           ;incstack = 0
  6931                           ; Regs used in _millis: [wreg]
  6932  08E4  138B               	bcf	11,7	;volatile
  6933                           
  6934                           ;varie.c: 8: m = timer0_millis;
  6935  08E5  0879               	movf	_timer0_millis+3,w
  6936  08E6  1283               	bcf	3,5	;RP0=0, select bank0
  6937  08E7  1303               	bcf	3,6	;RP1=0, select bank0
  6938  08E8  00A7               	movwf	millis@m+3
  6939  08E9  0878               	movf	_timer0_millis+2,w
  6940  08EA  00A6               	movwf	millis@m+2
  6941  08EB  0877               	movf	_timer0_millis+1,w
  6942  08EC  00A5               	movwf	millis@m+1
  6943  08ED  0876               	movf	_timer0_millis,w
  6944  08EE  00A4               	movwf	millis@m
  6945                           
  6946                           ;varie.c: 9: INTCONbits.GIE = 1;
  6947  08EF  178B               	bsf	11,7	;volatile
  6948                           
  6949                           ;varie.c: 10: return m;
  6950  08F0  0827               	movf	millis@m+3,w
  6951  08F1  00A3               	movwf	?_millis+3
  6952  08F2  0826               	movf	millis@m+2,w
  6953  08F3  00A2               	movwf	?_millis+2
  6954  08F4  0825               	movf	millis@m+1,w
  6955  08F5  00A1               	movwf	?_millis+1
  6956  08F6  0824               	movf	millis@m,w
  6957  08F7  00A0               	movwf	?_millis
  6958  08F8  0008               	return
  6959  08F9                     __end_of_millis:	
  6960                           
  6961                           	psect	text31
  6962  08F9                     __ptext31:	
  6963 ;; *************** function _ADC_notte_init *****************
  6964 ;; Defined at:
  6965 ;;		line 75 in file "application.c"
  6966 ;; Parameters:    Size  Location     Type
  6967 ;;		None
  6968 ;; Auto vars:     Size  Location     Type
  6969 ;;		None
  6970 ;; Return value:  Size  Location     Type
  6971 ;;                  1    wreg      void 
  6972 ;; Registers used:
  6973 ;;		wreg, status,2, status,0
  6974 ;; Tracked objects:
  6975 ;;		On entry : 0/0
  6976 ;;		On exit  : 0/0
  6977 ;;		Unchanged: 0/0
  6978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6979 ;;      Params:         0       0       0       0       0
  6980 ;;      Locals:         0       0       0       0       0
  6981 ;;      Temps:          0       0       0       0       0
  6982 ;;      Totals:         0       0       0       0       0
  6983 ;;Total ram usage:        0 bytes
  6984 ;; Hardware stack levels used:    1
  6985 ;; Hardware stack levels required when called:    1
  6986 ;; This function calls:
  6987 ;;		Nothing
  6988 ;; This function is called by:
  6989 ;;		_main
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           
  6994                           ;psect for function _ADC_notte_init
  6995  08F9                     _ADC_notte_init:	
  6996                           
  6997                           ;application.c: 76: TRISAbits.TRISA1 = 1;
  6998                           
  6999                           ;incstack = 0
  7000                           ; Regs used in _ADC_notte_init: [wreg+status,2+status,0]
  7001  08F9  1683               	bsf	3,5	;RP0=1, select bank1
  7002  08FA  1303               	bcf	3,6	;RP1=0, select bank1
  7003  08FB  1485               	bsf	5,1	;volatile
  7004                           
  7005                           ;application.c: 77: ADCON0bits.CHS = 1;
  7006  08FC  1283               	bcf	3,5	;RP0=0, select bank0
  7007  08FD  1303               	bcf	3,6	;RP1=0, select bank0
  7008  08FE  081F               	movf	31,w	;volatile
  7009  08FF  39C3               	andlw	-61
  7010  0900  3804               	iorlw	4
  7011  0901  009F               	movwf	31	;volatile
  7012                           
  7013                           ;application.c: 78: ADCON0bits.ADON = 1;
  7014  0902  141F               	bsf	31,0	;volatile
  7015                           
  7016                           ;application.c: 79: PIE1bits.ADIE = 1;
  7017  0903  1683               	bsf	3,5	;RP0=1, select bank1
  7018  0904  1303               	bcf	3,6	;RP1=0, select bank1
  7019  0905  170C               	bsf	12,6	;volatile
  7020                           
  7021                           ;application.c: 80: PIR1bits.ADIF = 0;
  7022  0906  1283               	bcf	3,5	;RP0=0, select bank0
  7023  0907  1303               	bcf	3,6	;RP1=0, select bank0
  7024  0908  130C               	bcf	12,6	;volatile
  7025                           
  7026                           ;application.c: 82: app.adc_flag = 0;
  7027  0909  1683               	bsf	3,5	;RP0=1, select bank1
  7028  090A  1303               	bcf	3,6	;RP1=0, select bank1
  7029  090B  01B7               	clrf	(_app^(0+128)+23)
  7030                           
  7031                           ;application.c: 83: ADCON0bits.GO_DONE = 1;
  7032  090C  1283               	bcf	3,5	;RP0=0, select bank0
  7033  090D  1303               	bcf	3,6	;RP1=0, select bank0
  7034  090E  149F               	bsf	31,1	;volatile
  7035  090F  0008               	return
  7036  0910                     __end_of_ADC_notte_init:	
  7037                           
  7038                           	psect	text32
  7039  08C1                     __ptext32:	
  7040 ;; *************** function _ADC_VALUE *****************
  7041 ;; Defined at:
  7042 ;;		line 93 in file "application.c"
  7043 ;; Parameters:    Size  Location     Type
  7044 ;;		None
  7045 ;; Auto vars:     Size  Location     Type
  7046 ;;  adcva           1    5[COMMON] unsigned char 
  7047 ;; Return value:  Size  Location     Type
  7048 ;;                  1    wreg      unsigned char 
  7049 ;; Registers used:
  7050 ;;		wreg
  7051 ;; Tracked objects:
  7052 ;;		On entry : 0/0
  7053 ;;		On exit  : 0/0
  7054 ;;		Unchanged: 0/0
  7055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7056 ;;      Params:         0       0       0       0       0
  7057 ;;      Locals:         1       0       0       0       0
  7058 ;;      Temps:          1       0       0       0       0
  7059 ;;      Totals:         2       0       0       0       0
  7060 ;;Total ram usage:        2 bytes
  7061 ;; Hardware stack levels used:    1
  7062 ;; Hardware stack levels required when called:    1
  7063 ;; This function calls:
  7064 ;;		Nothing
  7065 ;; This function is called by:
  7066 ;;		_main
  7067 ;; This function uses a non-reentrant model
  7068 ;;
  7069                           
  7070                           
  7071                           ;psect for function _ADC_VALUE
  7072  08C1                     _ADC_VALUE:	
  7073                           
  7074                           ;application.c: 94: uint8_t adcva;
  7075                           ;application.c: 95: adcva = ADRESH;
  7076                           
  7077                           ;incstack = 0
  7078                           ; Regs used in _ADC_VALUE: [wreg]
  7079  08C1  1283               	bcf	3,5	;RP0=0, select bank0
  7080  08C2  1303               	bcf	3,6	;RP1=0, select bank0
  7081  08C3  081E               	movf	30,w	;volatile
  7082  08C4  00F4               	movwf	??_ADC_VALUE
  7083  08C5  0874               	movf	??_ADC_VALUE,w
  7084  08C6  00F5               	movwf	ADC_VALUE@adcva
  7085                           
  7086                           ;application.c: 96: return adcva;
  7087  08C7  0875               	movf	ADC_VALUE@adcva,w
  7088  08C8  0008               	return
  7089  08C9                     __end_of_ADC_VALUE:	
  7090                           
  7091                           	psect	text33
  7092  08AC                     __ptext33:	
  7093 ;; *************** function _ADC_START *****************
  7094 ;; Defined at:
  7095 ;;		line 89 in file "application.c"
  7096 ;; Parameters:    Size  Location     Type
  7097 ;;		None
  7098 ;; Auto vars:     Size  Location     Type
  7099 ;;		None
  7100 ;; Return value:  Size  Location     Type
  7101 ;;                  1    wreg      void 
  7102 ;; Registers used:
  7103 ;;		status,2
  7104 ;; Tracked objects:
  7105 ;;		On entry : 0/0
  7106 ;;		On exit  : 0/0
  7107 ;;		Unchanged: 0/0
  7108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7109 ;;      Params:         0       0       0       0       0
  7110 ;;      Locals:         0       0       0       0       0
  7111 ;;      Temps:          0       0       0       0       0
  7112 ;;      Totals:         0       0       0       0       0
  7113 ;;Total ram usage:        0 bytes
  7114 ;; Hardware stack levels used:    1
  7115 ;; Hardware stack levels required when called:    1
  7116 ;; This function calls:
  7117 ;;		Nothing
  7118 ;; This function is called by:
  7119 ;;		_main
  7120 ;; This function uses a non-reentrant model
  7121 ;;
  7122                           
  7123                           
  7124                           ;psect for function _ADC_START
  7125  08AC                     _ADC_START:	
  7126                           
  7127                           ;application.c: 90: app.adc_flag = 0;
  7128                           
  7129                           ;incstack = 0
  7130                           ; Regs used in _ADC_START: [status,2]
  7131  08AC  1683               	bsf	3,5	;RP0=1, select bank1
  7132  08AD  1303               	bcf	3,6	;RP1=0, select bank1
  7133  08AE  01B7               	clrf	(_app^(0+128)+23)
  7134                           
  7135                           ;application.c: 91: ADCON0bits.GO_DONE = 1;
  7136  08AF  1283               	bcf	3,5	;RP0=0, select bank0
  7137  08B0  1303               	bcf	3,6	;RP1=0, select bank0
  7138  08B1  149F               	bsf	31,1	;volatile
  7139  08B2  0008               	return
  7140  08B3                     __end_of_ADC_START:	
  7141                           
  7142                           	psect	text34
  7143  08A0                     __ptext34:	
  7144 ;; *************** function _ADC_IS_DONE *****************
  7145 ;; Defined at:
  7146 ;;		line 86 in file "application.c"
  7147 ;; Parameters:    Size  Location     Type
  7148 ;;		None
  7149 ;; Auto vars:     Size  Location     Type
  7150 ;;		None
  7151 ;; Return value:  Size  Location     Type
  7152 ;;                  1    wreg      unsigned char 
  7153 ;; Registers used:
  7154 ;;		wreg
  7155 ;; Tracked objects:
  7156 ;;		On entry : 0/0
  7157 ;;		On exit  : 0/0
  7158 ;;		Unchanged: 0/0
  7159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7160 ;;      Params:         0       0       0       0       0
  7161 ;;      Locals:         0       0       0       0       0
  7162 ;;      Temps:          0       0       0       0       0
  7163 ;;      Totals:         0       0       0       0       0
  7164 ;;Total ram usage:        0 bytes
  7165 ;; Hardware stack levels used:    1
  7166 ;; Hardware stack levels required when called:    1
  7167 ;; This function calls:
  7168 ;;		Nothing
  7169 ;; This function is called by:
  7170 ;;		_main
  7171 ;; This function uses a non-reentrant model
  7172 ;;
  7173                           
  7174                           
  7175                           ;psect for function _ADC_IS_DONE
  7176  08A0                     _ADC_IS_DONE:	
  7177                           
  7178                           ;application.c: 87: return app.adc_flag;
  7179                           
  7180                           ;incstack = 0
  7181                           ; Regs used in _ADC_IS_DONE: [wreg]
  7182  08A0  1683               	bsf	3,5	;RP0=1, select bank1
  7183  08A1  1303               	bcf	3,6	;RP1=0, select bank1
  7184  08A2  0837               	movf	(_app^(0+128)+23),w
  7185  08A3  0008               	return
  7186  08A4                     __end_of_ADC_IS_DONE:	
  7187                           
  7188                           	psect	text35
  7189  09A6                     __ptext35:	
  7190 ;; *************** function _isr *****************
  7191 ;; Defined at:
  7192 ;;		line 8 in file "isr.c"
  7193 ;; Parameters:    Size  Location     Type
  7194 ;;		None
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;		None
  7197 ;; Return value:  Size  Location     Type
  7198 ;;                  1    wreg      void 
  7199 ;; Registers used:
  7200 ;;		wreg
  7201 ;; Tracked objects:
  7202 ;;		On entry : 0/0
  7203 ;;		On exit  : 0/0
  7204 ;;		Unchanged: 0/0
  7205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7206 ;;      Params:         0       0       0       0       0
  7207 ;;      Locals:         0       0       0       0       0
  7208 ;;      Temps:          4       0       0       0       0
  7209 ;;      Totals:         4       0       0       0       0
  7210 ;;Total ram usage:        4 bytes
  7211 ;; Hardware stack levels used:    1
  7212 ;; This function calls:
  7213 ;;		Nothing
  7214 ;; This function is called by:
  7215 ;;		Interrupt level 1
  7216 ;; This function uses a non-reentrant model
  7217 ;;
  7218                           
  7219                           
  7220                           ;psect for function _isr
  7221  09A6                     _isr:	
  7222                           
  7223                           ;isr.c: 10: if(INTCONbits.T0IF){
  7224  09A6  1D0B               	btfss	11,2	;volatile
  7225  09A7  29B9               	goto	i1l2341
  7226                           
  7227                           ;isr.c: 11: INTCONbits.T0IF = 0;
  7228  09A8  110B               	bcf	11,2	;volatile
  7229                           
  7230                           ;isr.c: 12: timer0_millis++;
  7231  09A9  3001               	movlw	1
  7232  09AA  07F6               	addwf	_timer0_millis,f
  7233  09AB  3000               	movlw	0
  7234  09AC  1803               	skipnc
  7235  09AD  3001               	movlw	1
  7236  09AE  07F7               	addwf	_timer0_millis+1,f
  7237  09AF  3000               	movlw	0
  7238  09B0  1803               	skipnc
  7239  09B1  3001               	movlw	1
  7240  09B2  07F8               	addwf	_timer0_millis+2,f
  7241  09B3  3000               	movlw	0
  7242  09B4  1803               	skipnc
  7243  09B5  3001               	movlw	1
  7244  09B6  07F9               	addwf	_timer0_millis+3,f
  7245                           
  7246                           ;isr.c: 13: TMR0 = 9;
  7247  09B7  3009               	movlw	9
  7248  09B8  0081               	movwf	1	;volatile
  7249  09B9                     i1l2341:	
  7250                           
  7251                           ;isr.c: 14: }
  7252                           ;isr.c: 15: if(PIR1bits.ADIF){
  7253  09B9  1F0C               	btfss	12,6	;volatile
  7254  09BA  29C0               	goto	i1l162
  7255                           
  7256                           ;isr.c: 16: PIR1bits.ADIF = 0;
  7257  09BB  130C               	bcf	12,6	;volatile
  7258                           
  7259                           ;isr.c: 17: app.adc_flag = 1;
  7260  09BC  1683               	bsf	3,5	;RP0=1, select bank1
  7261  09BD  1303               	bcf	3,6	;RP1=0, select bank1
  7262  09BE  01B7               	clrf	(_app^(0+128)+23)
  7263  09BF  0AB7               	incf	(_app^(0+128)+23),f
  7264  09C0                     i1l162:	
  7265  09C0  0873               	movf	??_isr+3,w
  7266  09C1  1283               	bcf	3,5	;RP0=0, select bank0
  7267  09C2  00FF               	movwf	127
  7268  09C3  0872               	movf	??_isr+2,w
  7269  09C4  008A               	movwf	10
  7270  09C5  0871               	movf	??_isr+1,w
  7271  09C6  0084               	movwf	4
  7272  09C7  0E70               	swapf	??_isr^(0+-128),w
  7273  09C8  0083               	movwf	3
  7274  09C9  0EFE               	swapf	126,f
  7275  09CA  0E7E               	swapf	126,w
  7276  09CB  0009               	retfie
  7277  09CC                     __end_of_isr:	
  7278  007E                     btemp	set	126	;btemp
  7279  007E                     wtemp0	set	126
  7280                           
  7281                           	psect	intentry
  7282  0004                     __pintentry:	
  7283                           ;incstack = 0
  7284                           ; Regs used in _isr: [wreg]
  7285                           
  7286  0004                     interrupt_function:	
  7287  007E                     saved_w	set	btemp
  7288  0004  00FE               	movwf	btemp
  7289  0005  0E03               	swapf	3,w
  7290  0006  00F0               	movwf	??_isr
  7291  0007  0804               	movf	4,w
  7292  0008  00F1               	movwf	??_isr+1
  7293  0009  080A               	movf	10,w
  7294  000A  00F2               	movwf	??_isr+2
  7295  000B  1283               	bcf	3,5	;RP0=0, select bank0
  7296  000C  1303               	bcf	3,6	;RP1=0, select bank0
  7297  000D  087F               	movf	btemp+1,w
  7298  000E  00F3               	movwf	??_isr+3
  7299  000F  120A  158A  29A6   	ljmp	_isr


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         158
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     50      57
    BANK1            80      0      72
    BANK3            96      0      83
    BANK2            96      0       0

Pointer List with Targets:

    pulsanti_alldebounce_task@switchs.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    softPWM_task@spwm.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    softPWM_task@spwm	PTR struct SOFT_PWM size(1) Largest target is 16
		 -> soft_pwm(BANK1[16]), 

    softPWM_Set@spwm.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    softPWM_Set@spwm	PTR struct SOFT_PWM size(1) Largest target is 16
		 -> soft_pwm(BANK1[16]), 

    softPWM_init@spwm.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    softPWM_init@spwm	PTR struct SOFT_PWM size(1) Largest target is 16
		 -> soft_pwm(BANK1[16]), 

    out_mod1_SW4__OFF@v.portLED	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTA(SFR0[1]), 

    out_mod1_SW4__OFF@v.portPOTENZA	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), 

    out_mod1_SW4__OFF@v	PTR struct OUTPUT size(1) Largest target is 7
		 -> output_P4(BANK1[7]), output_P3(BANK1[7]), output_P2(BANK1[7]), output_P1(BANK1[7]), 

    out_mod1_SW4__ON@v.portLED	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTA(SFR0[1]), 

    out_mod1_SW4__ON@v.portPOTENZA	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), 

    out_mod1_SW4__ON@v	PTR struct OUTPUT size(1) Largest target is 7
		 -> output_P4(BANK1[7]), output_P3(BANK1[7]), output_P2(BANK1[7]), output_P1(BANK1[7]), 

    out_SW1_SW2__ON@o2.portLED	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTA(SFR0[1]), 

    out_SW1_SW2__ON@o2.portPOTENZA	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), 

    out_SW1_SW2__ON@o2	PTR struct OUTPUT size(1) Largest target is 7
		 -> output_P4(BANK1[7]), output_P3(BANK1[7]), output_P2(BANK1[7]), output_P1(BANK1[7]), 

    out_SW1_SW2__ON@o1.portLED	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTA(SFR0[1]), 

    out_SW1_SW2__ON@o1.portPOTENZA	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), 

    out_SW1_SW2__ON@o1	PTR struct OUTPUT size(1) Largest target is 7
		 -> output_P4(BANK1[7]), output_P3(BANK1[7]), output_P2(BANK1[7]), output_P1(BANK1[7]), 

    out_toggle@p.portLED	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTA(SFR0[1]), 

    out_toggle@p.portPOTENZA	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), 

    out_toggle@p	PTR struct OUTPUT size(1) Largest target is 7
		 -> output_P4(BANK1[7]), output_P3(BANK1[7]), output_P2(BANK1[7]), output_P1(BANK1[7]), 

    POWER_ONLED.portLED	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTA(SFR0[1]), 

    POWER_ONLED.portPOTENZA	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), 

    pulsante_debounce@p.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    pulsante_debounce@p	PTR struct SWITCH size(1) Largest target is 19
		 -> P4_GIALLO(BANK3[19]), P3_BLU(BANK3[19]), P2_BLU(BANK3[19]), P1_ROSSO(BANK3[19]), 

    pulsanti_alldebounce_task@switchs	PTR PTR struct SWITCH size(1) Largest target is 8
		 -> pulsanti(BANK1[4]), 

    pulsante_INIT_debounce@p.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    pulsante_INIT_debounce@p	PTR struct SWITCH size(1) Largest target is 19
		 -> P4_GIALLO(BANK3[19]), P3_BLU(BANK3[19]), P2_BLU(BANK3[19]), P1_ROSSO(BANK3[19]), 

    outputs.portLED	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTA(SFR0[1]), 

    outputs.portPOTENZA	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), 

    pulsanti.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    outputs	PTR struct OUTPUT[4] size(1) Largest target is 7
		 -> output_P4(BANK1[7]), output_P3(BANK1[7]), output_P2(BANK1[7]), output_P1(BANK1[7]), 

    pulsanti	PTR struct SWITCH[4] size(1) Largest target is 19
		 -> P4_GIALLO(BANK3[19]), P3_BLU(BANK3[19]), P2_BLU(BANK3[19]), P1_ROSSO(BANK3[19]), 

    S312SOFT_PWM$port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    soft_pwm.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    output_P4.portLED	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTA(SFR0[1]), 

    output_P4.portPOTENZA	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), 

    output_P3.portLED	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTA(SFR0[1]), 

    output_P3.portPOTENZA	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), 

    output_P2.portLED	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTA(SFR0[1]), 

    output_P2.portPOTENZA	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), 

    S69OUTPUT$portLED	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTA(SFR0[1]), 

    output_P1.portLED	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), PORTA(SFR0[1]), 

    S69OUTPUT$portPOTENZA	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), 

    output_P1.portPOTENZA	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), 

    P4_GIALLO.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    P3_BLU.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    P2_BLU.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    S19SWITCH$port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    P1_ROSSO.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 


Critical Paths under _main in COMMON

    _main->_ADC_VALUE
    _main->_out_SW1_SW2__ON
    _main->_out_mod1_SW4__OFF
    _main->_out_mod1_SW4__ON
    _main->_out_toggle
    _main->_softPWM_task
    _main->_switch_init
    _eeprom_Save->_eeprom_write
    _eeprom_Load->_eeprom_read
    _softPWM_Set->___awtoft
    ___ftmul->___lwtoft
    ___awtoft->___awdiv

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_out_init
    _switch_init->_pulsante_INIT_debounce
    _softPWM_task->_millis
    _save_modalita_SW4->_eeprom_Save
    _eeprom_Save->_eeprom_write
    _read_modalita_SW4->_eeprom_Load
    _pulsanti_alldebounce_task->_pulsante_debounce
    _pulsante_debounce->_millis
    _out_mod1_SW4__ON->_millis
    _out_init->_softPWM_init
    _softPWM_init->_softPWM_Set
    _buzzer_Start->_millis
    _ON_LED->_softPWM_Set
    _softPWM_Set->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___lwtoft
    ___awtoft->___awdiv
    ___awtoft->___ftpack

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   37899
                                             45 BANK0      5     5      0
                        _ADC_IS_DONE
                          _ADC_START
                          _ADC_VALUE
                     _ADC_notte_init
                             _ON_LED
                       _buzzer_Start
                        _buzzer_Stop
                        _buzzer_init
                             _millis
                    _out_SW1_SW2__ON
                           _out_init
                  _out_mod1_SW4__OFF
                   _out_mod1_SW4__ON
                         _out_toggle
          _pulsanti_alldebounce_task
                  _read_modalita_SW4
                  _save_modalita_SW4
                        _softPWM_Set
                       _softPWM_task
                        _switch_init
 ---------------------------------------------------------------------------------
 (1) _switch_init                                          2     2      0     639
                                              4 COMMON     2     2      0
             _pulsante_INIT_debounce
 ---------------------------------------------------------------------------------
 (2) _pulsante_INIT_debounce                               6     6      0     639
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _softPWM_task                                        12    12      0    1080
                                              4 COMMON     2     2      0
                                              8 BANK0     10    10      0
                             _millis
 ---------------------------------------------------------------------------------
 (1) _save_modalita_SW4                                    1     1      0     720
                                              7 BANK0      1     1      0
                        _eeprom_Save
 ---------------------------------------------------------------------------------
 (2) _eeprom_Save                                          6     6      0     689
                                              1 BANK0      6     6      0
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (3) _eeprom_write                                         3     2      1     293
                                              4 COMMON     2     1      1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_modalita_SW4                                    0     0      0     526
                        _eeprom_Load
 ---------------------------------------------------------------------------------
 (2) _eeprom_Load                                          6     6      0     526
                                              0 BANK0      6     6      0
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _pulsanti_alldebounce_task                            4     3      1    1013
                                              4 COMMON     1     1      0
                                             15 BANK0      3     2      1
                  _pulsante_debounce
 ---------------------------------------------------------------------------------
 (2) _pulsante_debounce                                    7     7      0     733
                                              8 BANK0      7     7      0
                             _millis
 ---------------------------------------------------------------------------------
 (1) _out_toggle                                           8     8      0     736
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _out_mod1_SW4__ON                                     7     7      0     392
                                              4 COMMON     2     2      0
                                              8 BANK0      5     5      0
                             _millis
 ---------------------------------------------------------------------------------
 (1) _out_mod1_SW4__OFF                                    7     7      0     358
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _out_init                                             1     1      0   10900
                                             44 BANK0      1     1      0
                       _softPWM_init
 ---------------------------------------------------------------------------------
 (2) _softPWM_init                                         3     1      2   10900
                                             41 BANK0      3     1      2
                            ___lwdiv
                             _millis
                        _softPWM_Set
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     395
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _out_SW1_SW2__ON                                      9     8      1     720
                                              4 COMMON     2     2      0
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (1) _buzzer_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buzzer_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buzzer_Start                                         0     0      0      34
                             _millis
 ---------------------------------------------------------------------------------
 (1) _ON_LED                                               2     2      0   10231
                                             41 BANK0      2     2      0
                             _millis
                        _softPWM_Set
 ---------------------------------------------------------------------------------
 (1) _softPWM_Set                                         14    13      1   10166
                                             27 BANK0     14    13      1
                            ___awdiv
                           ___awtoft
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2512
                                              4 COMMON     1     1      0
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     448
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3046
                                             11 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2614
                                              5 COMMON     1     1      0
                                              8 BANK0      5     2      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2404
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     599
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _millis                                               8     4      4      34
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _ADC_notte_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_VALUE                                            2     2      0      34
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_START                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_IS_DONE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_IS_DONE
   _ADC_START
   _ADC_VALUE
   _ADC_notte_init
   _ON_LED
     _millis
     _softPWM_Set
       ___awdiv
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
       ___lwtoft
         ___ftpack
   _buzzer_Start
     _millis
   _buzzer_Stop
   _buzzer_init
   _millis
   _out_SW1_SW2__ON
   _out_init
     _softPWM_init
       ___lwdiv
       _millis
       _softPWM_Set
         ___awdiv
         ___awtoft
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___fttol
         ___lwtoft
           ___ftpack
   _out_mod1_SW4__OFF
   _out_mod1_SW4__ON
     _millis
   _out_toggle
   _pulsanti_alldebounce_task
     _pulsante_debounce
       _millis
   _read_modalita_SW4
     _eeprom_Load
       _eeprom_read
   _save_modalita_SW4
     _eeprom_Save
       _eeprom_write
   _softPWM_Set
     ___awdiv
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
     ___lwtoft
       ___ftpack
   _softPWM_task
     _millis
   _switch_init
     _pulsante_INIT_debounce

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      53       9       86.5%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      48       7       90.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     32      39       5       71.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      DE      12        0.0%
ABS                  0      0      DE       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed May 10 11:22:33 2017

                __size_of_ADC_VALUE 0008                  __size_of_ADC_START 0007  
                       __CFG_CP$OFF 0000                                  l90 010E  
                                l89 0116                                  _RD 0C60  
                                _WR 0C61                        ___awdiv@sign 0025  
                                fsr 0004                        eeprom_Load@i 0024  
                   ?_ADC_notte_init 0070                        eeprom_Save@i 0025  
              __size_of_ADC_IS_DONE 0004                                 l145 05E2  
                               l357 0944                                 l630 0CA7  
                               l721 0DD6                                 l379 09CF  
                               l637 0CBC                                 l638 0CC4  
                               _GIE 005F                        __CFG_CPD$OFF 0000  
                               _app 00A0                                 _isr 09A6  
                               fsr0 0004                                 indf 0000  
                      __CFG_LVP$OFF 0000                                l3011 016E  
                              l3021 01C3                                l3005 0162  
                              l3031 021A                                l3023 01C8  
                              l3015 0178                                l2401 0B6A  
                              l3041 0275                                l2403 0B78  
                              l2413 0B99                                l3061 02BD  
                              l3053 0299                                l3029 0214  
                              l3063 0303                                l3039 026F  
                              l2417 0BA1                                l2409 0B8E  
                              l2353 0C80                                l2521 0DE7  
                              l3057 029D                                l3049 028C  
                              l3081 033A                                l2363 0CAC  
                              l2355 0C8C                                l2515 0DCB  
                              l2507 0DAE                                l2365 0CB6  
                              l2357 0C91                                l2349 0C79  
                              l2429 098D                                l2461 0660  
                              l2445 0611                                l2517 0DD9  
                              l2509 0DBE                                l2605 0AF5  
                              l3077 032B                                l2391 0B62  
                              l2439 05FB                                l2631 05D1  
                              l2615 0552                                l3079 0335  
                              l2385 0B57                                l2473 0688  
                              l2457 0650                                l2617 0593  
                              l2609 0530                                l2627 05B9  
                              l2635 05D6                                l2651 078F  
                              l2469 0678                                l2661 07B7  
                              l2591 0A9B                                l2583 0A77  
                              l2831 092C                                l2671 07DB  
                              l2903 0387                                l2489 0D7C  
                              l2841 0A63                                l2585 0A85  
                              l2681 07F2                                l2921 046D  
                              l2595 0AA6                                l2691 0B04  
                              l2677 07F0                                l2909 03CA  
                              l2863 0FFA                                l2855 0F64  
                              l2859 0FBD                                l2699 0B32  
                              l2875 08DD                                l2965 0094  
                              l2975 00A8                                l2993 00F2  
                              l2995 00FE                                l2987 00DE  
                              l2997 0103                                ?_isr 0070  
                              u3005 0661                                u3015 0669  
                              u4020 02E8                                u3125 0DAF  
                              u4021 02E9                                u4022 02EE  
                              u3055 0689                                u4023 02EF  
                              u3065 0691                                u4033 0301  
                              u3330 0579                                u3314 0517  
                              u3155 0DCD                                u3235 0A7A  
                              u3331 057A                                u3315 0515  
                              u3332 057F                                u3333 0580  
                              u3095 0D83                                u3255 0A86  
                              u3343 0591                                u3504 0752  
                              u3505 0750                                u3265 0A92  
                              u3514 0CEA                                u3275 0A9C  
                              u3515 0CE8                                u4067 0BE2  
                              u3524 0D19                                u3700 0407  
                              u3525 0D17                                u3701 0408  
                              u3614 0C11                                u3702 040D  
                              u3294 0AB8                                u2815 0CCB  
                              u2735 0C85                                u3615 0C0F  
                              u3703 040E                                u3295 0AB6  
                              u3624 0C41                                u3544 0F4D  
                              u2905 0B8F                                u3625 0C3F  
                              u3545 0F4B                                u3474 06C3  
                              u3554 0F70                                u3730 04A4  
                              u2755 0CA0                                u3475 06C1  
                              u3555 0F6E                                u3395 07D3  
                              u3731 04A5                                u3715 0420  
                              u3484 06F2                                u3732 04AA  
                              u3724 0441                                u3485 06F0  
                              u3733 04AB                                u3725 043F  
                              u3494 0723                                u3574 0FA5  
                              u3654 035B                                u2775 0CAF  
                              u3495 0721                                u3575 0FA3  
                              u3655 0359                                u3903 01C1  
                              u3584 0FC7                                u3920 01F9  
                              u2865 0B6D                                u3585 0FC5  
                              u3745 04BD                                u3921 01FA  
                              u3754 04DE                                u3922 01FF  
                              u3850 0147                                u3755 04DC  
                              u3923 0200                                u3851 0148  
                              u3684 039F                                u3852 014D  
                              u2885 0B79                                u2965 061D  
                              u3685 039D                                u3933 0212  
                              u3853 014E                                u2895 0B85  
                              u2975 062F                                u3863 0160  
                              u3960 0254                                u3961 0255  
                              u3962 025A                                u3890 01A9  
                              u3963 025B                                u3891 01AA  
                              u3892 01AF                                u3973 026D  
                              u3893 01B0                                _TMR0 0001  
                              _WREN 0C62                      ??_eeprom_write 0075  
                      __CFG_WRT$OFF 0000                                _main 0064  
                      ___ftpack@arg 0020                        ___ftpack@exp 0023  
                              btemp 007E                                start 0012  
                     __CFG_IESO$OFF 0000                       __CFG_MCLRE$ON 0000  
                      ___ftmul@cntr 0039                        ___ftmul@sign 003A  
  pulsanti_alldebounce_task@switchs 0030                         _switch_init 0BA6  
                      ___fttol@exp1 002D                        ___fttol@lval 0029  
                             ??_isr 0070         ??_pulsanti_alldebounce_task 0074  
                             ?_main 0070                     __end_of___awdiv 0BA6  
                             _EEADR 010D                       __CFG_WDTE$OFF 0000  
                             _CARRY 0018                               _ANSEL 0188  
                   __end_of___ftmul 06B6                     ___awdiv@divisor 0020  
           ?_pulsante_INIT_debounce 0076                     __end_of___fttol 0DF0  
                   __end_of___lwdiv 0AAB                               i1l162 09C0  
                   ___awdiv@counter 0024                               _PORTA 0005  
                             _PORTB 0006                               _PORTC 0007  
                    __CFG_FCMEN$OFF 0000                       ___awtoft@sign 0075  
          __end_of_out_mod1_SW4__ON 0D62                   __end_of_ADC_VALUE 08C9  
                 __end_of_ADC_START 08B3                       ___ftpack@sign 0024  
                             main@i 0051                      __CFG_BOREN$OFF 0000  
                             pclath 000A                     eeprom_Load@data 0023  
                             status 0003                               wtemp0 007E  
                      ?_buzzer_Stop 0070                        ?_buzzer_init 0070  
                   __initialization 0015                     eeprom_Save@data 0024  
                      __end_of_main 0342      __end_of_pulsante_INIT_debounce 0AFA  
                            ??_main 004D                       ___fttol@sign1 0028  
                   _out_SW1_SW2__ON 06B6                              _ADRESH 001E  
                            _EEDATA 010C                              _EECON1 018C  
                            _EECON2 018D                    ___awdiv@dividend 0022  
                  __end_of___awtoft 09A6                    __end_of___ftpack 0CDD  
                            _ANSELH 0189                              _P2_BLU 01BD  
                            _P3_BLU 01AA                              i1l2341 09B9  
                  __end_of___lwtoft 0928           _pulsanti_alldebounce_task 0928  
               eeprom_Save@checksum 0022                              _ON_LED 0A31  
                    __CFG_PWRTE$OFF 0000                __size_of_eeprom_Load 006F  
              __size_of_eeprom_Save 0051                __size_of_eeprom_read 001B  
                         ??___awdiv 0074                           ??___ftmul 0031  
                         ??___fttol 0024                           ??___lwdiv 0074  
                            _eepvar 0058                              _millis 08E4  
                  ___awdiv@quotient 0026                __end_of_eeprom_write 09F6  
                      ?_softPWM_Set 003B               ___ftmul@f3_as_product 0036  
                            saved_w 007E                      ADC_VALUE@adcva 0075  
                  __end_of_out_init 0F3A                       ?_buzzer_Start 0070  
           __end_of__initialization 0060                     eeprom_read@addr 0075  
                        ___awtoft@c 0028                          ___ftmul@f1 002B  
                        ___ftmul@f2 002E                    ??_ADC_notte_init 0074  
                        ___fttol@f1 0020                      __pcstackCOMMON 0070  
                      __pidataBANK0 08A8                        __pidataBANK1 08A4  
           __end_of_out_SW1_SW2__ON 0785                          ___lwtoft@c 0028  
                    _OPTION_REGbits 0081                   eeprom_write@value 0074  
                    ??_buzzer_Start 0074                          __pbssBANK0 0056  
                        __pbssBANK1 00A0                          __pbssBANK3 0190  
                 _save_modalita_SW4 08D1                   _pulsante_debounce 050A  
                           ?_ON_LED 0070                  ?_save_modalita_SW4 0070  
                ?_pulsante_debounce 0076                __size_of_buzzer_Stop 0007  
                        __pmaintext 0064                __size_of_buzzer_init 0007  
                      ?_switch_init 0070                 ??_save_modalita_SW4 0076  
                     ??_ADC_IS_DONE 0074                          __pintentry 0004  
               ??_pulsante_debounce 0028                             ?_millis 0020  
                         ?___awtoft 0028                           ?___ftpack 0020  
                         ?___lwtoft 0028            out_mod1_SW4__OFF@pinmask 0074  
         __end_of_save_modalita_SW4 08E4                   ?_out_mod1_SW4__ON 0076  
         __end_of_pulsante_debounce 05E3                  ??_out_mod1_SW4__ON 0028  
                         _ADC_VALUE 08C1                           _ADC_START 08AC  
                   __size_of_ON_LED 003C               __size_of_eeprom_write 002A  
__size_of_pulsanti_alldebounce_task 001B                             ___awdiv 0B4B  
                         ?_out_init 0070                             ___ftmul 05E3  
                           ___fttol 0D62                             ___lwdiv 0A6D  
                  ?_out_SW1_SW2__ON 0020                    softPWM_init@freq 0049  
                  softPWM_init@spwm 004B                          ??___awtoft 002B  
                        ??___ftpack 0025                           _ANSELbits 0188  
                   __size_of_millis 0015                             __ptext1 0BA6  
                           __ptext2 0AAB                             __ptext3 0342  
                           __ptext4 08D1                             __ptext5 0AFA  
                           __ptext6 09CC                             __ptext7 07F4  
                           __ptext8 0785                             __ptext9 0943  
                        ??___lwtoft 0074                 __end_of_ADC_IS_DONE 08A4  
                      __size_of_isr 0026                           _P4_GIALLO 0197  
              __size_of_softPWM_Set 0098                         ON_LED@state 004A  
                  softPWM_task@spwm 0075                             clrloop0 08CA  
                           _outputs 0052                end_of_initialization 0060  
                     ?_softPWM_init 0049                       ?_softPWM_task 0076  
                        ?_ADC_VALUE 0070                        _eeprom_write 09CC  
                        ?_ADC_START 0070                             millis@m 0024  
       pulsante_INIT_debounce@value 0024                          ??_out_init 004C  
 __end_of_pulsanti_alldebounce_task 0943                __end_of_buzzer_Start 0981  
                         _PORTAbits 0005                           _PORTBbits 0006  
                         _PORTCbits 0007                           _TRISAbits 0085  
                         _TRISBbits 0086                           _TRISCbits 0087  
               softPWM_task@pinmask 0074          __size_of_save_modalita_SW4 0013  
                        _out_toggle 0F3A       pulsanti_alldebounce_task@size 002F  
                    ??_softPWM_init 0076                      ??_softPWM_task 0028  
        __size_of_pulsante_debounce 00D9                       ??_eeprom_Load 0020  
                     ??_eeprom_Save 0021                       ??_eeprom_read 0074  
                    __end_of_ON_LED 0A6D                         ___ftmul@exp 0035  
                       _ADC_IS_DONE 08A0                __size_of_switch_init 005E  
                    __end_of_millis 08F9                 start_initialization 0015  
                       __end_of_isr 09CC                   _read_modalita_SW4 07F4  
                ?_read_modalita_SW4 0070                         ??_ADC_VALUE 0074  
                          ??_ON_LED 0049                         ??_ADC_START 0074  
          __CFG_FOSC$INTRC_NOCLKOUT 0000                   out_SW1_SW2__ON@o1 0075  
                 out_SW1_SW2__ON@o2 0020                         out_toggle@p 0075  
               ??_read_modalita_SW4 0076            ??_pulsante_INIT_debounce 0020  
               __end_of_eeprom_Load 07F4                 __end_of_eeprom_Save 0B4B  
               __end_of_eeprom_read 095E                         __pdataBANK0 0052  
                       __pdataBANK1 00E4                            ??_millis 0074  
                out_mod1_SW4__OFF@v 0075                   __size_of___awtoft 0025  
                 __size_of___ftpack 006E                         __pbssCOMMON 0076  
                         ___latbits 0002                   __size_of___lwtoft 0018  
                     __pcstackBANK0 0020           __end_of_read_modalita_SW4 0800  
                       ?_out_toggle 0076          pulsanti_alldebounce_task@i 0031  
                  eeprom_write@addr 0020                     softPWM_Set@perc 003B  
                   softPWM_Set@spwm 0048                       ??_buzzer_Stop 0074  
                     ??_buzzer_init 0074                    ___lwdiv@dividend 0022  
             __size_of_buzzer_Start 0023              pulsante_debounce@value 002D  
          pulsante_debounce@pinmask 002C                           _conv16to8 0056  
         __size_of_out_mod1_SW4__ON 0085                            ?___awdiv 0020  
                          ?___ftmul 002B                            ?___fttol 0020  
                          ?___lwdiv 0020                __end_of_softPWM_init 0A31  
              __end_of_softPWM_task 050A                   __size_of_out_init 00B2  
           __size_of_ADC_notte_init 0017                    ___lwdiv@quotient 0025  
                      _buzzer_Start 095E                            _P1_ROSSO 01D0  
                 interrupt_function 0004                         _eeprom_Load 0785  
                       _eeprom_Save 0AFA                           clear_ram0 08C9  
                       _eeprom_read 0943                            _PIE1bits 008C  
                          _PIR1bits 000C     __size_of_pulsante_INIT_debounce 004F  
               __end_of_buzzer_Stop 08BA                 __end_of_buzzer_init 08C1  
                 _out_mod1_SW4__OFF 0C04                 __size_of_out_toggle 00C6  
                ?_out_mod1_SW4__OFF 0076             out_mod1_SW4__ON@pinmask 0074  
                        _ADCON0bits 001F                       ??_softPWM_Set 003C  
                          _WPUBbits 0095                           _output_P1 00DD  
                         _output_P2 00D6                           _output_P3 00CF  
                         _output_P4 00C8            __size_of_out_SW1_SW2__ON 00CF  
        __size_of_read_modalita_SW4 000C                 ??_out_mod1_SW4__OFF 0020  
                     _timer0_millis 0076           __end_of_out_mod1_SW4__OFF 0C6F  
                      ?_ADC_IS_DONE 0070                   out_mod1_SW4__ON@v 0075  
                  __size_of___awdiv 005B                    __size_of___ftmul 00D3  
                  __size_of___fttol 008E                    __size_of___lwdiv 003E  
                          ___awtoft 0981                            ___ftpack 0C6F  
        ?_pulsanti_alldebounce_task 002F                 eeprom_Load@checksum 0021  
                          ___lwtoft 0910              _pulsante_INIT_debounce 0AAB  
                   ___lwdiv@divisor 0020                     ___lwdiv@counter 0024  
                          __ptext10 0928                            __ptext11 050A  
                          __ptext20 08B3                            __ptext12 0F3A  
                          __ptext21 095E                            __ptext13 0CDD  
                          __ptext30 08E4                            __ptext22 0A31  
                          __ptext14 0C04                            __ptext31 08F9  
                          __ptext23 0DF0                            __ptext15 0E88  
                          __ptext32 08C1                            __ptext24 0910  
                          __ptext16 09F6                            __ptext33 08AC  
                          __ptext25 0D62                            __ptext17 0A6D  
                          __ptext34 08A0                            __ptext26 05E3  
                          __ptext18 06B6                            __ptext35 09A6  
                          __ptext27 0981                            __ptext19 08BA  
                          __ptext28 0C6F                            __ptext29 0B4B  
               __end_of_softPWM_Set 0E88                   __CFG_BOR4V$BOR40V 0000  
     pulsante_INIT_debounce@pinmask 0023                       __size_of_main 02DE  
                       _buzzer_Stop 08B3                         _buzzer_init 08BA  
             __size_of_softPWM_init 003B               __size_of_softPWM_task 01C8  
                     ??_switch_init 0074                    _out_mod1_SW4__ON 0CDD  
                          _soft_pwm 00B8                            _out_init 0E88  
                          _pulsanti 00E4                      _ADC_notte_init 08F9  
                        _INTCONbits 000B             pulsante_INIT_debounce@p 0025  
                      ??_out_toggle 0020                            intlevel1 0000  
                      _softPWM_init 09F6                        _softPWM_task 0342  
                 ??_out_SW1_SW2__ON 0021                  pulsante_debounce@p 002E  
                        _OSCCONbits 008F                         _POWER_ONLED 0190  
        __size_of_out_mod1_SW4__OFF 006B           save_modalita_SW4@modalita 0027  
            __end_of_ADC_notte_init 0910                  __end_of_out_toggle 1000  
               __end_of_switch_init 0C04                         _softPWM_Set 0DF0  
                      softPWM_Set@p 0042                        softPWM_Set@t 0045  
                     ?_eeprom_write 0074                        ?_eeprom_Load 0070  
                      ?_eeprom_Save 0070                   out_toggle@pinmask 0074  
                      ?_eeprom_read 0070              out_SW1_SW2__ON@pinmask 0074  
